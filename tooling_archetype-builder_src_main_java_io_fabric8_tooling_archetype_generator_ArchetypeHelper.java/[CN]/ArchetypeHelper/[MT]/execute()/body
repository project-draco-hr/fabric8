{
  outputDir.mkdirs();
  if (packageName == null || packageName.length() == 0) {
    packageName=groupId + "." + artifactId;
  }
  String packageDir=packageName.replace('.','/');
  debug("Creating archetype using Maven groupId: " + groupId + ", artifactId: "+ artifactId+ ", version: "+ version+ " in directory: "+ outputDir);
  Map<String,String> replaceProperties=parseProperties();
  replaceProperties.putAll(overrideProperties);
  debug("Using replace properties: " + replaceProperties);
  ZipFile zip=null;
  try {
    zip=new ZipFile(archetypeFile);
    Enumeration<? extends ZipEntry> entries=zip.entries();
    while (entries.hasMoreElements()) {
      final ZipEntry entry=entries.nextElement();
      if (!entry.isDirectory()) {
        String fullName=entry.getName();
        if (fullName != null && fullName.startsWith(zipEntryPrefix)) {
          String name=replaceFileProperties(fullName.substring(zipEntryPrefix.length()),replaceProperties);
          debug("Processing resource: " + name);
          int idx=name.lastIndexOf('/');
          Matcher matcher=sourcePathRegexPattern.matcher(name);
          String dirName;
          if (packageName.length() > 0 && idx > 0 && matcher.matches()) {
            String prefix=matcher.group(1);
            dirName=prefix + packageDir + "/"+ name.substring(prefix.length());
          }
 else           if (packageName.length() > 0 && name.startsWith(webInfResources)) {
            dirName="src/main/webapp/WEB-INF/" + packageDir + "/resources"+ name.substring(webInfResources.length());
          }
 else {
            dirName=name;
          }
          File file=new File(outputDir,dirName);
          file.getParentFile().mkdirs();
          FileOutputStream out=null;
          try {
            out=new FileOutputStream(file);
            boolean isBinary=false;
            for (            String suffix : binarySuffixes) {
              if (name.endsWith(suffix)) {
                isBinary=true;
                break;
              }
            }
            if (isBinary) {
              IOHelpers.copy(zip.getInputStream(entry),out);
            }
 else {
              ByteArrayOutputStream bos=new ByteArrayOutputStream();
              IOHelpers.copy(zip.getInputStream(entry),bos);
              String text=new String(bos.toByteArray(),"UTF-8");
              out.write(transformContents(text,replaceProperties).getBytes());
            }
          }
  finally {
            if (out != null) {
              IOHelpers.close(out);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
 finally {
    if (zip != null) {
      IOHelpers.close(zip);
    }
  }
  if (!replaceProperties.isEmpty()) {
    File pom=new File(outputDir,"pom.xml");
    String text=IOHelpers.readFully(new FileReader(pom));
    for (    Map.Entry<String,String> e : replaceProperties.entrySet()) {
      text=replaceVariable(text,e.getKey(),e.getValue());
    }
    if (Strings.isNotBlank(name)) {
      text=text.replaceFirst("<name>(.*)</name>","<name>" + name + "</name>");
    }
    if (Strings.isNotBlank(description)) {
      text=text.replaceFirst("<description>(.*)</description>","<description>" + description + "</description>");
    }
    IOHelpers.writeTo(pom,text);
  }
  if (createDefaultDirectories) {
    File srcDir=new File(outputDir,"src");
    File mainDir=new File(srcDir,"main");
    File testDir=new File(srcDir,"test");
    String srcDirName="java";
    for (    File dir : new File[]{mainDir,testDir}) {
      for (      String name : new String[]{srcDirName + "/" + packageDir,"resources"}) {
        new File(dir,name).mkdirs();
      }
    }
  }
  return 0;
}
