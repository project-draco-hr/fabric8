{
  Map<String,Object> properties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  for (  String k : reference.getPropertyKeys()) {
    properties.put(k,reference.getProperty(k));
  }
  Set<String> intents=Utils.normalize(properties.get(SERVICE_EXPORTED_INTENTS));
  Set<String> extraIntents=Utils.normalize(properties.get(SERVICE_EXPORTED_INTENTS_EXTRA));
  if (!intents.isEmpty() || !extraIntents.isEmpty()) {
    throw new UnsupportedOperationException();
  }
  Set<String> configs=Utils.normalize(properties.get(SERVICE_EXPORTED_CONFIGS));
  if (configs.isEmpty()) {
    configs.add(CONFIG);
  }
 else   if (!configs.contains(CONFIG)) {
    throw new UnsupportedOperationException();
  }
  URI connectUri=new URI(this.server.getConnectAddress());
  String fabricAddress=connectUri.getScheme() + "://" + exportedAddress+ ":"+ connectUri.getPort();
  properties.remove(SERVICE_EXPORTED_CONFIGS);
  properties.put(SERVICE_IMPORTED_CONFIGS,new String[]{CONFIG});
  properties.put(ENDPOINT_FRAMEWORK_UUID,this.uuid);
  properties.put(FABRIC_ADDRESS,fabricAddress);
  String uuid=UuidGenerator.getUUID();
  properties.put(ENDPOINT_ID,uuid);
  EndpointDescription description=new EndpointDescription(properties);
  server.registerService(description.getId(),new ServerInvoker.ServiceFactory(){
    public Object get(){
      return reference.getBundle().getBundleContext().getService(reference);
    }
    public void unget(){
      reference.getBundle().getBundleContext().ungetService(reference);
    }
  }
,AriesFrameworkUtil.getClassLoader(reference.getBundle()));
  String descStr=Utils.getEndpointDescriptionXML(description);
  final String nodePath=zooKeeper.create(DOSGI_REGISTRY + "/" + uuid,descStr,CreateMode.EPHEMERAL);
  return new ExportRegistration(reference,description,nodePath);
}
