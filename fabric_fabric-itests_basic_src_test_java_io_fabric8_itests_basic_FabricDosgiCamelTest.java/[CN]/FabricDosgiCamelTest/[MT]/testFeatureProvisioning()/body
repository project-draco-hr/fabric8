{
  System.out.println(executeCommand("fabric:create -n root"));
  System.out.println(executeCommand("fabric:profile-list"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
    waitForFabricCommands();
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy,2).withName("dosgi").withProfiles("karaf").assertProvisioningResult().build();
    try {
      List<Container> containerList=new ArrayList<Container>(containers);
      List<Container> dosgiProviderContainers=containerList.subList(0,containerList.size() / 2);
      List<Container> dosgiCamelContainers=containerList.subList(containerList.size() / 2,containerList.size());
      for (      Container c : dosgiProviderContainers) {
        setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(c.getId()),"changing profile");
        Profile p=c.getVersion().getProfile("example-dosgi-camel.provider");
        c.setProfiles(new Profile[]{p});
      }
      for (      Container c : dosgiCamelContainers) {
        setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(c.getId()),"changing profile");
        Profile p=c.getVersion().getProfile("example-dosgi-camel.consumer");
        c.setProfiles(new Profile[]{p});
      }
      Provision.provisioningSuccess(dosgiProviderContainers,PROVISION_TIMEOUT);
      Provision.provisioningSuccess(dosgiCamelContainers,PROVISION_TIMEOUT);
      Assert.assertTrue(Provision.waitForCondition(dosgiCamelContainers,new ContainerCondition(){
        @Override public Boolean checkConditionOnContainer(        final Container c){
          String response=executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " log:display | grep \"Message from distributed service to\"");
          System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-info fabric-client"));
          Assert.assertNotNull(response);
          System.out.println(response);
          String[] lines=response.split("\n");
          return lines.length >= 1;
        }
      }
,20000L));
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
