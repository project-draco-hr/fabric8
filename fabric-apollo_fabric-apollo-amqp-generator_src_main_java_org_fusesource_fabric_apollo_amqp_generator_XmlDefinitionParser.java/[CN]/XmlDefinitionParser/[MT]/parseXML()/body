{
  JAXBContext jc=JAXBContext.newInstance(Amqp.class.getPackage().getName());
  for (  File inputFile : generator.getInputFiles()) {
    BufferedReader reader=new BufferedReader(new FileReader(inputFile));
    Unmarshaller unmarshaller=jc.createUnmarshaller();
    SAXParserFactory parserFactory;
    parserFactory=SAXParserFactory.newInstance();
    parserFactory.setNamespaceAware(false);
    XMLReader xmlreader=parserFactory.newSAXParser().getXMLReader();
    xmlreader.setEntityResolver(new EntityResolver(){
      public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        InputSource is=null;
        if (systemId != null && systemId.endsWith("amqp.dtd")) {
          is=new InputSource();
          is.setPublicId(publicId);
          is.setSystemId(Generator.class.getResource("amqp.dtd").toExternalForm());
        }
        return is;
      }
    }
);
    Source er=new SAXSource(xmlreader,new InputSource(reader));
    Amqp amqp=(Amqp)unmarshaller.unmarshal(er);
    for (    Object docOrSection : amqp.getDocOrSection()) {
      if (docOrSection instanceof Section) {
        Section section=(Section)docOrSection;
        for (        Object docOrDefinitionOrType : section.getDocOrDefinitionOrType()) {
          if (docOrDefinitionOrType instanceof Type) {
            Type type=(Type)docOrDefinitionOrType;
            Log.info("Section : %s - Type name=%s class=%s provides=%s source=%s",section.getName(),type.getName(),type.getClazz(),type.getProvides(),type.getSource());
            generator.getClasses().add(type.getClazz());
            generator.getSections().put(type.getName(),section.getName());
            if (type.getProvides() != null) {
              generator.getProvides().add(type.getProvides());
            }
            if (type.getClazz().startsWith("primitive")) {
              generator.getPrimitives().add(type);
            }
 else             if (type.getClazz().startsWith("restricted")) {
              generator.getRestricted().add(type);
              generator.getRestrictedMapping().put(type.getName(),type.getSource());
            }
 else             if (type.getClazz().startsWith("composite")) {
              generator.getCompositeMapping().put(type.getName(),generator.getPackagePrefix() + "." + generator.getTypes()+ "."+ Utilities.toJavaClassName(type.getName()));
              generator.getComposites().add(type);
            }
          }
 else           if (docOrDefinitionOrType instanceof Definition) {
            Definition def=(Definition)docOrDefinitionOrType;
            generator.getDefinitions().add(def);
          }
        }
      }
    }
    reader.close();
  }
}
