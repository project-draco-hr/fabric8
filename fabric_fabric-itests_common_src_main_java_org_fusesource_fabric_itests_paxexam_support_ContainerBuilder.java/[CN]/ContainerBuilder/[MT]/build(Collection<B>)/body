{
  Set<Container> containers=new HashSet<Container>();
  FabricService fabricService=getOsgiServiceProxy(FabricService.class);
  CompletionService<Set<Container>> completionService=new ExecutorCompletionService<Set<Container>>(executorService);
  int tasks=0;
  for (  B options : buildersList) {
    if (!options.isEnsembleServer()) {
      options.zookeeperUrl(fabricService.getZookeeperUrl());
      completionService.submit(new CreateContainerTask(fabricService,options));
      tasks++;
    }
  }
  try {
    for (int i=0; i < tasks; i++) {
      Future<Set<Container>> futureContainerSet=completionService.poll(CREATE_TIMEOUT,TimeUnit.MILLISECONDS);
      Set<Container> containerSet=futureContainerSet.get();
      CONTAINERS.addAll(containerSet);
      containers.addAll(containerSet);
    }
    for (    Container container : containers) {
      Version version=fabricService.getDefaultVersion();
      container.setVersion(version);
      Set<Profile> profiles=new HashSet(Arrays.asList(container.getProfiles()));
      for (      String profileName : profileNames) {
        Profile profile=container.getVersion().getProfile(profileName);
        profiles.add(profile);
      }
      container.setProfiles(profiles.toArray(new Profile[profiles.size()]));
    }
    try {
      if (waitForProvisioning) {
        Provision.containerStatus(containers,provisionTimeOut);
      }
      if (assertProvisioningResult) {
        Provision.provisioningSuccess(containers,provisionTimeOut);
      }
    }
 catch (    Exception e) {
      throw FabricException.launderThrowable(e);
    }
  }
 catch (  Exception e) {
    throw FabricException.launderThrowable(e);
  }
  return containers;
}
