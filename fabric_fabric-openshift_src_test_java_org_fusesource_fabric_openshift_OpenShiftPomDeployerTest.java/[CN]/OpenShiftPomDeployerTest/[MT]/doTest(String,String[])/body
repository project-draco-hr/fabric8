{
  File sourceDir=new File(baseDir,"src/test/resources/" + folder);
  assertDirectoryExists(sourceDir);
  File pomSource=new File(sourceDir,"pom.xml");
  assertFileExists(pomSource);
  File outputDir=new File(baseDir,"target/" + getClass().getName() + "/"+ folder);
  outputDir.mkdirs();
  assertDirectoryExists(outputDir);
  File pom=new File(outputDir,"pom.xml");
  Files.copy(pomSource,pom);
  assertFileExists(pom);
  git=Git.init().setDirectory(outputDir).call();
  assertDirectoryExists(new File(outputDir,".git"));
  git.add().addFilepattern("pom.xml").call();
  git.commit().setMessage("Initial import").call();
  OpenShiftPomDeployer deployer=new OpenShiftPomDeployer(git,outputDir,deployDir,webAppDir);
  System.out.println("About to update the pom " + pom + " with artifacts: "+ Arrays.asList(artifactUrls));
  List<Parser> artifacts=new ArrayList<Parser>();
  for (  String artifactUrl : artifactUrls) {
    artifacts.add(new Parser(artifactUrl));
  }
  deployer.update(artifacts);
  System.out.println("Completed the new pom is: ");
  System.out.println(Files.toString(pom));
  Document xml=XmlUtils.parseDoc(pom);
  Element plugins=assertXPathElement(xml,"project/profiles/profile[id = 'openshift']/build/plugins");
  Element cleanExecution=assertXPathElement(plugins,"plugin[artifactId = 'maven-clean-plugin']/executions/execution[id = 'fuse-fabric-clean']");
  Element dependencySharedExecution=assertXPathElement(plugins,"plugin[artifactId = 'maven-dependency-plugin']/executions/execution[id = 'fuse-fabric-deploy-shared']");
  Element dependencyWebAppsExecution=assertXPathElement(plugins,"plugin[artifactId = 'maven-dependency-plugin']/executions/execution[id = 'fuse-fabric-deploy-webapps']");
  Element warPluginWarName=xpath("plugin[artifactId = 'maven-war-plugin']/configuration/warName").element(plugins);
  if (warPluginWarName != null) {
    String warName=warPluginWarName.getTextContent();
    System.out.println("WarName is now:  " + warName);
    assertTrue("Should not have ROOT war name",!"ROOT".equals(warName));
  }
}
