{
  assertValid();
  Set<CreateOpenshiftContainerMetadata> metadata=new HashSet<CreateOpenshiftContainerMetadata>();
  IUser user=getOrCreateConnection(options).getUser();
  IDomain domain=getOrCreateDomain(user,options);
  int number=Math.max(options.getNumber(),1);
  String cartridgeUrl=null;
  Set<String> profiles=options.getProfiles();
  String versionId=options.getVersion();
  Map<String,String> openshiftConfigOverlay=new HashMap<String,String>();
  if (profiles != null && versionId != null) {
    Version version=fabricService.get().getVersion(versionId);
    if (version != null) {
      for (      String profileId : profiles) {
        Profile profile=version.getProfile(profileId);
        if (profile != null) {
          Profile overlay=profile.getOverlay();
          Map<String,Map<String,String>> configurations=overlay.getConfigurations();
          if (configurations != null) {
            Map<String,String> openshiftConfig=configurations.get(OpenShiftConstants.OPENSHIFT_PID);
            if (openshiftConfig != null) {
              openshiftConfigOverlay.putAll(openshiftConfig);
            }
          }
        }
      }
    }
    cartridgeUrl=openshiftConfigOverlay.get("cartridge");
  }
  boolean fuseCart=false;
  if (cartridgeUrl == null) {
    cartridgeUrl=options.isEnsembleServer() ? REGISTRY_CART : PLAIN_CART;
    fuseCart=true;
  }
  String[] cartridgeUrls=cartridgeUrl.split(" ");
  LOG.info("Creating cartridges: " + cartridgeUrl);
  String standAloneCartridgeUrl=cartridgeUrls[0];
  StandaloneCartridge cartridge=new StandaloneCartridge(standAloneCartridgeUrl);
  String zookeeperUrl=fabricService.get().getZookeeperUrl();
  String zookeeperPassword=fabricService.get().getZookeeperPassword();
  Map<String,String> userEnvVars=new HashMap<String,String>();
  if (fuseCart) {
    userEnvVars.put("OPENSHIFT_FUSE_ZOOKEEPER_URL",zookeeperUrl);
    userEnvVars.put("OPENSHIFT_FUSE_ZOOKEEPER_PASSWORD",zookeeperPassword);
  }
  String initGitUrl=null;
  int timeout=IHttpClient.NO_TIMEOUT;
  ApplicationScale scale=null;
  for (int i=1; i <= number; i++) {
    if (userEnvVars.isEmpty()) {
      userEnvVars=null;
    }
    IApplication application=domain.createApplication(options.getName(),cartridge,scale,new GearProfile(options.getGearProfile()),initGitUrl,timeout,userEnvVars);
    String containerName=application.getName() + "-" + application.getUUID();
    LOG.info("Created application " + containerName);
    List<IEmbeddableCartridge> list=new ArrayList<IEmbeddableCartridge>();
    for (int idx=1, size=cartridgeUrls.length; idx < size; idx++) {
      String embeddedUrl=cartridgeUrls[idx];
      LOG.info("Adding embedded cartridge: " + embeddedUrl);
      list.add(new EmbeddableCartridge(embeddedUrl));
    }
    if (!list.isEmpty()) {
      application.addEmbeddableCartridges(list);
    }
    String gitUrl=application.getGitUrl();
    CreateOpenshiftContainerMetadata meta=new CreateOpenshiftContainerMetadata(domain.getId(),application.getUUID(),application.getCreationLog(),gitUrl);
    meta.setContainerName(containerName);
    meta.setCreateOptions(options);
    metadata.add(meta);
  }
  return metadata;
}
