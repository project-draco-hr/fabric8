{
  Session session=null;
  Exception connectException=null;
  for (int i=0; i <= options.getSshRetries(); i++) {
    if (i > 0) {
      long delayMs=(long)(200L * Math.pow(i,2));
      Thread.sleep(delayMs);
    }
    try {
      JSch jsch=new JSch();
      byte[] privateKey=readFile(options.getPrivateKeyFile());
      byte[] passPhrase=options.getPassPhrase() != null ? options.getPassPhrase().getBytes() : null;
      if (privateKey != null && options.getPassword() == null) {
        jsch.addIdentity(options.getUsername(),privateKey,null,passPhrase);
        session=jsch.getSession(options.getUsername(),options.getHost(),options.getPort());
      }
 else {
        session=jsch.getSession(options.getUsername(),options.getHost(),options.getPort());
        session.setPassword(options.getPassword());
      }
      session.setTimeout(60000);
      java.util.Properties config=new java.util.Properties();
      config.put("StrictHostKeyChecking","no");
      config.put("PreferredAuthentications","publickey,password");
      session.setConfig(config);
      session.connect();
      connectException=null;
      break;
    }
 catch (    Exception from) {
      connectException=from;
      if (session != null && session.isConnected()) {
        session.disconnect();
      }
      session=null;
    }
  }
  if (connectException != null) {
    throw connectException;
  }
  return session;
}
