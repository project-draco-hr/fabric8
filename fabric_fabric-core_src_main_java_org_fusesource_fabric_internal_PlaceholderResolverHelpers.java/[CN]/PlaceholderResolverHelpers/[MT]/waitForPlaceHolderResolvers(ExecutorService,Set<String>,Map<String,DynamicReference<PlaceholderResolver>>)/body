{
  final Map<String,PlaceholderResolver> result=new HashMap<String,PlaceholderResolver>();
  final Set<String> notFound=new HashSet<String>(schemes);
  CompletionService<PlaceholderResolver> completionService=new ExecutorCompletionService<PlaceholderResolver>(executor);
  for (  String scheme : schemes) {
    completionService.submit(resolvers.get(scheme));
  }
  try {
    for (int i=0; i < schemes.size(); i++) {
      try {
        PlaceholderResolver resolver=completionService.take().get();
        if (resolver != null) {
          result.put(resolver.getScheme(),resolver);
          notFound.remove(resolver.getScheme());
        }
      }
 catch (      ExecutionException ex) {
      }
    }
  }
 catch (  Exception ex) {
    throw new FabricException("Error while waiting for placeholder resolvers.",ex);
  }
  if (!notFound.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    sb.append("Missing Placeholder Resolvers:");
    for (    String resolver : notFound) {
      sb.append(" ").append(resolver);
    }
    throw new FabricException(sb.toString());
  }
  return result;
}
