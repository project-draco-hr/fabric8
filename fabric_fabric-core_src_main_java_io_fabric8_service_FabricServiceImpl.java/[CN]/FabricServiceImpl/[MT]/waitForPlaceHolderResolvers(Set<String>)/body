{
  final Map<String,PlaceholderResolver> result=new HashMap<String,PlaceholderResolver>();
  final CountDownLatch countDownLatch=new CountDownLatch(schemes.size());
  final FabricService fabricService=this;
  ServiceTracker<?,?> tracker=new ServiceTracker<PlaceholderResolverFactory,PlaceholderResolverFactory>(bundleContext,PlaceholderResolverFactory.class,null){
    @Override public PlaceholderResolverFactory addingService(    ServiceReference<PlaceholderResolverFactory> reference){
      PlaceholderResolverFactory factory=super.addingService(reference);
      String scheme=factory.getScheme();
      if (schemes.contains(scheme)) {
        PlaceholderResolver placeholderResolver=factory.createPlaceholderResolver(fabricService);
        result.put(scheme,placeholderResolver);
        countDownLatch.countDown();
      }
      return factory;
    }
  }
;
  tracker.open();
  try {
    if (!countDownLatch.await(20,TimeUnit.SECONDS)) {
      Set<String> foundSchemes=result.keySet();
      if (!foundSchemes.containsAll(schemes)) {
        StringBuilder sb=new StringBuilder();
        sb.append("Missing Placeholder Resolvers:");
        for (        String scheme : schemes) {
          if (!foundSchemes.contains(scheme)) {
            sb.append(" ").append(scheme);
          }
        }
        throw new FabricException(sb.toString());
      }
    }
  }
 catch (  InterruptedException ex) {
  }
 finally {
    tracker.close();
  }
  return result;
}
