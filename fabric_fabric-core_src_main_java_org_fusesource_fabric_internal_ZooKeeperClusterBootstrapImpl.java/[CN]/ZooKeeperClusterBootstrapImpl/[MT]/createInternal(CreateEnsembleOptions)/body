{
  try {
    int minimumPort=options.getMinimumPort();
    int maximumPort=options.getMaximumPort();
    String zooKeeperServerHost=options.getBindAddress();
    int zooKeeperServerPort=options.getZooKeeperServerPort();
    int zooKeeperServerConnectionPort=options.getZooKeeperServerConnectionPort();
    int mappedPort=Ports.mapPortToRange(zooKeeperServerPort,minimumPort,maximumPort);
    String connectionUrl=getConnectionAddress() + ":" + zooKeeperServerConnectionPort;
    updateDataStoreConfig(options.getDataStoreProperties());
    createZooKeeeperServerConfig(zooKeeperServerHost,mappedPort,options);
    registrationHandler.get().addRegistrationCallback(new DataStoreBootstrapTemplate(connectionUrl,options));
    createZooKeeeperConfig(connectionUrl,options);
    if (options.isEnsembleStart()) {
      System.setProperty(CreateEnsembleOptions.ENSEMBLE_AUTOSTART,Boolean.FALSE.toString());
      File file=new File(System.getProperty("karaf.base") + "/etc/system.properties");
      org.apache.felix.utils.properties.Properties props=new org.apache.felix.utils.properties.Properties(file);
      props.put(CreateEnsembleOptions.ENSEMBLE_AUTOSTART,Boolean.FALSE.toString());
      props.save();
    }
    startBundles(options);
    FabricService fs=fabricService.get();
    if (options.isWaitForProvision() && options.isAgentEnabled()) {
      waitForSuccessfulDeploymentOf(NAME,options.getProvisionTimeout());
    }
  }
 catch (  Exception e) {
    throw new FabricException("Unable to create zookeeper server configuration",e);
  }
}
