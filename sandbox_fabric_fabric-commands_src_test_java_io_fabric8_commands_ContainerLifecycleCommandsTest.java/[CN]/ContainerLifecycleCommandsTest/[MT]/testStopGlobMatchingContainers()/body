{
  containers("c*","c2");
  ContainerImpl c1=newContainer("c1");
  ContainerImpl c2=newContainer("c2");
  ContainerImpl c3=newContainer("c3");
  ContainerImpl d1=newContainer("d1");
  expect(this.fabricService.getContainers()).andReturn(new Container[]{c1,c3,c2,d1}).once();
  expect(this.fabricService.adapt(CuratorFramework.class)).andReturn(this.curatorFramework);
  expect(this.fabricService.getContainers()).andReturn(new Container[]{c1,c3,c2,d1}).once();
  this.fabricService.stopContainer(c1,false);
  expect(this.fabricService.adapt(CuratorFramework.class)).andReturn(this.curatorFramework);
  expect(this.fabricService.getContainers()).andReturn(new Container[]{c1,c3,c2,d1}).once();
  this.fabricService.stopContainer(c3,false);
  expect(this.fabricService.adapt(CuratorFramework.class)).andReturn(this.curatorFramework);
  expect(this.fabricService.getContainers()).andReturn(new Container[]{c1,c3,c2,d1}).once();
  this.fabricService.stopContainer(c2,false);
  replay(this.fabricService,this.commandSession);
  this.stop.execute(this.commandSession);
  verify(this.fabricService);
  String result=new String(this.result.toByteArray());
  assertThat(result.contains("Container 'c1' stopped successfully."),is(true));
  assertThat(result.contains("Container 'c2' stopped successfully."),is(true));
  assertThat(result.contains("Container 'c3' stopped successfully."),is(true));
}
