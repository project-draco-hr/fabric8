{
  assertValid();
  LOG.debug("Profile watcher thread started");
  int oldCounter=-1;
  SortedSet<String> oldActiveProfiles=null;
  Map<File,Long> localChecksums=new HashMap<File,Long>();
  Map<File,Long> localModified=new HashMap<File,Long>();
  Set<Profile> refreshProfiles=new HashSet<Profile>();
  ProfileService profileService=fabricService.get().adapt(ProfileService.class);
  while (running.get() && watchURLs.size() > 0) {
    SortedSet<String> currentActiveProfiles=getCurrentActiveProfileVersions();
    if (profileArtifacts == null || oldCounter != counter.get() || oldActiveProfiles == null || !oldActiveProfiles.equals(currentActiveProfiles)) {
      oldCounter=counter.get();
      oldActiveProfiles=currentActiveProfiles;
      try {
        LOG.debug("Reloading the currently active profile artifacts");
        profileArtifacts=findProfileArifacts();
      }
 catch (      Exception e) {
        LOG.error("Failed to get profiles artifacts: " + e,e);
      }
    }
    for (    Profile profile : refreshProfiles) {
      LOG.info("Refreshing profile: " + profile);
      Profiles.refreshProfile(fabricService.get(),profile);
    }
    refreshProfiles.clear();
    if (profileArtifacts != null) {
      File localRepository=getLocalRepository();
      Set<Map.Entry<ProfileVersionKey,Map<String,Parser>>> entries=profileArtifacts.entrySet();
      for (      Map.Entry<ProfileVersionKey,Map<String,Parser>> entry : entries) {
        ProfileVersionKey key=entry.getKey();
        Map<String,Parser> artifactMap=entry.getValue();
        Profile profile=key.getProfile();
        Properties checksums=findProfileChecksums(fabricService.get(),profile);
        if (checksums != null) {
          Set<Map.Entry<String,Parser>> artifactMapEntries=artifactMap.entrySet();
          for (          Map.Entry<String,Parser> artifactMapEntry : artifactMapEntries) {
            String location=artifactMapEntry.getKey();
            Parser parser=artifactMapEntry.getValue();
            if (isSnapshot(parser) || wildCardMatch(location)) {
              Object value=checksums.get(location);
              if (value == null) {
                value=checksums.get(JavaContainers.removeUriPrefixBeforeMaven(location));
              }
              Long checksum=null;
              if (value instanceof Number) {
                checksum=((Number)value).longValue();
              }
 else               if (value instanceof String) {
                checksum=Long.parseLong((String)value);
              }
              if (checksum == null) {
                if (missingChecksums.add(location)) {
                  LOG.warn("Could not find checksum for location " + location);
                }
              }
 else {
                File file=new File(localRepository.getPath() + File.separator + parser.getArtifactPath());
                if (!file.exists()) {
                  LOG.info("Ignoring file " + file.getPath() + " as it does not exist");
                }
 else {
                  Long oldModfied=localModified.get(file);
                  long modified=file.lastModified();
                  if (oldModfied == null || modified != oldModfied) {
                    localModified.put(file,modified);
                    Long fileChecksum=getFileChecksum(file);
                    if (fileChecksum != null && !fileChecksum.equals(checksum)) {
                      Long localChecksum=localChecksums.get(file);
                      if (localChecksum == null || !localChecksum.equals(fileChecksum)) {
                        localChecksums.put(file,fileChecksum);
                        LOG.info("Checksums don't match for " + location + ", container: "+ checksum+ " and local file: "+ fileChecksum);
                        if (isUpload()) {
                          uploadFile(location,parser,file);
                        }
                        refreshProfiles.add(profile);
                      }
                    }
                  }
                }
              }
            }
 else {
              LOG.info("Ignoring " + location);
            }
          }
        }
      }
    }
    try {
      Thread.sleep(interval);
    }
 catch (    InterruptedException ex) {
      running.set(false);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Profile watcher thread stopped");
  }
}
