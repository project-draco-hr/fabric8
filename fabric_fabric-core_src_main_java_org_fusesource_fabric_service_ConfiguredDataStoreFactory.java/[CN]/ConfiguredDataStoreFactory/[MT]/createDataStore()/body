{
  final DataStoreSupport instance;
  String kind=configuration.get("kind");
  Properties clusterProperties=new Properties();
  if (curator.checkExists().forPath(ZkPath.BOOTSTRAP.getPath()) != null) {
    clusterProperties=getProperties(curator,ZkPath.BOOTSTRAP.getPath());
  }
  clusterProperties.putAll(configuration);
  if (Strings.isNullOrEmpty(kind)) {
    kind=clusterProperties.getProperty("kind",System.getProperty(DATASTORE_KIND,"zookeeper"));
  }
  kind=kind.toLowerCase();
  if (kind.startsWith("z")) {
    properties.put("kind","org.fusesource.datastore.zookeeper");
    instance=new ZooKeeperDataStore();
  }
 else {
    properties.put("kind","org.fusesource.datastore.git");
    instance=new GitDataStore();
  }
  LOG.info("DataStore kind=" + kind + " so created DataStore: "+ instance+ " from clusterProperties "+ clusterProperties+ " and configuration "+ configuration);
  Objects.notNull(curator,"curator");
  instance.setCurator(curator);
  instance.setPlaceholderResolvers(placeholderResolvers);
  instance.setDataStoreProperties(clusterProperties);
  Runnable onInitialised=new Runnable(){
    public void run(){
      Objects.notNull(bundleContext,"bundleContext");
      registration=bundleContext.registerService(DataStore.class,instance,properties);
      LOG.info("Registered DataStore " + instance + " with "+ properties);
    }
  }
;
  if (isBootstrap()) {
  }
 else {
    instance.setOnInitialised(onInitialised);
  }
  if (instance instanceof GitDataStore) {
    GitDataStore gitDataStore=(GitDataStore)instance;
    if (isBootstrap()) {
      if (gitService == null) {
        LOG.info("Creating bootstrap GitService");
        gitService=createBootstrapGitService();
      }
    }
 else {
      Objects.notNull(gitService,"gitService");
    }
    LOG.info("Using GitService: " + gitService);
    gitDataStore.setGitService(gitService);
  }
  instance.init();
  return instance;
}
