{
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  try {
    String camelComponentName=mandatoryAttributeValue(attributeMap,"componentName");
    String componentInstanceName=mandatoryAttributeValue(attributeMap,"instanceName");
    String generatePackageName=mandatoryAttributeValue(attributeMap,"targetPackage");
    String generateClassName=mandatoryAttributeValue(attributeMap,"className");
    String kind=mandatoryAttributeValue(attributeMap,"kind");
    Project project=getSelectedProject(context);
    JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);
    Dependency core=CamelProjectHelper.findCamelCoreDependency(project);
    if (core == null) {
      return Results.fail("The project does not include camel-core");
    }
    CamelComponentDetails details=new CamelComponentDetails();
    Result result=loadCamelComponentDetails(camelComponentName,details);
    if (result != null) {
      return result;
    }
    result=ensureCamelArtifactIdAdded(project,details,dependencyInstaller);
    if (result != null) {
      return result;
    }
    String fqn=generatePackageName != null ? generatePackageName + "." + generateClassName : generateClassName;
    JavaResource existing=facet.getJavaResource(fqn);
    if (existing != null && existing.exists()) {
      return Results.fail("A class with name " + fqn + " already exists");
    }
    final JavaClassSource javaClass=Roaster.create(JavaClassSource.class);
    javaClass.setName(generateClassName);
    if (generatePackageName != null) {
      javaClass.setPackage(generatePackageName);
    }
    StringBuilder buffer=new StringBuilder();
    for (    InputComponent input : inputs) {
      if (input.hasValue()) {
        String valueExpression=null;
        Object value=input.getValue();
        if (value != null) {
          if (value instanceof String) {
            String text=value.toString();
            if (!Strings.isBlank(text)) {
              valueExpression="\"" + text + "\"";
            }
          }
          if (value instanceof Number) {
            valueExpression=value.toString();
          }
        }
        if (valueExpression != null) {
          buffer.append("\n");
          buffer.append("component.set");
          buffer.append(Strings.capitalize(input.getName()));
          buffer.append("(");
          buffer.append(valueExpression);
          buffer.append(");");
        }
      }
    }
    String configurationCode=buffer.toString();
    if (kind.equals("cdi")) {
      CamelCommandsHelper.createCdiComponentProducerClass(javaClass,details,camelComponentName,componentInstanceName,configurationCode);
    }
 else {
      CamelCommandsHelper.createSpringComponentFactoryClass(javaClass,details,camelComponentName,componentInstanceName,configurationCode);
    }
    facet.saveJavaSource(javaClass);
    return Results.success("Created new class " + generateClassName);
  }
 catch (  IllegalArgumentException e) {
    return Results.fail(e.getMessage());
  }
}
