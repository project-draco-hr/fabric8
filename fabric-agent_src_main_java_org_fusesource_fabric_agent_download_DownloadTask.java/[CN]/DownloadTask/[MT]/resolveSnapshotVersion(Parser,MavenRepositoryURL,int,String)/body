{
  if (!repositoryURL.isSnapshotsEnabled()) {
    throw new IOException("Snapshots not enabled");
  }
  LOG.debug(Ix2 + "Resolving snapshot version [" + version+ "]");
  try {
    final Document snapshotMetadata=getMetadata(repositoryURL.getURL(),new String[]{parser.getVersionLocalMetadataPath(version),parser.getVersionMetadataPath(version)});
    final String timestamp=XmlUtils.getTextContentOfElement(snapshotMetadata,"versioning/snapshot/timestamp");
    final String buildNumber=XmlUtils.getTextContentOfElement(snapshotMetadata,"versioning/snapshot/buildNumber");
    final String localSnapshot=XmlUtils.getTextContentOfElement(snapshotMetadata,"versioning/snapshot/localCopy");
    if (timestamp != null && buildNumber != null) {
      return new DownloadableArtifact(parser.getSnapshotVersion(version,timestamp,buildNumber),priority,repositoryURL.getURL(),parser.getSnapshotPath(version,timestamp,buildNumber),localSnapshot != null,configuration.getCertificateCheck());
    }
 else {
      String lastUpdated=XmlUtils.getTextContentOfElement(snapshotMetadata,"versioning/lastUpdated");
      if (lastUpdated != null) {
        if (lastUpdated.length() > 8) {
          lastUpdated=lastUpdated.substring(0,8) + "." + lastUpdated.substring(8);
          return new DownloadableArtifact(parser.getSnapshotVersion(version,lastUpdated,"0"),priority,repositoryURL.getURL(),parser.getArtifactPath(version),localSnapshot != null,configuration.getCertificateCheck());
        }
      }
    }
  }
 catch (  IOException ignore) {
  }
  return new DownloadableArtifact(parser.getVersion(),priority,repositoryURL.getURL(),parser.getArtifactPath(),false,configuration.getCertificateCheck());
}
