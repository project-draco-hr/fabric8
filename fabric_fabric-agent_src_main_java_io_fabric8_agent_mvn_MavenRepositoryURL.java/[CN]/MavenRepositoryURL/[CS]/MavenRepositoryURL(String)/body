{
  NullArgumentException.validateNotEmpty(repositorySpec,true,"Repository spec");
  final String[] segments=repositorySpec.split(MavenConstants.SEPARATOR_OPTIONS);
  final StringBuilder urlBuilder=new StringBuilder();
  boolean snapshotEnabled=false;
  boolean releasesEnabled=true;
  for (int i=0; i < segments.length; i++) {
    if (segments[i].trim().equalsIgnoreCase(MavenConstants.OPTION_ALLOW_SNAPSHOTS)) {
      snapshotEnabled=true;
    }
 else     if (segments[i].trim().equalsIgnoreCase(MavenConstants.OPTION_DISALLOW_RELEASES)) {
      releasesEnabled=false;
    }
 else     if (segments[i].trim().startsWith(MavenConstants.OPTION_ID)) {
      if (segments[i].length() > MavenConstants.OPTION_ID.length()) {
        m_id=segments[i].substring(MavenConstants.OPTION_ID.length() + 1);
      }
    }
 else {
      if (i > 0) {
        urlBuilder.append(MavenConstants.SEPARATOR_OPTIONS);
      }
      urlBuilder.append(segments[i]);
    }
  }
  String spec=urlBuilder.toString();
  if (!spec.endsWith("\\") && !spec.endsWith("/")) {
    spec=spec + "/";
  }
  m_repositoryURL=new URL(spec);
  m_snapshotsEnabled=snapshotEnabled;
  m_releasesEnabled=releasesEnabled;
  m_id=m_id != null ? m_id : "" + spec.hashCode();
  if (m_repositoryURL.getProtocol().equals("file")) {
    m_file=new File(m_repositoryURL.getPath());
  }
 else {
    m_file=null;
  }
}
