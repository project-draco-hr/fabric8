{
  System.err.println(executeCommand("fabric:create -n root"));
  executeCommand("fabric:profile-create --parents dosgi dosgi-provider");
  executeCommand("fabric:profile-edit --repositories mvn:org.fusesource.examples.fabric-camel-dosgi/features/" + System.getProperty("fabric.version") + "/xml/features dosgi-provider");
  executeCommand("fabric:profile-edit --features fabric-example-dosgi dosgi-provider");
  executeCommand("fabric:profile-create --parents dosgi --parents camel dosgi-camel");
  executeCommand("fabric:profile-edit --repositories mvn:org.fusesource.examples.fabric-camel-dosgi/features/" + System.getProperty("fabric.version") + "/xml/features dosgi-camel");
  executeCommand("fabric:profile-edit --features fabric-example-camel-dosgi dosgi-camel");
  Set<Container> containers=ContainerBuilder.create(2).withName("dosgi").withProfiles("dosgi").assertProvisioningResult().build();
  List<Container> containerList=new ArrayList<Container>(containers);
  List<Container> dosgiProviderContainers=containerList.subList(0,containerList.size() / 2);
  List<Container> dosgiCamelContainers=containerList.subList(containerList.size() / 2,containerList.size());
  for (  Container c : dosgiProviderContainers) {
    Profile p=getFabricService().getProfile(c.getVersion().getName(),"dogi-provider");
    c.setProfiles(new Profile[]{p});
  }
  for (  Container c : dosgiCamelContainers) {
    Profile p=getFabricService().getProfile(c.getVersion().getName(),"dogi-camel");
    c.setProfiles(new Profile[]{p});
  }
  Provision.assertSuccess(dosgiProviderContainers,PROVISION_TIMEOUT);
  Provision.assertSuccess(dosgiCamelContainers,PROVISION_TIMEOUT);
  for (  Container c : dosgiCamelContainers) {
    String response=executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " log:display | grep \"Message from distributed service to\"");
    System.err.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-info fabric-client"));
    assertNotNull(response);
    System.err.println(response);
    String[] lines=response.split("\n");
    assertTrue("At least one message is expected",lines.length >= 1);
  }
}
