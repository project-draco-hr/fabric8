{
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  NavigationResult navigationResult=(NavigationResult)attributeMap.get("navigationResult");
  if (navigationResult != null) {
    return navigationResult;
  }
  String selectedUri=endpoints.getValue();
  CamelEndpointDetails detail=completer.getEndpointDetail(selectedUri);
  if (detail == null) {
    return null;
  }
  attributeMap.put("componentName",detail.getEndpointComponentName());
  attributeMap.put("instanceName",detail.getEndpointInstance());
  attributeMap.put("endpointUri",detail.getEndpointUri());
  attributeMap.put("lineNumber",detail.getLineNumber());
  attributeMap.put("xml",detail.getFileName());
  attributeMap.put("mode","edit");
  attributeMap.put("kind","xml");
  String camelComponentName=detail.getEndpointComponentName();
  String uri=detail.getEndpointUri();
  CamelCatalog catalog=new DefaultCamelCatalog();
  String json=catalog.componentJSonSchema(camelComponentName);
  if (json == null) {
    throw new IllegalArgumentException("Could not find catalog entry for component name: " + camelComponentName);
  }
  List<InputComponent> allInputs=createUIInputsForCamelComponent(camelComponentName,uri,componentFactory,converterFactory);
  int size=allInputs.size();
  NavigationResultBuilder builder=Results.navigationBuilder();
  int pages=size % MAX_OPTIONS == 0 ? size / MAX_OPTIONS : size / MAX_OPTIONS + 1;
  for (int i=0; i < pages; i++) {
    int from=i * MAX_OPTIONS;
    int delta=Math.min(MAX_OPTIONS,size - from);
    int to=from + delta;
    boolean last=i == pages - 1;
    List<InputComponent> inputs=allInputs.subList(from,to);
    ConfigureEndpointPropertiesStep step=new ConfigureEndpointPropertiesStep(projectFactory,dependencyInstaller,camelComponentName,allInputs,inputs,last,i,pages);
    builder.add(step);
  }
  navigationResult=builder.build();
  attributeMap.put("navigationResult",navigationResult);
  return navigationResult;
}
