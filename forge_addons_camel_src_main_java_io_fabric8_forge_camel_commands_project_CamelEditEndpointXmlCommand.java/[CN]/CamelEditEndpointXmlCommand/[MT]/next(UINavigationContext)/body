{
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  String previous=(String)attributeMap.get("endpointUri");
  if (previous != null && previous.equals(endpoints.getValue())) {
    NavigationResult navigationResult=(NavigationResult)attributeMap.get("navigationResult");
    if (navigationResult != null) {
      return navigationResult;
    }
  }
  String selectedUri=endpoints.getValue();
  CamelEndpointDetails detail=completer.getEndpointDetail(selectedUri);
  if (detail == null) {
    return null;
  }
  attributeMap.put("componentName",detail.getEndpointComponentName());
  attributeMap.put("instanceName",detail.getEndpointInstance());
  attributeMap.put("endpointUri",detail.getEndpointUri());
  attributeMap.put("lineNumber",detail.getLineNumber());
  attributeMap.put("xml",detail.getFileName());
  attributeMap.put("mode","edit");
  attributeMap.put("kind","xml");
  String camelComponentName=detail.getEndpointComponentName();
  String uri=detail.getEndpointUri();
  CamelCatalog catalog=new DefaultCamelCatalog();
  String json=catalog.componentJSonSchema(camelComponentName);
  if (json == null) {
    throw new IllegalArgumentException("Could not find catalog entry for component name: " + camelComponentName);
  }
  boolean consumerOnly=detail.isConsumerOnly();
  boolean producerOnly=detail.isProducerOnly();
  List<EndpointOptionByGroup> groups=createUIInputsForCamelComponent(camelComponentName,uri,MAX_OPTIONS,consumerOnly,producerOnly,componentFactory,converterFactory);
  List<InputComponent> allInputs=new ArrayList<>();
  for (  EndpointOptionByGroup group : groups) {
    allInputs.addAll(group.getInputs());
  }
  NavigationResultBuilder builder=Results.navigationBuilder();
  int pages=groups.size();
  for (int i=0; i < pages; i++) {
    boolean last=i == pages - 1;
    EndpointOptionByGroup current=groups.get(i);
    ConfigureEndpointPropertiesStep step=new ConfigureEndpointPropertiesStep(projectFactory,dependencyInstaller,camelComponentName,current.getGroup(),allInputs,current.getInputs(),last,i,pages);
    builder.add(step);
  }
  NavigationResult navigationResult=builder.build();
  attributeMap.put("navigationResult",navigationResult);
  return navigationResult;
}
