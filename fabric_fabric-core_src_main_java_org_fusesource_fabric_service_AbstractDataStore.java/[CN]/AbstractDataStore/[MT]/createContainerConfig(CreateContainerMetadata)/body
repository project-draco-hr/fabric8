{
  assertValid();
  try {
    CreateContainerOptions options=metadata.getCreateOptions();
    String containerId=metadata.getContainerName();
    String parent=options.getParent();
    String versionId=options.getVersion() != null ? options.getVersion() : getDefaultVersion();
    Set<String> profileIds=options.getProfiles();
    if (profileIds == null || profileIds.isEmpty()) {
      profileIds=new LinkedHashSet<String>();
      profileIds.add("default");
    }
    StringBuilder sb=new StringBuilder();
    for (    String profileId : profileIds) {
      if (sb.length() > 0) {
        sb.append(" ");
      }
      sb.append(profileId);
    }
    setData(getCurator(),ZkPath.CONFIG_CONTAINER.getPath(containerId),versionId);
    setData(getCurator(),ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(versionId,containerId),sb.toString());
    setData(getCurator(),ZkPath.CONTAINER_PARENT.getPath(containerId),parent);
    setContainerMetadata(metadata);
    Map<String,String> configuration=metadata.getContainerConfiguration();
    for (    Map.Entry<String,String> entry : configuration.entrySet()) {
      String key=entry.getKey();
      String value=entry.getValue();
      setData(getCurator(),ZkPath.CONTAINER_ENTRY.getPath(metadata.getContainerName(),key),value);
    }
    String resolver=metadata.getOverridenResolver() != null ? metadata.getOverridenResolver() : options.getResolver();
    if (resolver == null && exists(getCurator(),ZkPath.CONTAINER_RESOLVER.getPath(containerId)) != null) {
      resolver=getStringData(getCurator(),ZkPath.CONTAINER_RESOLVER.getPath(containerId));
    }
 else     if (options.getResolver() != null) {
    }
 else     if (exists(getCurator(),ZkPath.POLICIES.getPath(ZkDefs.RESOLVER)) != null) {
      resolver=getStringData(getCurator(),ZkPath.POLICIES.getPath(ZkDefs.RESOLVER));
    }
 else {
      resolver=ZkDefs.DEFAULT_RESOLVER;
    }
    setData(getCurator(),ZkPath.CONTAINER_RESOLVER.getPath(containerId),resolver);
  }
 catch (  Exception e) {
    throw FabricException.launderThrowable(e);
  }
}
