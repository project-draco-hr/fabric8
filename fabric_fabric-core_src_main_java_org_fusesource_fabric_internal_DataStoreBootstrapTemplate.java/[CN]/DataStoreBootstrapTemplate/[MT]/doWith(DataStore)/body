{
  int minimumPort=options.getMinimumPort();
  int maximumPort=options.getMaximumPort();
  String zooKeeperServerHost=options.getBindAddress();
  int zooKeeperServerPort=options.getZooKeeperServerPort();
  int zooKeeperServerConnectionPort=options.getZooKeeperServerConnectionPort();
  int mappedPort=mapPortToRange(zooKeeperServerPort,minimumPort,maximumPort);
  CuratorFramework curator=null;
  try {
    curator=createCuratorFramework(connectionUrl,options);
    curator.start();
    curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
    if (options.isAutoImportEnabled()) {
      dataStore.importFromFileSystem(options.getImportPath());
    }
    byte[] dataStoreData=DataStoreHelpers.toBytes(DataStoreHelpers.toStringProperties(bootstrapConfiguration));
    ZooKeeperUtils.create(curator,ZkPath.BOOTSTRAP.getPath(),dataStoreData,CreateMode.PERSISTENT);
    createDefault(curator,ZkPath.CONFIG_DEFAULT_VERSION.getPath(),version);
    String defaultProfile=dataStore.getProfile(version,"default",true);
    setData(curator,ZkPath.CONFIG_ENSEMBLE_URL.getPath(),"${zk:" + karafName + "/ip}:"+ zooKeeperServerConnectionPort);
    setData(curator,ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),options.getZookeeperPassword());
    Properties zkProps=new Properties();
    zkProps.setProperty("zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
    zkProps.setProperty("zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
    dataStore.setFileConfiguration(version,defaultProfile,"org.fusesource.fabric.zookeeper.properties",DataStoreHelpers.toBytes(zkProps));
    String ensembleProfile=dataStore.getProfile(version,"fabric-ensemble-0000",true);
    dataStore.setProfileAttribute(version,ensembleProfile,"abstract","true");
    dataStore.setProfileAttribute(version,ensembleProfile,"hidden","true");
    Properties ensembleProps=new Properties();
    ensembleProps.put("tickTime","2000");
    ensembleProps.put("initLimit","10");
    ensembleProps.put("syncLimit","5");
    ensembleProps.put("dataDir","data/zookeeper/0000");
    loadPropertiesFrom(ensembleProps,options.getImportPath() + "/fabric/configs/versions/1.0/profiles/default/org.fusesource.fabric.zookeeper.server.properties");
    dataStore.setFileConfiguration(version,ensembleProfile,"org.fusesource.fabric.zookeeper.server-0000.properties",DataStoreHelpers.toBytes(ensembleProps));
    String ensembleServerProfile=dataStore.getProfile(version,"fabric-ensemble-0000-1",true);
    dataStore.setProfileAttribute(version,ensembleServerProfile,"hidden","true");
    dataStore.setProfileAttribute(version,ensembleServerProfile,"parents",ensembleProfile);
    Properties serverProps=new Properties();
    serverProps.put("clientPort",String.valueOf(mappedPort));
    serverProps.put("clientPortAddress",zooKeeperServerHost);
    dataStore.setFileConfiguration(version,ensembleServerProfile,"org.fusesource.fabric.zookeeper.server-0000.properties",DataStoreHelpers.toBytes(serverProps));
    setData(curator,ZkPath.CONFIG_ENSEMBLES.getPath(),"0000");
    setData(curator,ZkPath.CONFIG_ENSEMBLE.getPath("0000"),karafName);
    String fabricProfile=dataStore.getProfile(version,"fabric",true);
    Properties agentProps=DataStoreHelpers.toProperties(dataStore.getFileConfiguration(version,fabricProfile,"org.fusesource.fabric.agent.properties"));
    agentProps.put("feature.fabric-commands","fabric-commands");
    dataStore.setFileConfiguration(version,"fabric","org.fusesource.fabric.agent.properties",DataStoreHelpers.toBytes(agentProps));
    createDefault(curator,ZkPath.CONFIG_CONTAINER.getPath(karafName),version);
    StringBuilder profilesBuilder=new StringBuilder();
    Set<String> profiles=options.getProfiles();
    profilesBuilder.append("fabric").append(" ").append("fabric-ensemble-0000-1");
    for (    String p : profiles) {
      profilesBuilder.append(" ").append(p);
    }
    createDefault(curator,ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version,karafName),profilesBuilder.toString());
    Map<String,String> configs=new HashMap<String,String>();
    configs.put("encryption.enabled","${zk:/fabric/authentication/encryption.enabled}");
    dataStore.setConfiguration(version,defaultProfile,"org.fusesource.fabric.jaas",configs);
    createDefault(curator,"/fabric/authentication/encryption.enabled","true");
    createDefault(curator,"/fabric/authentication/domain","karaf");
    addUsersToZookeeper(curator,options.getUsers());
    createDefault(curator,ZkPath.AUTHENTICATION_CRYPT_ALGORITHM.getPath(),"PBEWithMD5AndDES");
    createDefault(curator,ZkPath.AUTHENTICATION_CRYPT_PASSWORD.getPath(),options.getZookeeperPassword());
  }
 catch (  Exception ex) {
    throw new FabricException("Unable to create bootstrap configuration",ex);
  }
 finally {
    curator.close();
  }
}
