{
  if (entity1 == entity2) {
    return true;
  }
 else   if (entity1 == null) {
    return configEqual(entity2,entity1);
  }
 else   if (entity1 instanceof Boolean) {
    return configEqual((Boolean)entity1,cast(Boolean.class,entity2));
  }
 else   if (entity1 instanceof Capabilities) {
    return configEqual((Capabilities)entity1,cast(Capabilities.class,entity2));
  }
 else   if (entity1 instanceof Container) {
    return configEqual((Container)entity1,cast(Container.class,entity2));
  }
 else   if (entity1 instanceof ContainerManifest) {
    return configEqual((ContainerManifest)entity1,cast(ContainerManifest.class,entity2));
  }
 else   if (entity1 instanceof ContainerPort) {
    return configEqual((ContainerPort)entity1,cast(ContainerPort.class,entity2));
  }
 else   if (entity1 instanceof EnvVar) {
    return configEqual((EnvVar)entity1,cast(EnvVar.class,entity2));
  }
 else   if (entity1 instanceof IntOrString) {
    return configEqual((IntOrString)entity1,cast(IntOrString.class,entity2));
  }
 else   if (entity1 instanceof List) {
    return configEqual((List)entity1,cast(List.class,entity2));
  }
 else   if (entity1 instanceof Map) {
    return configEqual((Map)entity1,cast(Map.class,entity2));
  }
 else   if (entity1 instanceof Number) {
    return configEqual((Number)entity1,cast(Number.class,entity2));
  }
 else   if (entity1 instanceof Pod) {
    return configEqual((Pod)entity1,cast(Pod.class,entity2));
  }
 else   if (entity1 instanceof PodState) {
    return configEqual((PodState)entity1,cast(PodState.class,entity2));
  }
 else   if (entity1 instanceof PodTemplate) {
    return configEqual((PodTemplate)entity1,cast(PodTemplate.class,entity2));
  }
 else   if (entity1 instanceof ReplicationController) {
    return configEqual((ReplicationController)entity1,cast(ReplicationController.class,entity2));
  }
 else   if (entity1 instanceof ReplicationControllerState) {
    return configEqual((ReplicationControllerState)entity1,cast(ReplicationControllerState.class,entity2));
  }
 else   if (entity1 instanceof RestartPolicy) {
    return configEqual((RestartPolicy)entity1,cast(RestartPolicy.class,entity2));
  }
 else   if (entity1 instanceof RestartPolicyAlways) {
    return configEqual((RestartPolicyAlways)entity1,cast(RestartPolicyAlways.class,entity2));
  }
 else   if (entity1 instanceof RestartPolicyNever) {
    return configEqual((RestartPolicyNever)entity1,cast(RestartPolicyNever.class,entity2));
  }
 else   if (entity1 instanceof RestartPolicyOnFailure) {
    return configEqual((RestartPolicyOnFailure)entity1,cast(RestartPolicyOnFailure.class,entity2));
  }
 else   if (entity1 instanceof Service) {
    return configEqual((Service)entity1,cast(Service.class,entity2));
  }
 else   if (entity1 instanceof String) {
    return configEqual((String)entity1,cast(String.class,entity2));
  }
 else   if (entity1 instanceof Volume) {
    return configEqual((Volume)entity1,cast(Volume.class,entity2));
  }
 else   if (entity1 instanceof VolumeMount) {
    return configEqual((VolumeMount)entity1,cast(VolumeMount.class,entity2));
  }
 else   if (entity1 instanceof VolumeSource) {
    return configEqual((VolumeSource)entity1,cast(VolumeSource.class,entity2));
  }
 else {
    throw new IllegalArgumentException("Unsupported type " + entity1.getClass().getName());
  }
}
