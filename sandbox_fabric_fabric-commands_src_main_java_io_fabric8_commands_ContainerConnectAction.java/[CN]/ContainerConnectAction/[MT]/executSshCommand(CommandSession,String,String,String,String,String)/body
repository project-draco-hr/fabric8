{
  SshClient client=createClient();
  String agentSocket;
  if (this.session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME) != null) {
    agentSocket=this.session.get(SshAgent.SSH_AUTHSOCKET_ENV_NAME).toString();
    client.getProperties().put(SshAgent.SSH_AUTHSOCKET_ENV_NAME,agentSocket);
  }
  try {
    ConnectFuture future=client.connect(hostname,Integer.parseInt(port));
    future.await();
    sshSession=future.getSession();
    Object oldIgnoreInterrupts=this.session.get(Console.IGNORE_INTERRUPTS);
    this.session.put(Console.IGNORE_INTERRUPTS,Boolean.TRUE);
    try {
      System.out.println("Connected");
      boolean authed=false;
      if (!authed) {
        if (username == null) {
          throw new FabricAuthenticationException("No username specified.");
        }
        log.debug("Prompting user for password");
        String pwd=password != null ? password : ShellUtils.readLine(session,"Password: ",true);
        sshSession.authPassword(username,pwd);
        int ret=sshSession.waitFor(ClientSession.WAIT_AUTH | ClientSession.CLOSED | ClientSession.AUTHED,0);
        if ((ret & ClientSession.AUTHED) == 0) {
          System.err.println("Password authentication failed");
        }
 else {
          authed=true;
        }
      }
      if (!authed) {
        throw new FabricAuthenticationException("Failed to authenticate.");
      }
      ShellUtils.storeFabricCredentials(session,username,password);
      ClientChannel channel;
      if (cmd != null && cmd.length() > 0) {
        channel=sshSession.createChannel("exec",cmd);
        channel.setIn(new ByteArrayInputStream(new byte[0]));
      }
 else {
        channel=sshSession.createChannel("shell");
        channel.setIn(new NoCloseInputStream(System.in));
        ((ChannelShell)channel).setPtyColumns(ShellUtils.getTermWidth(session));
        ((ChannelShell)channel).setupSensibleDefaultPty();
        ((ChannelShell)channel).setAgentForwarding(true);
      }
      channel.setOut(new NoCloseOutputStream(System.out));
      channel.setErr(new NoCloseOutputStream(System.err));
      channel.open();
      channel.waitFor(ClientChannel.CLOSED,0);
    }
  finally {
      session.put(Console.IGNORE_INTERRUPTS,oldIgnoreInterrupts);
      sshSession.close(false);
    }
  }
  finally {
    client.stop();
  }
}
