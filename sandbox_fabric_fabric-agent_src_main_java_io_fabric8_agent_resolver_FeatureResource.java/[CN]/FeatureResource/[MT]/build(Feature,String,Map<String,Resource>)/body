{
  FeatureResource resource=new FeatureResource(feature);
  Map<String,String> dirs=new HashMap<String,String>();
  Map<String,Object> attrs=new HashMap<String,Object>();
  attrs.put(FeatureNamespace.FEATURE_NAMESPACE,feature.getName());
  attrs.put(FeatureNamespace.CAPABILITY_VERSION_ATTRIBUTE,VersionTable.getVersion(feature.getVersion()));
  resource.addCapability(new CapabilityImpl(resource,FeatureNamespace.FEATURE_NAMESPACE,dirs,attrs));
  for (  BundleInfo info : feature.getBundles()) {
    if (!info.isDependency()) {
      Resource res=locToRes.get(info.getLocation());
      if (res == null) {
        throw new IllegalStateException("Resource not found for url " + info.getLocation());
      }
      List<Capability> caps=res.getCapabilities(IdentityNamespace.IDENTITY_NAMESPACE);
      if (caps.size() != 1) {
        throw new IllegalStateException("Resource does not have a single " + IdentityNamespace.IDENTITY_NAMESPACE + " capability");
      }
      dirs=new HashMap<String,String>();
      attrs=new HashMap<String,Object>();
      attrs.put(IdentityNamespace.IDENTITY_NAMESPACE,caps.get(0).getAttributes().get(IdentityNamespace.IDENTITY_NAMESPACE));
      attrs.put(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE,caps.get(0).getAttributes().get(IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE));
      attrs.put(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE,new VersionRange((Version)caps.get(0).getAttributes().get(IdentityNamespace.CAPABILITY_VERSION_ATTRIBUTE),true));
      resource.addRequirement(new RequirementImpl(resource,IdentityNamespace.IDENTITY_NAMESPACE,dirs,attrs));
    }
  }
  for (  Feature dep : feature.getDependencies()) {
    String name=dep.getName();
    String version=dep.getVersion();
    addDependency(resource,name,version,featureRange);
  }
  return resource;
}
