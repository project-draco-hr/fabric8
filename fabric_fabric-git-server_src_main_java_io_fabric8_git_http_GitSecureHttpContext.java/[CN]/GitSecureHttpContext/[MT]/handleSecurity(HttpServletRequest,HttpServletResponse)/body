{
  if (LOGGER.isTraceEnabled()) {
    LOGGER.trace("handleSecurity: request={}",request);
  }
  String authHeader=request.getHeader(HEADER_AUTHORIZATION);
  if (authHeader != null && authHeader.length() > 0) {
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace("handleSecurity: Header[Authorization={}]",authHeader);
    }
    authHeader=authHeader.trim();
    int blank=authHeader.indexOf(' ');
    if (blank > 0) {
      String authType=authHeader.substring(0,blank);
      String authInfo=authHeader.substring(blank).trim();
      if (authType.equalsIgnoreCase(AUTHENTICATION_SCHEME_BASIC)) {
        try {
          String srcString=base64Decode(authInfo);
          int i=srcString.indexOf(':');
          String username=srcString.substring(0,i);
          String password=srcString.substring(i + 1);
          if (LOGGER.isTraceEnabled()) {
            LOGGER.trace("handleSecurity: Username={}",username);
          }
          if (isContainerLogin(username)) {
            Properties containers=getContainerTokens(curator);
            String token=containers.getProperty(username);
            if (token == null) {
              throw new FailedLoginException("Container doesn't exist");
            }
 else             if (!password.equals(token)) {
              throw new FailedLoginException("Tokens do not match");
            }
 else {
              return true;
            }
          }
          Subject subject=doAuthenticate(username,password);
          if (subject != null) {
            request.setAttribute(HttpContext.AUTHENTICATION_TYPE,HttpServletRequest.BASIC_AUTH);
            request.setAttribute(HttpContext.REMOTE_USER,username);
            return true;
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
  try {
    response.setHeader(HEADER_WWW_AUTHENTICATE,AUTHENTICATION_SCHEME_BASIC + " realm=\"" + this.realm+ "\"");
    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    response.setContentLength(0);
    response.flushBuffer();
  }
 catch (  IOException ioe) {
  }
  return false;
}
