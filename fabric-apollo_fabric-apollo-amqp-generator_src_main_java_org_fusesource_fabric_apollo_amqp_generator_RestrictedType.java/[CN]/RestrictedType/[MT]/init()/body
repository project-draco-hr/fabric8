{
  if (type.getProvides() != null) {
    cls()._implements(cm.ref(generator.getInterfaces() + "." + toJavaClassName(type.getProvides())));
  }
 else {
    cls()._implements(cm.ref(generator.getAmqpBaseType()));
  }
  String source=generator.getPrimitiveJavaClass().get(type.getSource());
  if (source == null) {
    source=generator.getTypes() + "." + toJavaClassName(type.getSource());
  }
  basePrimitiveType=generator.getMapping().get(generator.getRestrictedMapping().get(type.getName()));
  cls()._extends(cm.ref(source));
  cls().constructor(JMod.PUBLIC).body().block();
  JMethod setter=cls().constructor(JMod.PUBLIC);
  setter.param(basePrimitiveType,"value");
  setter.body().block().assign(JExpr._this().ref("value"),JExpr.ref("value"));
  generateConstants();
}
