{
  sfb=new ZKServerFactoryBean();
  delete(sfb.getDataDir());
  delete(sfb.getDataLogDir());
  sfb.afterPropertiesSet();
  runtimeProperties=EasyMock.createMock(RuntimeProperties.class);
  EasyMock.expect(runtimeProperties.getRuntimeIdentity()).andReturn("root").anyTimes();
  EasyMock.expect(runtimeProperties.getHomePath()).andReturn(Paths.get("target")).anyTimes();
  EasyMock.expect(runtimeProperties.getDataPath()).andReturn(Paths.get("target/data")).anyTimes();
  EasyMock.expect(runtimeProperties.removeRuntimeAttribute(DataStoreTemplate.class)).andReturn(null).anyTimes();
  EasyMock.replay(runtimeProperties);
  CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().connectString("localhost:" + sfb.getClientPortAddress().getPort()).retryPolicy(new RetryOneTime(1000)).connectionTimeoutMs(360000);
  curator=builder.build();
  curator.start();
  curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
  basedir=System.getProperty("basedir",".");
  File root=new File(basedir + "/target/git").getCanonicalFile();
  delete(root);
  new File(root,"remote").mkdirs();
  remote=Git.init().setDirectory(new File(root,"remote")).call();
  remote.commit().setMessage("First Commit").setCommitter("fabric","user@fabric").call();
  String remoteUrl="file://" + new File(root,"remote").getCanonicalPath();
  new File(root,"local").mkdirs();
  git=Git.init().setDirectory(new File(root,"local")).call();
  git.commit().setMessage("First Commit").setCommitter("fabric","user@fabric").call();
  StoredConfig config=git.getRepository().getConfig();
  config.setString("remote","origin","url",remoteUrl);
  config.setString("remote","origin","fetch","+refs/heads/*:refs/remotes/origin/*");
  config.save();
  FabricGitServiceImpl gitService=new FabricGitServiceImpl();
  gitService.bindRuntimeProperties(runtimeProperties);
  gitService.activate();
  gitService.setGitForTesting(git);
  dataStore=new GitDataStoreImpl();
  dataStore.bindCurator(curator);
  dataStore.bindGitService(gitService);
  dataStore.bindRuntimeProperties(runtimeProperties);
  dataStore.bindConfigurer(new Configurer(){
    @Override public <T>Map<String,?> configure(    Map<String,?> configuration,    T target,    String... ignorePrefix) throws Exception {
      return null;
    }
    @Override public <T>Map<String,?> configure(    Dictionary<String,?> configuration,    T target,    String... ignorePrefix) throws Exception {
      return null;
    }
  }
);
  Map<String,Object> datastoreProperties=new HashMap<String,Object>();
  dataStore.activate(datastoreProperties);
}
