{
  if (isDescribed()) {
    if (!buffer) {
      writer.newLine();
      writer.write(Utils.tab(indent) + "public String toString() {");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "String ret = \"" + this.getJavaType()+ "{\";");
      writer.newLine();
      writer.write(Utils.tab(indent) + "String fields = new String();");
      writer.newLine();
      for (      AmqpField field : fields.values()) {
        writer.write(Utils.tab(indent) + "if ( " + field.getJavaName()+ " != null ) {");
        writer.newLine();
        writer.write(Utils.tab(++indent) + "fields += \"" + field.getJavaName()+ "=\" + "+ field.getJavaName()+ " + \" \";");
        writer.newLine();
        writer.write(Utils.tab(--indent) + "}");
        writer.newLine();
      }
      writer.write(Utils.tab(indent) + "ret += fields.trim();");
      writer.newLine();
      writer.write(Utils.tab(indent) + "ret += \"}\";");
      writer.newLine();
      writer.write(Utils.tab(indent) + "return ret;");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
    }
 else {
      writer.newLine();
      writer.write(Utils.tab(indent) + "public String toString() {");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "return bean().toString();");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
    }
  }
 else   if (isList()) {
    if (!buffer) {
      writer.newLine();
      writer.write(Utils.tab(indent) + "public String toString() {");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "String rc = \"AmqpList{\";");
      writer.newLine();
      writer.write(Utils.tab(indent) + "String contents = new String();");
      writer.newLine();
      writer.write(Utils.tab(indent) + "for (int i=0; i < getListCount(); i++) {");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "contents += \"[\" + i + \"]=\" + bean.value.get(i);");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
      writer.write(Utils.tab(indent) + "rc += contents.trim();");
      writer.newLine();
      writer.write(Utils.tab(indent) + "rc += \"}\";");
      writer.newLine();
      writer.write(Utils.tab(indent) + "return rc;");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
    }
 else {
      writer.newLine();
      writer.write(Utils.tab(indent) + "public String toString() {");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "return bean().toString();");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
    }
  }
 else   if (isPrimitive() || isRestricted()) {
    writer.newLine();
    writer.write(Utils.tab(indent) + "public String toString() {");
    writer.newLine();
    String returnStatement="return \"\"";
    boolean mapFilter=isMap();
    if (!mapFilter && isRestricted()) {
      mapFilter=resolveRestrictedType().isMap();
    }
    if (!mapFilter) {
      if (buffer) {
        returnStatement+=" + bean().getValue()";
      }
 else {
        returnStatement+=" + bean.value";
      }
    }
    returnStatement+=";";
    writer.write(Utils.tab(++indent) + returnStatement);
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
  }
}
