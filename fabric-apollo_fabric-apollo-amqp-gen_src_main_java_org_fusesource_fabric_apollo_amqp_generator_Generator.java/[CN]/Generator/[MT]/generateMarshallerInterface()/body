{
  String outputPackage=new String(packagePrefix + ".marshaller");
  File out=new File(outputDirectory,outputPackage.replace(".",SLASH) + SLASH + "AmqpMarshaller.java");
  BufferedWriter writer=new BufferedWriter(new FileWriter(out));
  Utils.writeJavaCopyWrite(writer);
  writer.write("package " + outputPackage + ";");
  writer.newLine();
  writer.newLine();
  TreeSet<String> imports=new TreeSet<String>();
  imports.add(getPackagePrefix() + ".marshaller.AmqpVersion");
  imports.add(getPackagePrefix() + ".marshaller.Encoded");
  writeMarshallerImports(writer,false,imports,outputPackage);
  writer.newLine();
  Utils.writeAutoGeneratedWarning(writer,0);
  writer.write("public interface AmqpMarshaller {");
  writer.newLine();
  writer.newLine();
  Utils.writeJavaComment(writer,1,"@return the protocol version of the marshaller");
  writer.write(Utils.tab(1) + "public AmqpVersion getVersion();");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(1) + "public " + TypeRegistry.any().typeMapping+ " decodeType(Buffer source) throws AmqpEncodingError;");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(1) + "public " + TypeRegistry.any().typeMapping+ " unmarshalType(DataInput in) throws IOException, AmqpEncodingError;");
  writer.newLine();
  for (  AmqpClass amqpClass : TypeRegistry.getGeneratedTypes()) {
    if (amqpClass.needsMarshaller()) {
      if (amqpClass.name.equals("*")) {
        continue;
      }
      writer.newLine();
      writer.write(Utils.tab(1) + "public Encoded<" + amqpClass.getValueMapping()+ "> encode("+ amqpClass.getJavaType()+ " data) throws AmqpEncodingError;");
      writer.newLine();
      writer.newLine();
      writer.write(Utils.tab(1) + "public Encoded<" + amqpClass.getValueMapping()+ "> decode"+ amqpClass.getJavaType()+ "(Buffer source, int offset) throws AmqpEncodingError;");
      writer.newLine();
      writer.newLine();
      writer.write(Utils.tab(1) + "public Encoded<" + amqpClass.getValueMapping()+ "> unmarshal"+ amqpClass.getJavaType()+ "(DataInput in) throws IOException, AmqpEncodingError;");
      writer.newLine();
    }
  }
  writer.write("}");
  writer.flush();
  writer.close();
}
