{
  final List<String> directory=getDirectory(dir);
  return new DirectoryStream<Path>(){
    @Override public Iterator<Path> iterator(){
      return new Iterator<Path>(){
        final Iterator<String> delegate=directory.iterator();
        @Override public boolean hasNext(){
          return delegate.hasNext();
        }
        @Override public Path next(){
          String val=delegate.next();
          return new FabricProfilePath(FabricProfileFileSystem.this,val.getBytes(StandardCharsets.UTF_8));
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
    @Override public void close() throws IOException {
    }
  }
;
}
