{
  updateStatus("installing",null,allResources,false);
  Map<Resource,Bundle> resToBnd=new HashMap<Resource,Bundle>();
  StringBuilder sb=new StringBuilder();
  sb.append("Configuration changed.  New bundles list:\n");
  for (  Resource bundle : allResources) {
    sb.append("  ").append(getUri(bundle)).append("\n");
  }
  LOGGER.info(sb.toString());
  Map<String,String> newCheckums=new HashMap<String,String>();
  List<Resource> toDeploy=new ArrayList<Resource>(allResources);
  List<Resource> toInstall=new ArrayList<Resource>();
  List<Bundle> toDelete=new ArrayList<Bundle>();
  Map<Bundle,Resource> toUpdate=new HashMap<Bundle,Resource>();
  File file=bundleContext.getDataFile("bundle-checksums.properties");
  bundleChecksums.load(file);
  for (  Bundle bundle : systemBundleContext.getBundles()) {
    if (bundle.getSymbolicName() != null && bundle.getBundleId() != 0) {
      Resource resource=null;
      boolean update=false;
      for (      Resource res : toDeploy) {
        if (bundle.getSymbolicName().equals(getSymbolicName(res))) {
          if (bundle.getVersion().equals(getVersion(res))) {
            if (isUpdateable(res)) {
              InputStream is=null;
              try {
                is=getBundleInputStream(res,providers);
                long newCrc=ChecksumUtils.checksum(is);
                long oldCrc=bundleChecksums.containsKey(bundle.getLocation()) ? Long.parseLong(bundleChecksums.get(bundle.getLocation())) : 0l;
                if (newCrc != oldCrc) {
                  LOGGER.debug("New snapshot available for " + bundle.getLocation());
                  update=true;
                  newCheckums.put(bundle.getLocation(),Long.toString(newCrc));
                }
              }
  finally {
                if (is != null) {
                  is.close();
                }
              }
            }
            resource=res;
            break;
          }
        }
      }
      if (resource != null) {
        toDeploy.remove(resource);
        resToBnd.put(resource,bundle);
        if (update) {
          toUpdate.put(bundle,resource);
        }
      }
 else       if (bundleSymbolicNameMatches(bundle,ignoredBundles)) {
      }
 else {
        toDelete.add(bundle);
      }
    }
  }
  for (  Resource resource : toDeploy) {
    TreeMap<Version,Bundle> matching=new TreeMap<Version,Bundle>();
    VersionRange range=getMicroVersionRange(getVersion(resource));
    for (    Bundle bundle : toDelete) {
      if (bundle.getSymbolicName().equals(getSymbolicName(resource)) && range.contains(bundle.getVersion())) {
        matching.put(bundle.getVersion(),bundle);
      }
    }
    if (!matching.isEmpty()) {
      Bundle bundle=matching.lastEntry().getValue();
      toUpdate.put(bundle,resource);
      toDelete.remove(bundle);
      resToBnd.put(resource,bundle);
    }
 else {
      toInstall.add(resource);
    }
  }
  Resource agentResource=toUpdate.get(bundleContext.getBundle());
  if (agentResource != null) {
    LOGGER.info("Updating agent");
    LOGGER.info("  " + getUri(agentResource));
    InputStream is=getBundleInputStream(agentResource,providers);
    Bundle bundle=bundleContext.getBundle();
    if (newCheckums.containsKey(bundle.getLocation())) {
      bundleChecksums.put(bundle.getLocation(),newCheckums.get(bundle.getLocation()));
    }
    bundleChecksums.save();
    bundle.update(is);
    return;
  }
  LOGGER.info("Changes to perform:");
  LOGGER.info("  Bundles to uninstall:");
  for (  Bundle bundle : toDelete) {
    LOGGER.info("    " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
  }
  LOGGER.info("  Bundles to update:");
  for (  Map.Entry<Bundle,Resource> entry : toUpdate.entrySet()) {
    LOGGER.info("    " + entry.getKey().getSymbolicName() + " / "+ entry.getKey().getVersion()+ " with "+ getUri(entry.getValue()));
  }
  LOGGER.info("  Bundles to install:");
  for (  Resource resource : toInstall) {
    LOGGER.info("    " + getUri(resource));
  }
  Set<Bundle> toRefresh=new HashSet<Bundle>();
  LOGGER.info("Stopping bundles:");
  List<Bundle> toStop=new ArrayList<Bundle>();
  toStop.addAll(toUpdate.keySet());
  toStop.addAll(toDelete);
  while (!toStop.isEmpty()) {
    List<Bundle> bs=getBundlesToDestroy(toStop);
    for (    Bundle bundle : bs) {
      String hostHeader=bundle.getHeaders().get(Constants.FRAGMENT_HOST);
      if (hostHeader == null && (bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STARTING)) {
        LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
        bundle.stop(Bundle.STOP_TRANSIENT);
      }
      toStop.remove(bundle);
    }
  }
  LOGGER.info("Uninstalling bundles:");
  for (  Bundle bundle : toDelete) {
    LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
    bundle.uninstall();
    toRefresh.add(bundle);
  }
  LOGGER.info("Updating bundles:");
  for (  Map.Entry<Bundle,Resource> entry : toUpdate.entrySet()) {
    Bundle bundle=entry.getKey();
    Resource resource=entry.getValue();
    LOGGER.info("  " + getUri(resource));
    InputStream is=getBundleInputStream(resource,providers);
    bundle.update(is);
    toRefresh.add(bundle);
  }
  LOGGER.info("Installing bundles:");
  for (  Resource resource : toInstall) {
    LOGGER.info("  " + getUri(resource));
    InputStream is=getBundleInputStream(resource,providers);
    Bundle bundle=systemBundleContext.installBundle(getUri(resource),is);
    toRefresh.add(bundle);
    resToBnd.put(resource,bundle);
    if (bundle.getVersion().getQualifier().endsWith(SNAPSHOT) && !newCheckums.containsKey(bundle.getLocation())) {
      newCheckums.put(bundle.getLocation(),Long.toString(ChecksumUtils.checksum(getBundleInputStream(resource,providers))));
    }
  }
  if (!newCheckums.isEmpty()) {
    for (    String key : newCheckums.keySet()) {
      bundleChecksums.put(key,newCheckums.get(key));
    }
    try {
      bundleChecksums.save();
    }
 catch (    IOException e) {
      LOGGER.warn("We failed to write the agent checksums which is probably due to the fabric-agent bundle being uninstalled so it can be replaced with a different version. Exception: " + e,e);
    }
  }
  findBundlesWithOptionalPackagesToRefresh(toRefresh);
  findBundlesWithFragmentsToRefresh(toRefresh);
  LOGGER.info("Stopping bundles:");
  toStop=new ArrayList<Bundle>();
  toStop.addAll(toRefresh);
  removeFragmentsAndBundlesInState(toStop,UNINSTALLED | RESOLVED | STOPPING);
  while (!toStop.isEmpty()) {
    List<Bundle> bs=getBundlesToDestroy(toStop);
    for (    Bundle bundle : bs) {
      String hostHeader=bundle.getHeaders().get(Constants.FRAGMENT_HOST);
      if (hostHeader == null && (bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STARTING)) {
        LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
        bundle.stop(Bundle.STOP_TRANSIENT);
      }
      toStop.remove(bundle);
    }
  }
  updateStatus("finalizing",null);
  LOGGER.info("Refreshing bundles:");
  for (  Bundle bundle : toRefresh) {
    LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
  }
  if (!toRefresh.isEmpty()) {
    updateStatus("finalizing (refreshing)",null);
    refreshPackages(toRefresh);
  }
  LOGGER.info("Resolving bundles");
  List<Bundle> toResolve=new ArrayList<Bundle>();
  removeFragmentsAndBundlesInState(toResolve,UNINSTALLED);
  for (  Resource resource : allResources) {
    Bundle bundle=resToBnd.get(resource);
    if (bundle != null) {
      String hostHeader=bundle.getHeaders().get(Constants.FRAGMENT_HOST);
      if (hostHeader == null && bundle.getState() != Bundle.UNINSTALLED) {
        toResolve.add(bundle);
      }
    }
  }
  if (!toResolve.isEmpty()) {
    updateStatus("finalizing (resolving)",null);
  }
  systemBundleContext.getBundle().adapt(FrameworkWiring.class).resolveBundles(toResolve);
  List<Resource> resourcesWithUrlHandlers=new ArrayList<Resource>();
  for (  Resource resource : allResources) {
    for (    Capability cap : resource.getCapabilities(null)) {
      if (cap.getNamespace().equals(ServiceNamespace.SERVICE_NAMESPACE)) {
        String[] itfs=getStrings(cap.getAttributes().get(Constants.OBJECTCLASS));
        if (itfs != null) {
          for (          String itf : itfs) {
            if (itf.equals(URLStreamHandlerService.class.getName())) {
              if (!resourcesWithUrlHandlers.contains(resource)) {
                resourcesWithUrlHandlers.add(resource);
              }
              break;
            }
          }
        }
      }
    }
  }
  Set<Resource> firstSetToStart=new LinkedHashSet<Resource>();
  Set<Resource> visited=new LinkedHashSet<Resource>();
  for (  Resource resource : resourcesWithUrlHandlers) {
    visit(resource,visited,firstSetToStart,wiring);
  }
  List<Throwable> exceptions=new ArrayList<Throwable>();
  LOGGER.info("Starting bundles:");
  if (!firstSetToStart.isEmpty()) {
    updateStatus("finalizing (starting)",null);
  }
  for (  Resource resource : firstSetToStart) {
    Bundle bundle=resToBnd.get(resource);
    if (bundle == null) {
      continue;
    }
    String hostHeader=bundle.getHeaders().get(Constants.FRAGMENT_HOST);
    if (hostHeader == null && bundle.getState() != Bundle.ACTIVE) {
      LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
      try {
        bundle.start();
      }
 catch (      BundleException e) {
        resourcesWithUrlHandlers.remove(resource);
        exceptions.add(e);
      }
    }
  }
  if (!resourcesWithUrlHandlers.isEmpty()) {
    LOGGER.info("Waiting for URL handlers...");
    long t0=System.currentTimeMillis();
    while (!resourcesWithUrlHandlers.isEmpty() && t0 - System.currentTimeMillis() < 30 * 1000) {
      for (Iterator<Resource> it=resourcesWithUrlHandlers.iterator(); it.hasNext(); ) {
        Resource resource=it.next();
        Bundle bundle=resToBnd.get(resource);
        boolean remove=false;
        if (bundle.getState() != Bundle.ACTIVE) {
          remove=true;
        }
 else {
          ServiceReference[] refs=bundle.getRegisteredServices();
          if (refs != null) {
            for (            ServiceReference ref : refs) {
              Object val=ref.getProperty(Constants.OBJECTCLASS);
              String[] itfs=getStrings(val);
              if (itfs != null) {
                for (                String itf : itfs) {
                  remove|=itf.equals(URLStreamHandlerService.class.getName());
                }
              }
 else {
                remove=true;
              }
            }
          }
        }
        if (remove) {
          it.remove();
        }
      }
      if (!resourcesWithUrlHandlers.isEmpty()) {
        Thread.sleep(100);
      }
    }
    LOGGER.info("Starting bundles:");
  }
  for (  Resource resource : requirementSort.sort(allResources)) {
    Bundle bundle=resToBnd.get(resource);
    String hostHeader=bundle.getHeaders().get(Constants.FRAGMENT_HOST);
    if (hostHeader == null && bundle.getState() != Bundle.ACTIVE) {
      LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
      try {
        bundle.start();
      }
 catch (      BundleException e) {
        exceptions.add(e);
      }
    }
  }
  if (!exceptions.isEmpty()) {
    throw new MultiException("Error updating agent",exceptions);
  }
  LOGGER.info("Done.");
}
