{
  try {
    File file=new File(patchDir,Long.toString(System.currentTimeMillis()) + ".patch.tmp");
    InputStream is=null;
    OutputStream os=null;
    try {
      is=url.openStream();
      os=new FileOutputStream(file);
      copy(is,os);
    }
  finally {
      close(is,os);
    }
    List<Patch> patches=new ArrayList<Patch>();
    ZipFile zipFile=null;
    try {
      zipFile=new ZipFile(file);
    }
 catch (    IOException e) {
    }
    if (zipFile != null) {
      File localRepoPath=new File(System.getProperty("karaf.base"),"system");
      Enumeration<? extends ZipEntry> entries=zipFile.entries();
      while (entries.hasMoreElements()) {
        ZipEntry entry=entries.nextElement();
        if (!entry.isDirectory()) {
          String entryName=entry.getName();
          if (entryName.startsWith("repository/")) {
            String fileName=entryName.substring("repository/".length());
            File f=new File(localRepoPath,fileName);
            if (!f.isFile()) {
              f.getParentFile().mkdirs();
              InputStream fis=zipFile.getInputStream(entry);
              FileOutputStream fos=new FileOutputStream(f);
              try {
                copy(fis,fos);
              }
  finally {
                close(fis,fos);
              }
            }
          }
 else           if (entryName.endsWith(".patch") && !entryName.contains("/")) {
            File f=new File(patchDir,entryName);
            if (!f.isFile()) {
              InputStream fis=zipFile.getInputStream(entry);
              FileOutputStream fos=new FileOutputStream(f);
              try {
                copy(fis,fos);
              }
  finally {
                close(fis,fos);
              }
            }
            Patch patch=load(f);
            f.renameTo(new File(patchDir,patch.getId() + ".patch"));
            patches.add(patch);
          }
        }
      }
      close(zipFile);
      file.delete();
    }
 else {
      Patch patch=load(file);
      file.renameTo(new File(patchDir,patch.getId() + ".patch"));
      patches.add(patch);
    }
    return patches;
  }
 catch (  Exception e) {
    throw new PatchException("Unable to download patch from url " + url,e);
  }
}
