{
  preCreateContainer(name);
  FabricValidations.validateProfileNames(profiles);
  if (isEnsembleServer && newUserPassword == null) {
    newUserPassword=zookeeperPassword != null ? zookeeperPassword : fabricService.getZookeeperPassword();
  }
  CreateSshContainerOptions.Builder builder=CreateSshContainerOptions.builder().name(name).ensembleServer(isEnsembleServer).resolver(resolver).bindAddress(bindAddress).manualIp(manualIp).number(number).host(host).preferredAddress(InetAddress.getByName(host).getHostAddress()).username(user).password(password).privateKeyFile(privateKeyFile != null ? privateKeyFile : CreateSshContainerOptions.DEFAULT_PRIVATE_KEY_FILE).passPhrase(passPhrase).port(port).adminAccess(adminAccess).sshRetries(sshRetries).minimumPort(minimumPort).maximumPort(maximumPort).password(password).proxyUri(proxyUri != null ? proxyUri : fabricService.getMavenRepoURI()).zookeeperUrl(fabricService.getZookeeperUrl()).zookeeperPassword(isEnsembleServer && zookeeperPassword != null ? zookeeperPassword : fabricService.getZookeeperPassword()).jvmOpts(jvmOpts != null ? jvmOpts : fabricService.getDefaultJvmOptions()).environmentalVariable(environmentalVariables).withUser(newUser,newUserPassword,newUserRole).version(version).profiles(getProfileNames()).dataStoreProperties(getDataStoreProperties()).dataStoreType(dataStoreType != null && isEnsembleServer ? dataStoreType : fabricService.getDataStore().getType()).uploadDistribution(!distributionUploadDisable);
  if (path != null && !path.isEmpty()) {
    builder.path(path);
  }
  CreateContainerMetadata<?>[] metadatas=fabricService.createContainers(builder.build());
  if (isEnsembleServer && metadatas != null && metadatas.length > 0 && metadatas[0].isSuccess()) {
    ShellUtils.storeZookeeperPassword(session,metadatas[0].getCreateOptions().getZookeeperPassword());
  }
  displayContainers(metadatas);
  return null;
}
