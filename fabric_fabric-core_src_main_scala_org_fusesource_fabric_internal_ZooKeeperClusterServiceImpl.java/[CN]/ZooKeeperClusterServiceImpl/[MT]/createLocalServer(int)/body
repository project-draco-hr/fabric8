{
  ZKClient client=null;
  String karafName=System.getProperty("karaf.name");
  String result=null;
  String exception=null;
  try {
    Configuration config=configurationAdmin.getConfiguration("org.fusesource.fabric.zookeeper");
    Properties properties=new Properties();
    String connectionUrl=getLocalHostAddress() + ":" + Integer.toString(port);
    String mavenProxyUrl="http://" + getLocalHostAddress() + ":"+ 8040;
    properties.put("zookeeper.url",connectionUrl);
    config.setBundleLocation(null);
    config.update(properties);
    config=configurationAdmin.createFactoryConfiguration("org.fusesource.fabric.zookeeper.server");
    properties=new Properties();
    properties.put("tickTime","2000");
    properties.put("initLimit","10");
    properties.put("syncLimit","5");
    properties.put("dataDir","data/zookeeper/0000");
    properties.put("clientPort",Integer.toString(port));
    properties.put("fabric.zookeeper.pid","org.fusesource.fabric.zookeeper.server-0000");
    config.setBundleLocation(null);
    config.update(properties);
    client=new ZKClient(connectionUrl,Timespan.ONE_MINUTE,null);
    client.start();
    client.waitForStart(new Timespan(5,Timespan.TimeUnit.SECOND));
    String defaultProfile=ZkPath.CONFIG_VERSIONS_PROFILE.getPath(version,"default");
    setConfigProperty(client,defaultProfile + "/org.fusesource.fabric.zookeeper.properties","zookeeper.url","${zk:" + karafName + "/ip}:"+ Integer.toString(port));
    String profileNode=ZkPath.CONFIG_VERSIONS_PROFILE.getPath(version,"zk-server-0000") + "/org.fusesource.fabric.zookeeper.server-0000.properties";
    Properties p=new Properties();
    p.put("tickTime","2000");
    p.put("initLimit","10");
    p.put("syncLimit","5");
    p.put("dataDir","data/zookeeper/0000");
    ZooKeeperUtils.set(client,profileNode,toString(p));
    ZooKeeperUtils.set(client,ZkPath.CONFIG_VERSIONS_PROFILE.getPath(version,"zk-server-0000-1"),"zk-server-0000");
    profileNode=ZkPath.CONFIG_VERSIONS_PROFILE.getPath(version,"zk-server-0000-1") + "/org.fusesource.fabric.zookeeper.server-0000.properties";
    p=new Properties();
    p.put("clientPort","2181");
    ZooKeeperUtils.set(client,profileNode,toString(p));
    ZooKeeperUtils.set(client,"/fabric/configs/versions/" + version + "/general/zookeeper-cluster","0000");
    ZooKeeperUtils.set(client,"/fabric/configs/versions/" + version + "/general/zookeeper-cluster/0000",karafName);
    p=getProperties(client,defaultProfile + "/org.fusesource.fabric.agent.properties",new Properties());
    p.put("org.ops4j.pax.url.mvn.defaultRepositories","file:${karaf.home}/${karaf.default.repository}@snapshots");
    p.put("org.ops4j.pax.url.mvn.repositories","http://repo1.maven.org/maven2,http://repo.fusesource.com/nexus/content/repositories/releases,http://scala-tools.org/repo-releases");
    p.put("repository.fabric","mvn:org.fusesource.fabric/fuse-fabric/1.1-SNAPSHOT/xml/features");
    p.put("feature.karaf","karaf");
    p.put("feature.fabric-agent","fabric-agent");
    p.put("feature.fabric-core","fabric-core");
    p.put("feature.fabric-jaas","fabric-jaas");
    p.put("framework","mvn:org.apache.felix/org.apache.felix.framework/3.0.9-fuse-00-10");
    ZooKeeperUtils.set(client,defaultProfile + "/org.fusesource.fabric.agent.properties",toString(p));
    ZooKeeperUtils.createDefault(client,ZkPath.CONFIG_AGENT.getPath(karafName),version);
    ZooKeeperUtils.createDefault(client,ZkPath.CONFIG_VERSIONS_AGENT.getPath(version,karafName),"default zk-server-0000-1");
    ZooKeeperUtils.createDefault(client,defaultProfile + "/org.fusesource.fabric.jaas/encryption.enabled","${zk:/fabric/authentication/encryption.enabled}");
    ZooKeeperUtils.createDefault(client,"fabric/authentication/encryption.enabled","true");
    ZooKeeperUtils.createDefault(client,"fabric/authentication/domain","zookeeper");
    ZooKeeperUtils.createDefault(client,"/fabric/authentication/users","admin={CRYPT}21232f297a57a5a743894a0e4a801fc3{CRYPT},admin\nsystem={CRYPT}1d0258c2440a8d19e716292b231e3190{CRYPT},admin");
    ZooKeeperUtils.createDefault(client,ZkPath.CONFIGS_MAVEN_REPO.getPath(),mavenProxyUrl);
    Bundle bundle=null;
    for (    Bundle b : bundleContext.getBundles()) {
      if (b.getSymbolicName() != null && b.getSymbolicName().equals("org.fusesource.fabric.fabric-configadmin")) {
        if (b.getVersion().getMajor() == 1 && b.getVersion().getMinor() == 1 && b.getVersion().getMicro() == 0) {
          bundle=b;
          break;
        }
      }
    }
    if (bundle == null) {
      bundle=bundleContext.installBundle("mvn:org.fusesource.fabric/fabric-configadmin/1.1-SNAPSHOT");
    }
    if (bundle.getState() == Bundle.ACTIVE) {
      bundle.stop();
    }
    bundle.start();
    result=ZkDefs.SUCCESS;
    exception=null;
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    result=ZkDefs.ERROR;
    exception=sw.toString();
    throw new FabricException("Unable to create zookeeper server configuration",e);
  }
 finally {
    try {
      ZooKeeperUtils.set(client,ZkPath.AGENT_PROVISION_RESULT.getPath(karafName),result);
      ZooKeeperUtils.set(client,ZkPath.AGENT_PROVISION_EXCEPTION.getPath(karafName),exception);
    }
 catch (    Exception ignore) {
    }
    if (client != null) {
      client.destroy();
    }
  }
}
