{
  try {
    if (options.getZookeeperPassword() != null) {
    }
 else     if (System.getProperties().containsKey(SystemProperties.ZOOKEEPER_PASSWORD)) {
      options.setZookeeperPassword(System.getProperty(SystemProperties.ZOOKEEPER_PASSWORD));
    }
 else {
      options.setZookeeperPassword(ZooKeeperRetriableUtils.generatePassword());
    }
    if (containers == null || containers.size() == 2) {
      throw new IllegalArgumentException("One or at least 3 containers must be used to create a zookeeper ensemble");
    }
    Configuration config=configurationAdmin.getConfiguration("org.fusesource.fabric.zookeeper",null);
    String zooKeeperUrl=config != null && config.getProperties() != null ? (String)config.getProperties().get("zookeeper.url") : null;
    if (zooKeeperUrl == null) {
      if (containers.size() != 1 || !containers.get(0).equals(System.getProperty(SystemProperties.KARAF_NAME))) {
        throw new FabricException("The first zookeeper cluster must be configured on this container only.");
      }
      createLocalServer(2181,options);
      return;
    }
    String version=ZooKeeperRetriableUtils.get(zooKeeper,ZkPath.CONFIG_DEFAULT_VERSION.getPath());
    for (    String container : containers) {
      if (ZooKeeperRetriableUtils.exists(zooKeeper,ZkPath.CONTAINER_ALIVE.getPath(container)) == null) {
        throw new FabricException("The container " + container + " is not alive");
      }
    }
    Map<String,List<Integer>> usedPorts=new HashMap<String,List<Integer>>();
    String oldClusterId=ZooKeeperRetriableUtils.get(zooKeeper,ZkPath.CONFIG_ENSEMBLES.getPath());
    if (oldClusterId != null) {
      Properties p=toProperties(ZooKeeperRetriableUtils.get(zooKeeper,ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath("fabric-ensemble-" + oldClusterId) + "/org.fusesource.fabric.zookeeper.server-" + oldClusterId+ ".properties"));
      for (      Object n : p.keySet()) {
        String node=(String)n;
        if (node.startsWith("server.")) {
          String data=ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper,ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath("fabric-ensemble-" + oldClusterId) + "/org.fusesource.fabric.zookeeper.server-" + oldClusterId+ ".properties#"+ node);
          addUsedPorts(usedPorts,data);
        }
      }
      String datas=ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties#zookeeper.url");
      for (      String data : datas.split(",")) {
        addUsedPorts(usedPorts,data);
      }
    }
    String newClusterId;
    if (oldClusterId == null) {
      newClusterId="0000";
    }
 else {
      newClusterId=new DecimalFormat("0000").format(Integer.parseInt(oldClusterId) + 1);
    }
    ZooKeeperRetriableUtils.set(zooKeeper,ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath("fabric-ensemble-" + newClusterId),"abstract=true\nhidden=true");
    String profileNode=ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath("fabric-ensemble-" + newClusterId) + "/org.fusesource.fabric.zookeeper.server-" + newClusterId+ ".properties";
    Properties profileNodeProperties=new Properties();
    profileNodeProperties.put("tickTime","2000");
    profileNodeProperties.put("initLimit","10");
    profileNodeProperties.put("syncLimit","5");
    profileNodeProperties.put("dataDir","data/zookeeper/" + newClusterId);
    int index=1;
    String connectionUrl="";
    String realConnectionUrl="";
    String containerList="";
    for (    String container : containers) {
      String ip=ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper,ZkPath.CONTAINER_IP.getPath(container));
      String minimumPort=String.valueOf(Ports.MIN_PORT_NUMBER);
      String maximumPort=String.valueOf(Ports.MAX_PORT_NUMBER);
      if (zooKeeper.exists(ZkPath.CONTAINER_PORT_MIN.getPath(container)) != null) {
        minimumPort=ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper,ZkPath.CONTAINER_PORT_MIN.getPath(container));
      }
      if (zooKeeper.exists(ZkPath.CONTAINER_PORT_MAX.getPath(container)) != null) {
        maximumPort=ZooKeeperRetriableUtils.getSubstitutedPath(zooKeeper,ZkPath.CONTAINER_PORT_MAX.getPath(container));
      }
      String profNode=ZkPath.CONFIG_ENSEMBLE_PROFILE.getPath("fabric-ensemble-" + newClusterId + "-"+ Integer.toString(index));
      String pidNode=profNode + "/org.fusesource.fabric.zookeeper.server-" + newClusterId+ ".properties";
      Properties pidNodeProperties=new Properties();
      ZooKeeperRetriableUtils.set(zooKeeper,profNode,"parents=fabric-ensemble-" + newClusterId + "\nhidden=true");
      String port1=Integer.toString(findPort(usedPorts,ip,mapPortToRange(Ports.DEFAULT_ZOOKEEPER_SERVER_PORT,minimumPort,maximumPort)));
      if (containers.size() > 1) {
        String port2=Integer.toString(findPort(usedPorts,ip,mapPortToRange(Ports.DEFAULT_ZOOKEEPER_PEER_PORT,minimumPort,maximumPort)));
        String port3=Integer.toString(findPort(usedPorts,ip,mapPortToRange(Ports.DEFAULT_ZOOKEEPER_ELECTION_PORT,minimumPort,maximumPort)));
        profileNodeProperties.put("server." + Integer.toString(index),"${zk:" + container + "/ip}:"+ port2+ ":"+ port3);
        pidNodeProperties.put("server.id",Integer.toString(index));
      }
      pidNodeProperties.put("clientPort",port1);
      ZooKeeperRetriableUtils.set(zooKeeper,pidNode,toString(pidNodeProperties));
      ZooKeeperRetriableUtils.add(zooKeeper,"/fabric/configs/versions/" + version + "/containers/"+ container,"fabric-ensemble-" + newClusterId + "-"+ Integer.toString(index));
      if (connectionUrl.length() > 0) {
        connectionUrl+=",";
        realConnectionUrl+=",";
      }
      connectionUrl+="${zk:" + container + "/ip}:"+ port1;
      realConnectionUrl+=ip + ":" + port1;
      if (containerList.length() > 0) {
        containerList+=",";
      }
      containerList+=container;
      index++;
    }
    ZooKeeperRetriableUtils.set(zooKeeper,profileNode,toString(profileNodeProperties));
    if (oldClusterId != null) {
      Properties properties=ZooKeeperRetriableUtils.getProperties(zooKeeper,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties");
      properties.put("zookeeper.url",realConnectionUrl);
      properties.put("zookeeper.password",options.getZookeeperPassword());
      OsgiZkClient dst=new OsgiZkClient();
      dst.updated(properties);
      try {
        dst.waitForConnected(new Timespan(30,Timespan.TimeUnit.SECOND));
        ZooKeeperRetriableUtils.copy(zooKeeper,dst,"/fabric/registry");
        ZooKeeperRetriableUtils.copy(zooKeeper,dst,"/fabric/authentication");
        ZooKeeperRetriableUtils.copy(zooKeeper,dst,"/fabric/configs");
        for (        String container : containers) {
          ZookeeperCommandBuilder.delete("/fabric/registry/containers/alive/" + container).execute(dst);
        }
        ZooKeeperRetriableUtils.set(dst,ZkPath.CONFIG_ENSEMBLES.getPath(),newClusterId);
        ZooKeeperRetriableUtils.set(dst,ZkPath.CONFIG_ENSEMBLE.getPath(newClusterId),containerList);
        for (        String container : dst.getChildren("/fabric/configs/versions/" + version + "/containers")) {
          ZooKeeperRetriableUtils.remove(dst,"/fabric/configs/versions/" + version + "/containers/"+ container,"fabric-ensemble-" + oldClusterId + "-.*");
        }
        ZooKeeperRetriableUtils.set(dst,ZkPath.CONFIG_ENSEMBLE_URL.getPath(),connectionUrl);
        ZooKeeperRetriableUtils.set(dst,ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),options.getZookeeperPassword());
        ZooKeeperRetriableUtils.set(zooKeeper,ZkPath.CONFIG_ENSEMBLE_URL.getPath(),connectionUrl);
        ZooKeeperRetriableUtils.set(zooKeeper,ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),options.getZookeeperPassword());
        setConfigProperty(dst,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties","zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
        setConfigProperty(dst,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties","zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
        setConfigProperty(zooKeeper,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties","zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
        setConfigProperty(zooKeeper,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties","zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
      }
  finally {
        dst.close();
      }
    }
 else {
      setConfigProperty(zooKeeper,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties","zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
      setConfigProperty(zooKeeper,"/fabric/configs/versions/" + version + "/profiles/default/org.fusesource.fabric.zookeeper.properties","zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
    }
  }
 catch (  Exception e) {
    throw new FabricException("Unable to create zookeeper quorum: " + e.getMessage(),e);
  }
}
