{
  Pattern p=Pattern.compile("(.+),(.+)");
  Map<String,Object> options=new HashMap<String,Object>();
  options.put("encryption.prefix","{CRYPT}");
  options.put("encryption.suffix","{CRYPT}");
  options.put("encryption.enabled","true");
  options.put("encryption.enabled","true");
  options.put("encryption.algorithm","MD5");
  options.put("encryption.encoding","hexadecimal");
  options.put(BundleContext.class.getName(),bundleContext);
  EncryptionSupport encryptionSupport=new EncryptionSupport(options);
  Encryption encryption=encryptionSupport.getEncryption();
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : users.entrySet()) {
    String user=entry.getKey();
    Matcher m=p.matcher(entry.getValue());
    if (m.matches() && m.groupCount() >= 2) {
      String password=m.group(1).trim();
      if (!password.startsWith(encryptionSupport.getEncryptionPrefix()) || !password.endsWith(encryptionSupport.getEncryptionSuffix())) {
        password=encryptionSupport.getEncryptionPrefix() + encryption.encryptPassword(m.group(1)).trim() + encryptionSupport.getEncryptionSuffix();
      }
      String role=m.group(2).trim();
      sb.append(user).append("=").append(password).append(",").append(role).append("\n");
    }
  }
  String allUsers=sb.toString();
  createDefault(curator,"/fabric/authentication/users",allUsers);
}
