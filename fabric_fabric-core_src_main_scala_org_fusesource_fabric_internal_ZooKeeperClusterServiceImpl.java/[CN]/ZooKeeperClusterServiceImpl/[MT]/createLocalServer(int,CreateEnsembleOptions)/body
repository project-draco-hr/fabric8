{
  try {
    IZKClient client;
    Hashtable<String,Object> properties;
    String version=ZkDefs.DEFAULT_VERSION;
    String karafName=System.getProperty(SystemProperties.KARAF_NAME);
    String minimumPort=System.getProperty(ZkDefs.MINIMUM_PORT);
    String maximumPort=System.getProperty(ZkDefs.MAXIMUM_PORT);
    int mappedPort=mapPortToRange(port,minimumPort,maximumPort);
    if (options.getZookeeperPassword() != null) {
    }
 else     if (System.getProperties().containsKey(SystemProperties.ZOOKEEPER_PASSWORD)) {
      options.setZookeeperPassword(System.getProperty(SystemProperties.ZOOKEEPER_PASSWORD));
    }
 else {
      options.setZookeeperPassword(ZooKeeperRetriableUtils.generatePassword());
    }
    Bundle bundleFabricAgent=findAndStopBundle(bundleContext,"org.fusesource.fabric.fabric-agent");
    Bundle bundleFabricConfigAdmin=installOrStopBundle(bundleContext,"org.fusesource.fabric.fabric-configadmin","mvn:org.fusesource.fabric/fabric-configadmin/" + FabricConstants.FABRIC_VERSION);
    Bundle bundleFabricZooKeeper=installOrStopBundle(bundleContext,"org.fusesource.fabric.fabric-zookeeper","mvn:org.fusesource.fabric/fabric-zookeeper/" + FabricConstants.FABRIC_VERSION);
    Bundle bundleFabricJaas=installOrStopBundle(bundleContext,"org.fusesource.fabric.fabric-jaas  ","mvn:org.fusesource.fabric/fabric-jaas/" + FabricConstants.FABRIC_VERSION);
    Bundle bundleFabricCommands=installOrStopBundle(bundleContext,"org.fusesource.fabric.fabric-commands  ","mvn:org.fusesource.fabric/fabric-commands/" + FabricConstants.FABRIC_VERSION);
    Bundle bundleFabricMavenProxy=installOrStopBundle(bundleContext,"org.fusesource.fabric.fabric-commands  ","mvn:org.fusesource.fabric/fabric-maven-proxy/" + FabricConstants.FABRIC_VERSION);
    String connectionUrl=HostUtils.getLocalHostName() + ":" + Integer.toString(mappedPort);
    String autoImportFrom=System.getProperty(SystemProperties.PROFILES_AUTOIMPORT_PATH);
    Configuration config=configurationAdmin.createFactoryConfiguration("org.fusesource.fabric.zookeeper.server");
    properties=new Hashtable<String,Object>();
    if (autoImportFrom != null) {
      loadPropertiesFrom(properties,autoImportFrom + "/fabric/configs/versions/1.0/profiles/default/org.fusesource.fabric.zookeeper.server.properties");
    }
    properties.put("tickTime","2000");
    properties.put("initLimit","10");
    properties.put("syncLimit","5");
    properties.put("dataDir","data/zookeeper/0000");
    properties.put("clientPort",Integer.toString(mappedPort));
    properties.put("fabric.zookeeper.pid","org.fusesource.fabric.zookeeper.server-0000");
    config.setBundleLocation(null);
    config.update(properties);
    config=configurationAdmin.getConfiguration("org.fusesource.fabric.zookeeper");
    properties=new Hashtable<String,Object>();
    if (autoImportFrom != null) {
      loadPropertiesFrom(properties,autoImportFrom + "/fabric/configs/versions/1.0/profiles/default/org.fusesource.fabric.zookeeper.properties");
    }
    properties.put("zookeeper.url",connectionUrl);
    properties.put("zookeeper.timeout",System.getProperties().containsKey("zookeeper.timeout") ? System.getProperties().getProperty("zookeeper.timeout") : "30000");
    properties.put("fabric.zookeeper.pid","org.fusesource.fabric.zookeeper");
    properties.put("zookeeper.password",options.getZookeeperPassword());
    config.setBundleLocation(null);
    config.update(properties);
    bundleFabricZooKeeper.start();
    ServiceTracker tracker=new ServiceTracker(bundleContext,IZKClient.class.getName(),null);
    tracker.open();
    client=(IZKClient)tracker.waitForService(5000);
    if (client == null) {
      throw new IllegalStateException("Timeout waiting for ZooKeeper client to be registered");
    }
    tracker.close();
    client.waitForConnected();
    if (autoImportFrom != null) {
      getDataStore().importFromFileSystem(autoImportFrom);
    }
    getDataStore().setDefaultVersion(version);
    String defaultProfile=getDataStore().getProfile(version,"default",true);
    ZooKeeperRetriableUtils.set(client,ZkPath.CONFIG_ENSEMBLE_URL.getPath(),"${zk:" + karafName + "/ip}:"+ Integer.toString(mappedPort));
    ZooKeeperRetriableUtils.set(client,ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),options.getZookeeperPassword());
    Properties zkProps=new Properties();
    zkProps.setProperty("zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
    zkProps.setProperty("zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
    getDataStore().setFileConfiguration(version,defaultProfile,"org.fusesource.fabric.zookeeper.properties",DataStoreHelpers.toBytes(zkProps));
    String ensembleProfile=getDataStore().getProfile(version,"fabric-ensemble-0000",true);
    getDataStore().setProfileAttribute(version,ensembleProfile,"abstract","true");
    getDataStore().setProfileAttribute(version,ensembleProfile,"hidden","true");
    Properties ensembleProps=new Properties();
    ensembleProps.put("tickTime","2000");
    ensembleProps.put("initLimit","10");
    ensembleProps.put("syncLimit","5");
    ensembleProps.put("dataDir","data/zookeeper/0000");
    loadPropertiesFrom(ensembleProps,autoImportFrom + "/fabric/configs/versions/1.0/profiles/default/org.fusesource.fabric.zookeeper.server.properties");
    getDataStore().setFileConfiguration(version,ensembleProfile,"org.fusesource.fabric.zookeeper.server-0000.properties",DataStoreHelpers.toBytes(ensembleProps));
    String ensembleServerProfile=getDataStore().getProfile(version,"fabric-ensemble-0000-1",true);
    getDataStore().setProfileAttribute(version,ensembleServerProfile,"hidden","true");
    getDataStore().setProfileAttribute(version,ensembleServerProfile,"parents",ensembleProfile);
    Properties serverProps=new Properties();
    serverProps.put("clientPort",String.valueOf(mappedPort));
    getDataStore().setFileConfiguration(version,ensembleServerProfile,"org.fusesource.fabric.zookeeper.server-0000.properties",DataStoreHelpers.toBytes(serverProps));
    ZooKeeperRetriableUtils.set(client,ZkPath.CONFIG_ENSEMBLES.getPath(),"0000");
    ZooKeeperRetriableUtils.set(client,ZkPath.CONFIG_ENSEMBLE.getPath("0000"),karafName);
    String fabricProfile=getDataStore().getProfile(version,"fabric",true);
    Properties agentProps=DataStoreHelpers.toProperties(getDataStore().getFileConfiguration(version,fabricProfile,"org.fusesource.fabric.agent.properties"));
    agentProps.put("feature.fabric-commands","fabric-commands");
    getDataStore().setFileConfiguration(version,"fabric","org.fusesource.fabric.agent.properties",DataStoreHelpers.toBytes(agentProps));
    ZooKeeperRetriableUtils.createDefault(client,ZkPath.CONFIG_CONTAINER.getPath(karafName),version);
    String assignedProfile=System.getProperty(SystemProperties.PROFILE);
    if (assignedProfile != null && !assignedProfile.isEmpty() && !"fabric".equals(assignedProfile)) {
      ZooKeeperRetriableUtils.createDefault(client,ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version,karafName),"fabric fabric-ensemble-0000-1 " + assignedProfile);
    }
 else {
      ZooKeeperRetriableUtils.createDefault(client,ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version,karafName),"fabric fabric-ensemble-0000-1");
    }
    Map<String,String> configs=new HashMap<String,String>();
    configs.put("encryption.enabled","${zk:/fabric/authentication/encryption.enabled}");
    getDataStore().setConfiguration(version,defaultProfile,"org.fusesource.fabric.jaas",configs);
    ZooKeeperRetriableUtils.createDefault(client,"/fabric/authentication/encryption.enabled","true");
    ZooKeeperRetriableUtils.createDefault(client,"/fabric/authentication/domain","karaf");
    addUsersToZookeeper(client,options.getUsers());
    ZookeeperCommandBuilder.fixAcls("/",true).execute(client);
    if (ensembleAutoStart) {
      System.setProperty(SystemProperties.ENSEMBLE_AUTOSTART,Boolean.FALSE.toString());
      File file=new File(System.getProperty("karaf.base") + "/etc/system.properties");
      org.apache.felix.utils.properties.Properties props=new org.apache.felix.utils.properties.Properties(file);
      props.put(SystemProperties.ENSEMBLE_AUTOSTART,Boolean.FALSE.toString());
      props.save();
    }
    bundleFabricConfigAdmin.start();
    bundleFabricJaas.start();
    bundleFabricCommands.start();
    bundleFabricMavenProxy.start();
    if (!System.getProperties().containsKey(SystemProperties.AGENT_AUTOSTART) || Boolean.parseBoolean(System.getProperty(SystemProperties.AGENT_AUTOSTART))) {
      bundleFabricAgent=findOrInstallBundle(bundleContext,"org.fusesource.fabric.fabric-agent  ","mvn:org.fusesource.fabric/fabric-agent/" + FabricConstants.FABRIC_VERSION);
      bundleFabricAgent.start();
    }
  }
 catch (  Exception e) {
    throw new FabricException("Unable to create zookeeper server configuration",e);
  }
}
