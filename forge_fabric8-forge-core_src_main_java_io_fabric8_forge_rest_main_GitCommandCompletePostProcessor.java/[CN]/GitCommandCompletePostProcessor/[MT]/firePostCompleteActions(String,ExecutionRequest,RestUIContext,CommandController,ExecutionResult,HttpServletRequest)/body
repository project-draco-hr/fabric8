{
  UserDetails userDetails=gitUserHelper.createUserDetails(request);
  String user=userDetails.getUser();
  String address=userDetails.getAddress();
  String internalAddress=userDetails.getInternalAddress();
  String branch=userDetails.getBranch();
  String origin=projectFileSystem.getRemote();
  try {
    if (name.equals(PROJECT_NEW_COMMAND)) {
      GitHelpers.disableSslCertificateChecks();
      PersonIdent personIdent=userDetails.createPersonIdent();
      String targetLocation=null;
      String named=null;
      List<Map<String,String>> inputList=executionRequest.getInputList();
      for (      Map<String,String> map : inputList) {
        if (Strings.isNullOrEmpty(targetLocation)) {
          targetLocation=map.get("targetLocation");
        }
        if (Strings.isNullOrEmpty(named)) {
          named=map.get("named");
        }
      }
      if (Strings.isNullOrEmpty(targetLocation)) {
        LOG.warn("No targetLocation could be found!");
      }
 else       if (Strings.isNullOrEmpty(named)) {
        LOG.warn("No named could be found!");
      }
 else {
        File basedir=new File(targetLocation,named);
        if (!basedir.isDirectory() || !basedir.exists()) {
          LOG.warn("Generated project folder does not exist: " + basedir.getAbsolutePath());
        }
 else {
          InitCommand initCommand=Git.init();
          initCommand.setDirectory(basedir);
          Git git=initCommand.call();
          LOG.info("Initialised an empty git configuration repo at {}",basedir.getAbsolutePath());
          GitRepoClient repoClient=userDetails.createRepoClient();
          CreateRepositoryDTO createRepository=new CreateRepositoryDTO();
          createRepository.setName(named);
          String fullName=null;
          RepositoryDTO repository=repoClient.createRepository(createRepository);
          if (repository != null) {
            if (LOG.isDebugEnabled()) {
              LOG.debug("Got repository: " + toJson(repository));
            }
            fullName=repository.getFullName();
          }
          if (Strings.isNullOrEmpty(fullName)) {
            fullName=user + "/" + named;
          }
          String htmlUrl=address + user + "/"+ named;
          String remoteUrl=internalAddress + user + "/"+ named+ ".git";
          String cloneUrl=htmlUrl + ".git";
          results.setOutputProperty("fullName",fullName);
          results.setOutputProperty("cloneUrl",remoteUrl);
          results.setOutputProperty("htmlUrl",htmlUrl);
          LOG.info("Using remoteUrl: " + remoteUrl + " and remote name "+ origin);
          GitHelpers.configureBranch(git,branch,origin,remoteUrl);
          addDummyFileToEmptyFolders(basedir);
          String message=ExecutionRequest.createCommitMessage(name,executionRequest);
          LOG.info("Commiting and pushing to: " + remoteUrl + " and remote name "+ origin);
          GitHelpers.doAddCommitAndPushFiles(git,userDetails,personIdent,branch,origin,message,isPushOnCommit());
          String namespace=firstNotBlank(context.getProjectName(),executionRequest.getNamespace());
          String projectName=firstNotBlank(named,context.getProjectName(),executionRequest.getProjectName());
          results.setProjectName(projectName);
          createBuildConfig(context,namespace,projectName,cloneUrl);
          LOG.info("Creating any pending webhooks");
          registerWebHooks(context);
          LOG.info("Done creating webhooks!");
        }
      }
    }
 else {
      registerWebHooks(context);
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
}
