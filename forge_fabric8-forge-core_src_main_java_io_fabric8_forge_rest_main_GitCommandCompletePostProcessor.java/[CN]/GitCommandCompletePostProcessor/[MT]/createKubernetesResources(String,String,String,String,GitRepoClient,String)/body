{
  String imageTag="test";
  String secret="secret101";
  String builderImage="fabric8/java-main";
  String osapiVersion="v1beta1";
  String namespace="default";
  String gitServiceName="gogs-http-service";
  String gitAddress=getServiceAddress(gitServiceName,namespace);
  if (gitAddress == null) {
    LOG.warn("Could not find service " + gitServiceName + " for namespace "+ namespace);
    gitAddress=address;
  }
  String json="\n" + "{\n" + "   \"annotations\":{\n"+ "      \"description\":\"This is an end to end example of a Continuous Delivery pipeline running on OpenShift v3\"\n"+ "   },\n"+ "   \"apiVersion\":\"" + osapiVersion + "\",\n"+ "   \"kind\":\"List\",\n"+ "   \"items\":[\n"+ "      {\n"+ "         \"apiVersion\":\""+ osapiVersion+ "\",\n"+ "         \"kind\":\"ImageStream\",\n"+ "         \"metadata\":{\n"+ "            \"labels\":{\n"+ "               \"name\":\""+ buildName+ "\",\n"+ "               \"user\":\""+ user+ "\"\n"+ "            },\n"+ "            \"name\":\""+ buildName+ "\"\n"+ "         }\n"+ "      },\n"+ "      {\n"+ "         \"apiVersion\":\""+ osapiVersion+ "\",\n"+ "         \"kind\":\"BuildConfig\",\n"+ "         \"metadata\":{\n"+ "            \"labels\":{\n"+ "               \"name\":\""+ buildName+ "\",\n"+ "               \"user\":\""+ user+ "\"\n"+ "            },\n"+ "            \"name\":\""+ buildName+ "\"\n"+ "         },\n"+ "         \"parameters\":{\n"+ "            \"output\":{\n"+ "               \"to\":{\n"+ "                  \"name\":\""+ buildName+ "\"\n"+ "               },\n"+ "               \"tag\":\"test\"\n"+ "            },\n"+ "            \"source\":{\n"+ "               \"git\":{\n"+ "                  \"uri\":\""+ gitAddress+ "/"+ user+ "/"+ buildName+ ".git\"\n"+ "               },\n"+ "               \"type\":\"Git\"\n"+ "            },\n"+ "            \"strategy\":{\n"+ "               \"stiStrategy\":{\n"+ "                  \"builderImage\":\""+ builderImage+ "\",\n"+ "                  \"image\":\""+ builderImage+ "\"\n"+ "               },\n"+ "               \"type\":\"STI\"\n"+ "            }\n"+ "         },\n"+ "         \"triggers\":[\n"+ "            {\n"+ "               \"github\":{\n"+ "                  \"secret\":\""+ secret+ "\"\n"+ "               },\n"+ "               \"type\":\"github\"\n"+ "            },\n"+ "            {\n"+ "               \"generic\":{\n"+ "                  \"secret\":\""+ secret+ "\"\n"+ "               },\n"+ "               \"type\":\"generic\"\n"+ "            }\n"+ "         ]\n"+ "      },\n"+ "      {\n"+ "         \"apiVersion\":\""+ osapiVersion+ "\",\n"+ "         \"kind\":\"DeploymentConfig\",\n"+ "         \"metadata\":{\n"+ "            \"name\":\""+ buildName+ "-deploy\"\n"+ "         },\n"+ "         \"template\":{\n"+ "            \"controllerTemplate\":{\n"+ "               \"podTemplate\":{\n"+ "                  \"desiredState\":{\n"+ "                     \"manifest\":{\n"+ "                        \"containers\":[\n"+ "                           {\n"+ "                              \"image\":\""+ buildName+ "\",\n"+ "                              \"name\":\""+ buildName+ "\",\n"+ "                              \"ports\":[\n"+ "                                 {\n"+ "                                    \"containerPort\":8778\n"+ "                                 }\n"+ "                              ]\n"+ "                           }\n"+ "                        ],\n"+ "                        \"version\":\""+ imageTag+ "\"\n"+ "                     }\n"+ "                  },\n"+ "                  \"labels\":{\n"+ "                     \"name\":\""+ buildName+ "\",\n"+ "                     \"user\":\""+ user+ "\"\n"+ "                  }\n"+ "               },\n"+ "               \"replicaSelector\":{\n"+ "                  \"name\":\""+ buildName+ "\",\n"+ "                  \"user\":\""+ user+ "\"\n"+ "               },\n"+ "               \"replicas\":1\n"+ "            },\n"+ "            \"strategy\":{\n"+ "               \"type\":\"Recreate\"\n"+ "            }\n"+ "         },\n"+ "         \"triggers\":[\n"+ "            {\n"+ "               \"type\":\"ImageChange\",\n"+ "               \"imageChangeParams\":{\n"+ "                  \"automatic\":true,\n"+ "                  \"containerNames\":[\n"+ "                     \""+ buildName+ "\"\n"+ "                  ],\n"+ "                  \"from\":{\n"+ "                     \"name\":\""+ buildName+ "\"\n"+ "                  },\n"+ "                  \"tag\":\""+ imageTag+ "\"\n"+ "               }\n"+ "            }\n"+ "         ]\n"+ "      }"+ "   ]\n"+ "}";
  Controller controller=new Controller(kubernetes);
  controller.applyJson(json);
  String type="generic";
  String webhookUrl=null;
  String kubeAddress=null;
  boolean appendNamespaceQuery=true;
  if (kubeAddress == null) {
    try {
      kubeAddress=kubernetes.getServiceURL("cdelivery",namespace,"http",false);
      webhookUrl=URLUtils.pathJoin(kubeAddress,"buildConfigHooks",namespace,buildName);
      appendNamespaceQuery=false;
    }
 catch (    Exception e) {
      LOG.warn("failed to find cdelivery service URL: " + e,e);
    }
  }
  if (kubeAddress == null) {
    try {
      kubeAddress=kubernetes.getServiceURL("fabric8-console-service",namespace,"http",false);
      webhookUrl=URLUtils.pathJoin(kubeAddress,"kubernetes","osapi",KubernetesHelper.defaultOsApiVersion,"buildConfigHooks",buildName,secret,type);
    }
 catch (    Exception e) {
      LOG.warn("failed to find fabric8 console service URL: " + e,e);
    }
  }
  if (kubeAddress == null) {
    kubeAddress=kubernetes.getAddress();
  }
  if (webhookUrl == null) {
    webhookUrl=URLUtils.pathJoin(kubeAddress,"osapi",KubernetesHelper.defaultOsApiVersion,"buildConfigHooks",buildName,secret,type);
  }
  if (appendNamespaceQuery && !Strings.isNullOrEmpty(namespace)) {
    webhookUrl+="?namespace=" + namespace;
  }
  LOG.info("creating a web hook at: " + webhookUrl);
  try {
    CreateWebhookDTO createWebhook=new CreateWebhookDTO();
    createWebhook.setType("gogs");
    WebhookConfig config=createWebhook.getConfig();
    config.setUrl(webhookUrl);
    config.setSecret(secret);
    WebHookDTO webhook=repoClient.createWebhook(user,buildName,createWebhook);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Got web hook: " + toJson(webhook));
    }
  }
 catch (  Exception e) {
    LOG.warn("Failed to create web hook in git repo: " + e,e);
  }
}
