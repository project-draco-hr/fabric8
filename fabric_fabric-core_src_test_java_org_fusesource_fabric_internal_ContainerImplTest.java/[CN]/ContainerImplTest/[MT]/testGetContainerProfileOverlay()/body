{
  String id=CONTAINER_ID;
  String version="1.0";
  GetDataBuilder getBuilder=createMock(GetDataBuilder.class);
  SetDataBuilder setBuilder=createMock(SetDataBuilder.class);
  ExistsBuilder existsBuilder=createMock(ExistsBuilder.class);
  GetChildrenBuilder getChildrenBuilder=createMock(GetChildrenBuilder.class);
  expect(getBuilder.forPath(CONFIG_CONTAINER.getPath(id))).andReturn(version.getBytes()).anyTimes();
  expect(getBuilder.forPath(ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version,id))).andReturn("esb".getBytes()).anyTimes();
  expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"esb")))).andReturn("parents=cxf camel\n".getBytes()).anyTimes();
  expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"cxf")))).andReturn(null).anyTimes();
  expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"camel")))).andReturn(null).anyTimes();
  expect(getChildrenBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"esb")))).andReturn(Collections.<String>emptyList()).anyTimes();
  expect(getChildrenBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"cxf")))).andReturn(Arrays.asList(new String[]{"pid1.properties","pid2.properties"})).anyTimes();
  expect(getChildrenBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"camel")))).andReturn(Arrays.asList(new String[]{"pid1.properties"})).anyTimes();
  expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"cxf") + "/pid1.properties"))).andReturn("k1=v1\nk2=v2".getBytes()).anyTimes();
  expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"cxf") + "/pid2.properties"))).andReturn("k3=v3".getBytes()).anyTimes();
  expect(getBuilder.forPath(eq(CONFIG_VERSIONS_PROFILE.getPath(version,"camel") + "/pid1.properties"))).andReturn("k1=v4".getBytes()).anyTimes();
  expect(existsBuilder.forPath(EasyMock.<String>anyObject())).andReturn(new Stat()).anyTimes();
  expect(curator.getData()).andReturn(getBuilder).anyTimes();
  expect(curator.setData()).andReturn(setBuilder).anyTimes();
  expect(curator.getChildren()).andReturn(getChildrenBuilder).anyTimes();
  expect(curator.checkExists()).andReturn(existsBuilder).anyTimes();
  replay(getBuilder);
  replay(setBuilder);
  replay(existsBuilder);
  replay(getChildrenBuilder);
  replay(curator);
  Map<String,Map<String,String>> configs=container.getOverlayProfile().getConfigurations();
  assertNotNull(configs);
  assertEquals(2,configs.size());
  assertNotNull(configs.get("pid1"));
  assertEquals(2,configs.get("pid1").size());
  assertEquals("v4",configs.get("pid1").get("k1"));
  assertEquals("v2",configs.get("pid1").get("k2"));
  assertNotNull(configs.get("pid2"));
  assertEquals(1,configs.get("pid2").size());
  assertEquals("v3",configs.get("pid2").get("k3"));
  verify(curator);
  verify(getBuilder);
  verify(setBuilder);
  verify(getChildrenBuilder);
  verify(existsBuilder);
}
