{
  if (!tmpFolder.exists() && !tmpFolder.mkdirs()) {
    throw new IOException("Failed to create temporary artifact folder");
  }
  if (system == null) {
    system=newRepositorySystem();
  }
  if (session == null) {
    session=newSession(system,localRepository);
  }
  repositories=new HashMap<String,RemoteRepository>();
  for (  String rep : remoteRepositories.split(",")) {
    RemoteRepository remoteRepository=createRemoteRepository(rep);
    remoteRepository.setPolicy(true,new RepositoryPolicy(true,updatePolicy,checksumPolicy));
    remoteRepository.setProxy(session.getProxySelector().getProxy(remoteRepository));
    repositories.put(remoteRepository.getId(),remoteRepository);
  }
  RemoteRepository local=new RemoteRepository("local",DEFAULT_REPO_ID,"file://" + localRepository);
  local.setPolicy(true,new RepositoryPolicy(true,updatePolicy,checksumPolicy));
  repositories.put("local",local);
  RemoteRepository karaf=new RemoteRepository("karaf",DEFAULT_REPO_ID,"file://" + System.getProperty("karaf.home") + File.separator+ System.getProperty("karaf.default.repository"));
  karaf.setPolicy(true,new RepositoryPolicy(true,updatePolicy,checksumPolicy));
  repositories.put("karaf",karaf);
  RemoteRepository user=new RemoteRepository("user",DEFAULT_REPO_ID,"file://" + System.getProperty("user.home") + File.separator+ ".m2"+ File.separator+ "repository");
  user.setPolicy(true,new RepositoryPolicy(true,updatePolicy,checksumPolicy));
  repositories.put("user",user);
  if (appendSystemRepos) {
    for (    RemoteRepository sysRepo : MavenUtils.getRemoteRepositories()) {
      sysRepo.setProxy(session.getProxySelector().getProxy(sysRepo));
      repositories.put(sysRepo.getId(),sysRepo);
    }
  }
}
