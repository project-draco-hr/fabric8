{
  if (!tmpFolder.exists() && !tmpFolder.mkdirs()) {
    throw new IOException("Failed to create temporary artifact folder");
  }
  if (system == null) {
    system=newRepositorySystem();
  }
  if (session == null) {
    session=newSession(system,localRepository);
  }
  repositories=new LinkedHashMap<String,RemoteRepository>();
  if (remoteRepositories != null) {
    for (    String rep : remoteRepositories) {
      RemoteRepository.Builder previous=createRemoteRepository(rep);
      RemoteRepository remoteRepository=previous.build();
      RemoteRepository.Builder builder=new RemoteRepository.Builder(remoteRepository);
      builder.setPolicy(new RepositoryPolicy(true,updatePolicy,checksumPolicy));
      builder.setProxy(session.getProxySelector().getProxy(remoteRepository));
      repositories.put(remoteRepository.getId(),builder.build());
    }
  }
  RemoteRepository.Builder local=new RemoteRepository.Builder("local",DEFAULT_REPO_ID,"file://" + localRepository);
  local.setPolicy(new RepositoryPolicy(true,updatePolicy,checksumPolicy));
  repositories.put("local",local.build());
  RemoteRepository.Builder karaf=new RemoteRepository.Builder("karaf",DEFAULT_REPO_ID,"file://" + System.getProperty("karaf.home") + File.separator+ System.getProperty("karaf.default.repository"));
  karaf.setPolicy(new RepositoryPolicy(true,updatePolicy,checksumPolicy));
  repositories.put("karaf",karaf.build());
  RemoteRepository.Builder user=new RemoteRepository.Builder("user",DEFAULT_REPO_ID,"file://" + System.getProperty("user.home") + File.separator+ ".m2"+ File.separator+ "repository");
  user.setPolicy(new RepositoryPolicy(true,updatePolicy,checksumPolicy));
  repositories.put("user",user.build());
  if (appendSystemRepos) {
    for (    RemoteRepository sysRepo : MavenUtils.getRemoteRepositories()) {
      RemoteRepository.Builder builder=new RemoteRepository.Builder(sysRepo);
      builder.setProxy(session.getProxySelector().getProxy(sysRepo));
      repositories.put(sysRepo.getId(),builder.build());
    }
  }
}
