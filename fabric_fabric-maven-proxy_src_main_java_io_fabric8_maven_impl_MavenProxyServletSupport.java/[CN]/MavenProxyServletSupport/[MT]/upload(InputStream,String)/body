{
  boolean success=true;
  Matcher artifactMatcher=ARTIFACT_REQUEST_URL_REGEX.matcher(path);
  Matcher metdataMatcher=ARTIFACT_METADATA_URL_REGEX.matcher(path);
  if (path == null) {
    throw new InvalidMavenArtifactRequest();
  }
 else   if (metdataMatcher.matches()) {
    LOGGER.log(Level.INFO,String.format("Received upload request for maven metadata : %s",path));
    try {
      String filename=path.substring(path.lastIndexOf('/') + 1);
      Metadata metadata=convertPathToMetadata(path);
      metadata=metadata.setFile(readFile(is,tmpFolder,filename));
      InstallRequest request=new InstallRequest();
      request.addMetadata(metadata);
      system.install(session,request);
      success=true;
    }
 catch (    Exception e) {
      LOGGER.log(Level.WARNING,String.format("Failed to upload metadata: %s due to %s",path,e));
      success=false;
    }
  }
 else   if (artifactMatcher.matches()) {
    LOGGER.log(Level.INFO,String.format("Received upload request for maven artifact : %s",path));
    Artifact artifact=null;
    try {
      String filename=path.substring(path.lastIndexOf('/') + 1);
      artifact=convertPathToArtifact(path);
      artifact=artifact.setFile(readFile(is,tmpFolder,filename));
      InstallRequest request=new InstallRequest();
      request.addArtifact(artifact);
      system.install(session,request);
      success=true;
      LOGGER.log(Level.INFO,"Artifact installed: " + artifact.toString());
    }
 catch (    Exception e) {
      success=false;
      LOGGER.log(Level.WARNING,String.format("Failed to upload artifact : %s due to %s",artifact,e),e);
    }
  }
  return success;
}
