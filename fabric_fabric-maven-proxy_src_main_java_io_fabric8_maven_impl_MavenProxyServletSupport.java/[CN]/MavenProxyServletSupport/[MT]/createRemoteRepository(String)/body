{
  String id;
  RemoteRepository.Builder remoteRepository;
  repositoryUrl=repositoryUrl.trim();
  String[] parts=getAuthenticationPair(repositoryUrl);
  if (parts != null) {
    repositoryUrl=repositoryUrl.replaceFirst(String.format("%s:%s@",parts[0],parts[1]),"");
  }
  Matcher idMatcher=REPOSITORY_ID_REGEX.matcher(repositoryUrl);
  if (idMatcher.matches()) {
    id=idMatcher.group(2);
    repositoryUrl=cleanUpRepositorySpec(repositoryUrl);
    remoteRepository=new RemoteRepository.Builder(id + Math.abs(repositoryUrl.hashCode()),DEFAULT_REPO_ID,repositoryUrl);
  }
 else {
    id="rep-" + Math.abs(repositoryUrl.hashCode());
    repositoryUrl=cleanUpRepositorySpec(repositoryUrl);
    remoteRepository=new RemoteRepository.Builder("repo-" + Math.abs(repositoryUrl.hashCode()),DEFAULT_REPO_ID,repositoryUrl);
  }
  remoteRepository.setId(id);
  if (parts != null) {
    remoteRepository.setAuthentication(getAuthentication(parts));
  }
  return remoteRepository;
}
