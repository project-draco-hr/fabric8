{
  projectBuildDir.mkdirs();
  for (  MavenProject reactorProject : reactorProjectList) {
    if (!reactorProject.isExecutionRoot()) {
      Log log=getLog();
      combineProfileFilesToFolder(reactorProject,projectBuildDir,log,reactorProjectOutputPath);
    }
  }
  if (includeReadMe) {
    Map<String,File> pomNames=new HashMap<String,File>();
    for (    MavenProject pomProjects : pomZipProjects) {
      File src=pomProjects.getFile().getParentFile();
      String root=projectBaseDir.getName();
      String relativePath=Files.getRelativePath(projectBaseDir,pomProjects.getBasedir());
      relativePath=root + File.separator + relativePath;
      relativePath=pathToProfilePath(relativePath);
      File outDir=new File(projectBuildDir,relativePath);
      File copiedFile=copyReadMe(src,outDir);
      if (copiedFile != null) {
        System.out.println("*** " + copiedFile);
        System.out.println("    " + relativePath);
        String key=getReadMeFileKey(relativePath);
        System.out.println("    " + key);
        pomNames.put(key,copiedFile);
      }
    }
    for (    Map.Entry<String,File> entry : pomNames.entrySet()) {
      File file=entry.getValue();
      boolean changed=false;
      List<String> lines=Files.readLines(file);
      for (int i=0; i < lines.size(); i++) {
        String line=lines.get(i);
        String newLine=replaceGithubLinks(pomNames.keySet(),line);
        if (newLine != null) {
          lines.set(i,newLine);
          changed=true;
        }
      }
      if (changed) {
        Files.writeLines(file,lines);
        System.out.println("*** updated file " + file);
      }
    }
  }
  Zips.createZipFile(getLog(),projectBuildDir,projectOutputFile);
  String relativePath=Files.getRelativePath(projectBaseDir,projectOutputFile);
  while (relativePath.startsWith("/")) {
    relativePath=relativePath.substring(1);
  }
  getLog().info("Created profile zip file: " + relativePath);
}
