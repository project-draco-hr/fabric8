{
  String postfix="insight-maven/pom.xml";
  File file=new File("../" + postfix);
  if (!file.exists()) {
    file=new File("../../" + postfix);
  }
  assertTrue(file.exists());
  AetherPomResult result=aether.resolveLocalProject(file);
  addResultDependencies(result);
  for (  ArtifactVersions av : idNoVersionMap.values()) {
    Map<String,HashSet<DependencyNode>> versions=av.versionsToUseSet;
    if (versions.size() > 1) {
      System.err.println("ERROR: Duplciate versions for " + av.artifact + " uses: "+ versions);
    }
  }
  for (  ArtifactVersions av : idNoVersionMap.values()) {
    Artifact k=av.artifact;
    List<String> versions=new LinkedList<String>(av.versionsToUseSet.keySet());
    if (versions.isEmpty()) {
      System.out.println("Warning no versions for " + k + " in "+ av.versionsToUseSet);
    }
 else {
      String version=versions.get(versions.size() - 1);
      System.out.println("<dependency>");
      System.out.println("  <groupId>" + k.getGroupId() + "</groupId>");
      System.out.println("  <artifactId>" + k.getArtifactId() + "</artifactId>");
      System.out.println("  <version>" + version + "</version>");
      String classifier=k.getClassifier();
      if (classifier != null && classifier.length() > 0) {
        System.out.println("  <classifier>" + classifier + "</classifier>");
      }
      String extension=k.getExtension();
      if (extension != null && extension.length() > 0 && !extension.equals("jar")) {
        System.out.println("  <type>" + extension + "</type>");
      }
      System.out.println("</dependency>");
    }
  }
}
