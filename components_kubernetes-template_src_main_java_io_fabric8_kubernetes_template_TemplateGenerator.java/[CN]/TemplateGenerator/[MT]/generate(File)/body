{
  String dockerImage=config.getDockerImage();
  String name=config.getName();
  Map<String,String> labels=config.getLabels();
  String replicationControllerName=validateKubernetesId(config.getReplicationControllerName(),"replicationControllerName");
  String serviceName=config.getServiceName();
  if (Strings.isNotBlank(serviceName)) {
    serviceName=validateKubernetesId(serviceName,"serviceName");
  }
  if (Strings.notEmpty(serviceName)) {
    if (Objects.equal(serviceName,replicationControllerName)) {
      throw new IllegalArgumentException("replicationControllerName and serviceName are the same! (" + serviceName + ")");
    }
  }
  KubernetesListBuilder builder=new KubernetesListBuilder().withId(name).addNewReplicationController().withId(replicationControllerName).withLabels(labels).withNewDesiredState().withReplicas(config.getReplicaCount()).withReplicaSelector(labels).withNewPodTemplate().withLabels(labels).withNewDesiredState().withNewManifest().addNewContainer().withName(config.getContainerName()).withImage(dockerImage).withImagePullPolicy(config.getImagePullPolicy()).withEnv(config.getEnvironmentVariables()).withPorts(config.getPorts()).endContainer().endManifest().endDesiredState().endPodTemplate().endDesiredState().endReplicationController();
  if (serviceName != null) {
    builder=builder.addNewService().withId(serviceName).withContainerPort(config.getServiceContainerPort()).withPort(config.getServicePort()).withSelector(labels).withLabels(labels).endService();
  }
  KubernetesList kubernetesList=builder.build();
  try {
    ObjectMapper mapper=new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
    String generated=mapper.writeValueAsString(kubernetesList);
    Files.writeToFile(kubernetesJson,generated,Charset.defaultCharset());
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Failed to generate Kubernetes JSON.",e);
  }
}
