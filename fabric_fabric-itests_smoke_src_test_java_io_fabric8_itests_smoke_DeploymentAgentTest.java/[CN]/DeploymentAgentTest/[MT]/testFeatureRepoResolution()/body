{
  System.out.println(executeCommand("fabric:create -n"));
  waitForFabricCommands();
  System.out.println(executeCommand("fabric:profile-create --parents feature-camel test-profile"));
  System.out.println(executeCommand("fabric:version-create --parent 1.0 1.1"));
  System.out.println(executeCommand("fabric:profile-edit --repositories mvn:org.fusesource.examples.fabric-camel-dosgi/features/" + System.getProperty("fabric.version") + "/xml/features test-profile 1.1"));
  System.out.println(executeCommand("fabric:profile-edit --features fabric-dosgi test-profile 1.1"));
  System.out.println(executeCommand("profile-edit --pid io.fabric.agent/org.ops4j.pax.url.mvn.repositories=http://repo1.maven.org/maven2@id=m2central default 1.1"));
  System.out.println(executeCommand("fabric:profile-edit --pid test-profile 1.1"));
  Set<Container> containers=ContainerBuilder.create().withName("cnt").withProfiles("test-profile").assertProvisioningResult().build();
  for (  Container container : containers) {
    System.out.println(executeCommand("fabric:container-upgrade 1.1 " + container.getId()));
    System.out.flush();
  }
  Provision.provisioningSuccess(containers,PROVISION_TIMEOUT);
  System.out.println(executeCommand("fabric:container-list"));
  for (  Container container : containers) {
    System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + container.getId() + " osgi:list"));
    System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + container.getId() + " config:proplist --pid org.ops4j.pax.url.mvn"));
    System.out.flush();
  }
}
