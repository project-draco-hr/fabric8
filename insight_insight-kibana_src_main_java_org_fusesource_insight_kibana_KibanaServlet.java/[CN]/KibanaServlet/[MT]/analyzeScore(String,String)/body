{
  int limit=Config.analyzeLimit;
  int show=Config.analyzeShow;
  ClientRequest req=new ClientRequest(hash);
  Query query=new SortedQuery(req.getSearch(),req.getFrom(),req.getTo(),0,limit);
  LOGGER.debug("\tclient: {}",req);
  LOGGER.debug("\tquery: {}",query);
  List<String> indices=Kelastic.getIndices(req.getFrom(),req.getTo());
  ObjectNode result=kelasticMulti(query,indices);
  ObjectNode time=result.with("kibana").putObject("time");
  time.put("from",formatDate(new Date(req.getFrom())));
  time.put("to",formatDate(new Date(req.getTo())));
  Map<String,Integer> count=KelasticResponse.countFields(result,field,show);
  ArrayNode hits=result.arrayNode();
  for (  Map.Entry<String,Integer> entry : count.entrySet()) {
    ObjectNode n=hits.objectNode();
    n.put("id",entry.getKey());
    n.put("count",entry.getValue().intValue());
    hits.add(n);
  }
  result.with("hits").put("count",result.get("hits").get("hits").size());
  result.with("hits").put("hits",hits);
  return Json.serialize(result);
}
