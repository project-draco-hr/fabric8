{
  String path=req.getServletPath();
  String info=req.getPathInfo();
  String request=path + (info != null ? info : "");
  Pattern search;
  Matcher matcher;
  search=Pattern.compile("/js/timezone\\.js");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    LOGGER.debug("Timezone Javascript");
    LOGGER.debug("\trequest: {}",request);
    ArrayNode fields=Json.arrayNode();
    for (    String f : Config.defaultFields) {
      fields.add(f);
    }
    String str="var tmp_offset = \"" + ("user".equals(Config.timeZone) ? "user" : TimeZone.getTimeZone(Config.timeZone).getRawOffset() / 1000) + "\"\n"+ "\n"+ "window.time_format = \""+ (Config.timeFormat != null ? Config.timeFormat : "mm/dd HH:MM:ss")+ "\"\n"+ "\n"+ "if (tmp_offset == 'user') {\n"+ "\tvar d = new Date()\n"+ "\twindow.tOffset = -d.getTimezoneOffset() * 60 * 1000;\n"+ "} else {\n"+ "\twindow.tOffset = parseFloat(tmp_offset) * 3600 * 1000;\n"+ "}\n"+ "\n"+ "window.default_fields = "+ fields.toString()+ ";\n"+ "window.timestamp = \""+ Config.timestamp+ "\";\n";
    resp.setHeader("Content-Type","application/json");
    resp.getWriter().write(str);
    return;
  }
  search=Pattern.compile("/stream");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    LOGGER.debug("Stream");
    LOGGER.debug("\trequest: {}",request);
    req.getRequestDispatcher("/stream.html").forward(req,resp);
    return;
  }
  search=Pattern.compile("/api/search/([^/?]+)(?:/([^/?]+))?");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    LOGGER.debug("Search");
    LOGGER.debug("\trequest: {}",request);
    String hash=matcher.group(1);
    String segment=matcher.group(2);
    String result=search(hash,segment);
    resp.getWriter().write(result);
    return;
  }
  search=Pattern.compile("/api/graph/([^/?]+)/([^/?]+)/([^/?]+)/([^/?]*)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    LOGGER.debug("Graph");
    LOGGER.debug("\trequest: {}",request);
    String mode=matcher.group(1);
    String interval=matcher.group(2);
    String hash=matcher.group(3);
    String segment=matcher.group(4);
    String result=graph(mode,interval,hash,segment);
    resp.getWriter().write(result);
    return;
  }
  search=Pattern.compile("/api/analyze/([^/?]+)/([^/?]+)/([^/?]+)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String field=matcher.group(1);
    String mode=matcher.group(2);
    String hash=matcher.group(3);
    LOGGER.debug("Analyze {}",mode);
    LOGGER.debug("\trequest: {}",request);
    String result;
    if ("score".equals(mode)) {
      result=analyzeScore(field,hash);
    }
 else     if ("mean".equals(mode)) {
      result=analyzeMean(field,hash);
    }
 else     if ("terms".equals(mode)) {
      result=analyzeTerms(field,hash);
    }
 else     if ("trend".equals(mode)) {
      result=analyzeTrend(field,hash);
    }
 else {
      resp.sendError(404);
      return;
    }
    resp.getWriter().write(result);
    return;
  }
  search=Pattern.compile("/api/id/([^/?]+)/([^/?]+)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String id=matcher.group(1);
    String index=matcher.group(2);
    LOGGER.debug("Id");
    LOGGER.debug("\trequest: {}",request);
    ObjectNode result=Kelastic.kelastic(new IDQuery(id),index);
    resp.getWriter().write(result.toString());
    return;
  }
  search=Pattern.compile("/api/stream/([^/?]+)(?:/([^/?]+))?");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String hash=matcher.group(1);
    String from=matcher.group(2);
    LOGGER.debug("Stream");
    LOGGER.debug("\trequest: {}",request);
    ObjectNode result=stream(hash,from);
    resp.getWriter().write(result.toString());
    return;
  }
  search=Pattern.compile("/rss/([^/?]+)/([^/?]+)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String hash=matcher.group(1);
    String count=matcher.group(2);
    LOGGER.debug("Rss");
    LOGGER.debug("\trequest: {}",request);
    resp.sendError(404);
    return;
  }
  search=Pattern.compile("/export/([^/?]+)/([^/?]+)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String hash=matcher.group(1);
    String count=matcher.group(2);
    LOGGER.debug("Export");
    LOGGER.debug("\trequest: {}",request);
    resp.sendError(404);
    return;
  }
  search=Pattern.compile("/turl/([^/?]+)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String id=matcher.group(1);
    LOGGER.debug("Turl id");
    LOGGER.debug("\trequest: {}",request);
    resp.sendError(404);
    return;
  }
  search=Pattern.compile("/turl/save/([^/?]+)");
  matcher=search.matcher(request);
  if (matcher.matches()) {
    String hash=matcher.group(1);
    LOGGER.debug("Turl save");
    LOGGER.debug("\trequest: {}",request);
    resp.sendError(404);
    return;
  }
  LOGGER.debug("Unknown request {}",request);
  resp.sendError(404);
}
