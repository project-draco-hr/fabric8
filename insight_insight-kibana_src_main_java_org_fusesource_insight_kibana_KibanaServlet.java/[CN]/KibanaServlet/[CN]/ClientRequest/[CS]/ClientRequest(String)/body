{
  byte[] str=javax.xml.bind.DatatypeConverter.parseBase64Binary(hash);
  JsonNode request=new ObjectMapper().readTree(str);
  search=getField(request,"search");
  if (search != null && search.contains("|")) {
    search=search.trim().split("|")[0].trim();
  }
  index=getField(request,"index");
  offset=getInt(request,"offset",0);
  JsonNode f=request.get("fields");
  if (f != null && f.size() > 0) {
    fields=new String[f.size()];
    int i=0;
    for (Iterator<JsonNode> it=f.getElements(); it.hasNext(); ) {
      fields[i++]=it.next().asText();
    }
  }
 else {
    fields=Config.defaultFields;
  }
  analyze=getField(request,"analyze_field");
  String timeframe=getField(request,"timeframe");
  if ("custom".equals(timeframe)) {
    from=parseDate(request.get("time").get("from").asText());
    to=parseDate(request.get("time").get("to").asText());
  }
 else   if ("all".equals(timeframe)) {
    from=0;
    to=System.currentTimeMillis();
  }
 else {
    long diff=timeframe != null ? Integer.parseInt(timeframe) * 1000 : 0;
    if (diff <= 0) {
      diff=Config.fallbackInterval;
    }
    to=System.currentTimeMillis();
    from=to - diff;
  }
}
