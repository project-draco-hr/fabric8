{
  NetClient client=null;
  List<String> paths=serviceMap.getPaths();
  TcpClientRequestFacade requestFacade=new TcpClientRequestFacade(socket);
  String path=(String)loadBalancer.choose(paths,requestFacade);
  if (path != null) {
    List<ServiceDetails> services=serviceMap.getServices(path);
    if (!services.isEmpty()) {
      ServiceDetails serviceDetails=(ServiceDetails)loadBalancer.choose(services,requestFacade);
      if (serviceDetails != null) {
        List<String> urlStrings=serviceDetails.getServices();
        for (        String urlString : urlStrings) {
          if (Strings.notEmpty(urlString)) {
            try {
              URI uri=new URI(urlString);
              String urlProtocol=uri.getScheme();
              if (Objects.equal(protocol,urlProtocol)) {
                Handler<AsyncResult<NetSocket>> handler=new Handler<AsyncResult<NetSocket>>(){
                  public void handle(                  final AsyncResult<NetSocket> asyncSocket){
                    NetSocket clientSocket=asyncSocket.result();
                    Pump.createPump(clientSocket,socket).start();
                    Pump.createPump(socket,clientSocket).start();
                  }
                }
;
                client=createClient(socket,uri,handler);
                break;
              }
            }
 catch (            MalformedURLException e) {
              LOG.warn("Failed to parse URL: " + urlString + ". "+ e,e);
            }
catch (            URISyntaxException e) {
              LOG.warn("Failed to parse URI: " + urlString + ". "+ e,e);
            }
          }
        }
      }
    }
  }
  if (client == null) {
    LOG.info("No service available for protocol " + protocol + " for paths "+ paths);
    socket.close();
  }
}
