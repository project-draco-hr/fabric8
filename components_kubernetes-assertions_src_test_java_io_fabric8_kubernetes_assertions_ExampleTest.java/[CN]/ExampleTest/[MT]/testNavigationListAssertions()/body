{
  final String id1="abc";
  final String id2="def";
  Map<String,String> labels1=new HashMap<>();
  labels1.put("foo","bar");
  Map<String,String> labels2=new HashMap<>();
  labels2.put("whatnot","cheese");
  final Pod pod1=new Pod();
  pod1.setMetadata(new ObjectMeta());
  pod1.getMetadata().setName(id1);
  pod1.getMetadata().setLabels(labels1);
  final Pod pod2=new Pod();
  pod2.setMetadata(new ObjectMeta());
  pod2.getMetadata().setName(id2);
  pod2.getMetadata().setLabels(labels2);
  final PodList emptyPodList=new PodList();
  final PodList podList=new PodList();
  podList.setItems(new ArrayList<Pod>(Arrays.asList(pod1,pod2)));
  assertThat(emptyPodList).describedAs("emptyPodList").items().isEmpty();
  assertThat(podList).describedAs("podListWith2Items").items().first().metadata().name().isEqualTo(id1);
  assertThat(podList).describedAs("podListWith2Items").items().last().metadata().name().isEqualTo(id2);
  assertAssertionError(new Block(){
    @Override public void invoke() throws Exception {
      assertThat(podList).describedAs("podListWith2Items").items().item(-1).isNotNull();
    }
  }
);
  assertAssertionError(new Block(){
    @Override public void invoke() throws Exception {
      assertThat(podList).describedAs("podListWith2Items").items().item(2).isNotNull();
    }
  }
);
  assertAssertionError(new Block(){
    @Override public void invoke() throws Exception {
      assertThat(podList).describedAs("podListWith2Items").items().first().metadata().name().isEqualTo("shouldNotMatch");
    }
  }
);
}
