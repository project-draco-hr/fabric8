{
  Service srv=null;
  String serviceHost=serviceToHost(serviceName);
  String servicePort=serviceToPort(serviceName,servicePortName);
  String serviceProto=serviceProtocol != null ? serviceProtocol : serviceToProtocol(serviceName,servicePort);
  String actualNamespace=Strings.isNotBlank(serviceNamespace) ? serviceNamespace : client.getNamespace();
  if (!serviceExternal && Strings.isNotBlank(serviceHost) && Strings.isNotBlank(servicePort)&& Strings.isNotBlank(serviceProtocol)) {
    return serviceProtocol + "://" + serviceHost+ ":"+ servicePort;
  }
 else   if (Strings.isNotBlank(actualNamespace)) {
    try {
      srv=client.services().inNamespace(actualNamespace).withName(serviceName).get();
    }
 catch (    Exception e) {
      LOGGER.warn("Could not lookup service:" + serviceName + " in namespace:"+ actualNamespace+ ", due to: "+ e.getMessage());
    }
  }
  if (srv == null) {
    throw new IllegalArgumentException("No kubernetes service could be found for name: " + serviceName + " in namespace: "+ actualNamespace);
  }
  try {
    if (Strings.isNullOrBlank(servicePortName) && isOpenShift(client)) {
      OpenShiftClient openShiftClient=client.adapt(OpenShiftClient.class);
      Route route=openShiftClient.routes().inNamespace(actualNamespace).withName(serviceName).get();
      if (route != null) {
        return (serviceProto + "://" + route.getSpec().getHost()).toLowerCase();
      }
    }
  }
 catch (  KubernetesClientException e) {
    if (e.getCode() == 403) {
      LOGGER.warn("Could not lookup route:" + serviceName + " in namespace:"+ actualNamespace+ ", due to: "+ e.getMessage());
    }
 else {
      throw e;
    }
  }
  ServicePort port=findServicePortByName(srv,servicePortName);
  if (port == null) {
    throw new RuntimeException("Couldn't find port: " + servicePortName + " for service:"+ serviceName);
  }
  if ("None".equals(srv.getSpec().getClusterIP())) {
    throw new IllegalStateException("Service: " + serviceName + " in namespace:"+ serviceNamespace+ "is head-less. Search for endpoints instead.");
  }
  return (serviceProto + "://" + srv.getSpec().getPortalIP()+ ":"+ port.getPort()).toLowerCase();
}
