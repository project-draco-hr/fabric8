{
  final String opChars="=<>~";
  int attrEndIdx=startIdx;
  for (int i=0; i < (endIdx - startIdx); i++) {
    char c=filter.charAt(startIdx + i);
    if (opChars.indexOf(c) >= 0) {
      break;
    }
 else     if (!Character.isWhitespace(c)) {
      attrEndIdx=startIdx + i + 1;
    }
  }
  if (attrEndIdx == startIdx) {
    throw new IllegalArgumentException("Missing attribute name: " + filter.substring(startIdx,endIdx));
  }
  String attr=filter.substring(startIdx,attrEndIdx);
  startIdx=skipWhitespace(filter,attrEndIdx);
  int op;
switch (filter.charAt(startIdx)) {
case '=':
    op=EQ;
  startIdx++;
break;
case '<':
if (filter.charAt(startIdx + 1) != '=') {
throw new IllegalArgumentException("Unknown operator: " + filter.substring(startIdx,endIdx));
}
op=LTE;
startIdx+=2;
break;
case '>':
if (filter.charAt(startIdx + 1) != '=') {
throw new IllegalArgumentException("Unknown operator: " + filter.substring(startIdx,endIdx));
}
op=GTE;
startIdx+=2;
break;
case '~':
if (filter.charAt(startIdx + 1) != '=') {
throw new IllegalArgumentException("Unknown operator: " + filter.substring(startIdx,endIdx));
}
op=APPROX;
startIdx+=2;
break;
default :
throw new IllegalArgumentException("Unknown operator: " + filter.substring(startIdx,endIdx));
}
Object value=toDecodedString(filter,startIdx,endIdx);
if (op == EQ) {
String valueStr=filter.substring(startIdx,endIdx);
List<String> values=parseSubstring(valueStr);
if ((values.size() == 2) && (values.get(0).length() == 0) && (values.get(1).length() == 0)) {
op=PRESENT;
}
 else if (values.size() > 1) {
op=SUBSTRING;
value=values;
}
}
return new SimpleFilter(attr,value,op);
}
