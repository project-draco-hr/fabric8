{
  reset(bundleContext,serverStatsRegistration,managedServiceRegistration,zkClientRegistration);
  expect(bundleContext.registerService(aryEq(new String[]{IZKClient.class.getName(),org.linkedin.zookeeper.client.IZKClient.class.getName()}),same(client),(Dictionary)anyObject())).andReturn(zkClientRegistration);
  expect(bundleContext.registerService(eq(ManagedService.class.getName()),same(client),(Dictionary)anyObject())).andReturn(managedServiceRegistration);
  replay(bundleContext,serverStatsRegistration,managedServiceRegistration,zkClientRegistration);
  client.init();
  verify(bundleContext,serverStatsRegistration,managedServiceRegistration,zkClientRegistration);
  assertFalse(client.isConfigured());
  assertFalse(client.isConnected());
  try {
    client.getChildren("/");
  }
 catch (  IllegalStateException e) {
  }
  reset(bundleContext,serverStatsRegistration,managedServiceRegistration,zkClientRegistration);
  zkClientRegistration.setProperties((Dictionary)anyObject());
  replay(bundleContext,serverStatsRegistration,managedServiceRegistration,zkClientRegistration);
  Hashtable properties=new Hashtable();
  properties.put("zookeeper.url","localhost:" + port);
  client.updated(properties);
  verify(bundleContext,serverStatsRegistration,managedServiceRegistration,zkClientRegistration);
  assertTrue(client.isConfigured());
  assertFalse(client.isConnected());
  try {
    client.waitForConnected(Timespan.parse("2s"));
    fail("Expected a timeout exception");
  }
 catch (  TimeoutException e) {
  }
  createServer();
  try {
    client.waitForConnected(Timespan.parse("10s"));
  }
 catch (  TimeoutException e) {
    fail("Did not expect a timeout exception");
  }
  assertTrue(client.isConfigured());
  assertTrue(client.isConnected());
  client.registerListener(new LifecycleListener(){
    @Override public void onConnected(){
      System.err.println("\nConnected\n");
    }
    @Override public void onDisconnected(){
      System.err.println("\nDisconnected\n");
    }
  }
);
  Object clientCnxnSocket=getField(client,"_zk","_zk","cnxn","sendThread","clientCnxnSocket");
  callMethod(clientCnxnSocket,"testableCloseSocket");
  client.waitForState(OsgiZkClient.State.RECONNECTING,Timespan.parse("10s"));
  client.waitForState(OsgiZkClient.State.CONNECTED,Timespan.parse("10s"));
}
