{
  try {
    T bean=(T)getBeanClass().newInstance();
    for (    Field f : getBeanClass().getDeclaredFields()) {
      ConfigProperty configProperty=f.getAnnotation(ConfigProperty.class);
      String name=configProperty.name();
      String defaultValue=configProperty.defaultValue();
      String value=ConfigResolver.getPropertyValue(configurationGroup.toUpperCase() + "_" + name,defaultValue);
      if (f.getType().isAssignableFrom(String.class)) {
        f.setAccessible(true);
        f.set(bean,value);
      }
 else       if (f.getType().isAssignableFrom(Boolean.class)) {
        f.setAccessible(true);
        f.set(bean,Boolean.parseBoolean(value));
      }
 else       if (f.getType().isAssignableFrom(Short.class)) {
        f.setAccessible(true);
        f.set(bean,Short.parseShort(value));
      }
 else       if (f.getType().isAssignableFrom(Integer.class)) {
        f.setAccessible(true);
        f.set(bean,Integer.parseInt(value));
      }
 else       if (f.getType().isAssignableFrom(Long.class)) {
        f.setAccessible(true);
        f.set(bean,Long.parseLong(value));
      }
 else       if (f.getType().isAssignableFrom(Double.class)) {
        f.setAccessible(true);
        f.set(bean,Double.parseDouble(value));
      }
 else       if (f.getType().isAssignableFrom(Float.class)) {
        f.setAccessible(true);
        f.set(bean,Float.parseFloat(value));
      }
    }
    return bean;
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}
