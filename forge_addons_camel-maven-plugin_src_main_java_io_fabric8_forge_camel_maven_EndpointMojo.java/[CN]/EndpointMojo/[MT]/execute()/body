{
  CamelCatalog catalog=new DefaultCamelCatalog();
  catalog.setSuggestionStrategy(new LuceneSuggestionStrategy());
  List<CamelEndpointDetails> endpoints=new ArrayList<>();
  List<CamelSimpleDetails> simpleExpressions=new ArrayList<>();
  Set<File> javaFiles=new LinkedHashSet<File>();
  Set<File> xmlFiles=new LinkedHashSet<File>();
  if (includeJava) {
    for (    String dir : project.getCompileSourceRoots()) {
      findJavaFiles(new File(dir),javaFiles);
    }
    if (includeTest) {
      for (      String dir : project.getTestCompileSourceRoots()) {
        findJavaFiles(new File(dir),javaFiles);
      }
    }
  }
  if (includeXml) {
    for (    Resource dir : project.getResources()) {
      findXmlFiles(new File(dir.getDirectory()),xmlFiles);
    }
    if (includeTest) {
      for (      Resource dir : project.getTestResources()) {
        findXmlFiles(new File(dir.getDirectory()),xmlFiles);
      }
    }
  }
  for (  File file : javaFiles) {
    if (matchFile(file)) {
      try {
        String fqn=file.getPath();
        String baseDir=".";
        JavaType out=Roaster.parse(file);
        if (out != null && out instanceof JavaClassSource) {
          JavaClassSource clazz=(JavaClassSource)out;
          RouteBuilderParser.parseRouteBuilderEndpoints(clazz,baseDir,fqn,endpoints);
          RouteBuilderParser.parseRouteBuilderSimpleExpressions(clazz,baseDir,fqn,simpleExpressions);
        }
      }
 catch (      Exception e) {
        getLog().warn("Error parsing java file " + file + " code due "+ e.getMessage(),e);
      }
    }
  }
  for (  File file : xmlFiles) {
    if (matchFile(file)) {
      try {
        String fqn=file.getPath();
        String baseDir=".";
        InputStream is=new FileInputStream(file);
        XmlRouteParser.parseXmlRouteEndpoints(is,baseDir,fqn,endpoints);
        is.close();
        is=new FileInputStream(file);
        XmlRouteParser.parseXmlRouteSimpleExpressions(is,baseDir,fqn,simpleExpressions);
        is.close();
      }
 catch (      Exception e) {
        getLog().warn("Error parsing xml file " + file + " code due "+ e.getMessage(),e);
      }
    }
  }
  int endpointErrors=0;
  for (  CamelEndpointDetails detail : endpoints) {
    EndpointValidationResult result=catalog.validateEndpointProperties(detail.getEndpointUri());
    if (!result.isSuccess()) {
      endpointErrors++;
      StringBuilder sb=new StringBuilder();
      sb.append("Endpoint validation error at: ");
      if (detail.getClassName() != null && detail.getLineNumber() != null) {
        sb.append(detail.getClassName());
        if (detail.getMethodName() != null) {
          sb.append(".").append(detail.getMethodName());
        }
        sb.append("(").append(asSimpleClassName(detail.getClassName())).append(".java:");
        sb.append(detail.getLineNumber()).append(")");
      }
 else       if (detail.getLineNumber() != null) {
        String fqn=stripRootPath(asRelativeFile(detail.getFileName()));
        if (fqn.endsWith(".xml")) {
          fqn=fqn.substring(0,fqn.length() - 4);
          fqn=asPackageName(fqn);
        }
        sb.append(fqn);
        sb.append("(").append(asSimpleClassName(fqn)).append(".xml:");
        sb.append(detail.getLineNumber()).append(")");
      }
 else {
        sb.append(detail.getFileName());
      }
      sb.append("\n\n");
      String out=result.summaryErrorMessage(false);
      sb.append(out);
      sb.append("\n\n");
      getLog().warn(sb.toString());
    }
  }
  String endpointSummary;
  if (endpointErrors == 0) {
    int ok=endpoints.size() - endpointErrors;
    endpointSummary=String.format("Endpoint validation success: (%s = passed, %s = invalid)",ok,endpointErrors);
  }
 else {
    int ok=endpoints.size() - endpointErrors;
    endpointSummary=String.format("Endpoint validation error: (%s = passed, %s = invalid)",ok,endpointErrors);
  }
  if (endpointErrors > 0) {
    getLog().warn(endpointSummary);
  }
 else {
    getLog().info(endpointSummary);
  }
  int simpleErrors=0;
  for (  CamelSimpleDetails detail : simpleExpressions) {
    SimpleValidationResult result=catalog.validateSimpleExpression(detail.getSimple());
    if (!result.isSuccess()) {
      simpleErrors++;
      StringBuilder sb=new StringBuilder();
      sb.append("Simple validation error at: ");
      if (detail.getClassName() != null && detail.getLineNumber() != null) {
        sb.append(detail.getClassName());
        if (detail.getMethodName() != null) {
          sb.append(".").append(detail.getMethodName());
        }
        sb.append("(").append(asSimpleClassName(detail.getClassName())).append(".java:");
        sb.append(detail.getLineNumber()).append(")");
      }
 else       if (detail.getLineNumber() != null) {
        String fqn=stripRootPath(asRelativeFile(detail.getFileName()));
        if (fqn.endsWith(".xml")) {
          fqn=fqn.substring(0,fqn.length() - 4);
          fqn=asPackageName(fqn);
        }
        sb.append(fqn);
        sb.append("(").append(asSimpleClassName(fqn)).append(".xml:");
        sb.append(detail.getLineNumber()).append(")");
      }
 else {
        sb.append(detail.getFileName());
      }
      sb.append("\n");
      String[] lines=result.getError().split("\n");
      for (      String line : lines) {
        sb.append("\n\t").append(line);
      }
      sb.append("\n");
      getLog().warn(sb.toString());
    }
  }
  String simpleSummary;
  if (simpleErrors == 0) {
    int ok=simpleExpressions.size() - simpleErrors;
    simpleSummary=String.format("Simple validation success: (%s = passed, %s = invalid)",ok,simpleErrors);
  }
 else {
    int ok=simpleExpressions.size() - simpleErrors;
    simpleSummary=String.format("Simple validation error: (%s = passed, %s = invalid)",ok,simpleErrors);
  }
  if (failOnError && (endpointErrors > 0 || simpleErrors > 0)) {
    throw new MojoExecutionException(endpointSummary + "\n" + simpleSummary);
  }
  if (simpleErrors > 0) {
    getLog().warn(simpleSummary);
  }
 else {
    getLog().info(simpleSummary);
  }
}
