{
  final DownloadManager downloadManager=DownloadManagers.createDownloadManager(fabric,downloadExecutor);
  final Map<String,File> answer=new HashMap<String,File>();
  for (  Profile profile : profileList) {
    Map<String,Parser> profileArtifacts=AgentUtils.getProfileArtifacts(fabric,downloadManager,profile.getOverlay(),new AgentUtils.Callback<String>(){
      @Override public void call(      String location){
        System.out.println("Got non-mvn URL " + location);
        try {
          DownloadFuture future=downloadManager.download(location);
          File file=AgentUtils.waitForFileDownload(future);
          if (file != null) {
            answer.put(location,file);
          }
          System.out.println("downloaded file " + file + " for location: "+ location);
        }
 catch (        Exception e) {
          LOGGER.warn("Error downloading " + location + ". "+ e,e);
        }
      }
    }
);
    appendMavenDependencies(profileArtifacts,profile);
    Set<String> rawUrls=profileArtifacts.keySet();
    List<String> cleanUrlsToDownload=new ArrayList<String>();
    for (    String rawUrl : rawUrls) {
      String mvnUrl=removeUriPrefixBeforeMaven(rawUrl);
      cleanUrlsToDownload.add(mvnUrl);
    }
    Map<String,File> profileFiles=AgentUtils.downloadLocations(downloadManager,cleanUrlsToDownload);
    if (profileFiles != null) {
      answer.putAll(profileFiles);
    }
  }
  return answer;
}
