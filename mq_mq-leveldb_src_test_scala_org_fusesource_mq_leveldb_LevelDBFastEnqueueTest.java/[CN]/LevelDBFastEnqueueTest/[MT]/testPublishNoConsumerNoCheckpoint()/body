{
  toSend=100;
  startBroker(true,0);
  final AtomicLong sharedCount=new AtomicLong(toSend);
  long start=System.currentTimeMillis();
  ExecutorService executorService=Executors.newCachedThreadPool();
  for (int i=0; i < parallelProducer; i++) {
    executorService.execute(new Runnable(){
      @Override public void run(){
        try {
          publishMessages(sharedCount,0);
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(30,TimeUnit.MINUTES);
  assertTrue("Producers done in time",executorService.isTerminated());
  assertTrue("No exceptions: " + exceptions,exceptions.isEmpty());
  long totalSent=toSend * payloadString.length();
  broker.getAdminView().gc();
  double duration=System.currentTimeMillis() - start;
  LOG.info("Duration:                " + duration + "ms");
  LOG.info("Rate:                       " + (toSend * 1000 / duration) + "m/s");
  LOG.info("Total send:             " + totalSent);
  LOG.info("Total journal write: " + store.getLogAppendPosition());
  LOG.info("Journal writes %:    " + store.getLogAppendPosition() / (double)totalSent * 100 + "%");
  stopBroker();
  restartBroker(0,0);
  consumeMessages(toSend);
}
