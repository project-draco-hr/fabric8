{
  DistributionManagement distributionManagement=findProjectDistributionManagement();
  if (distributionManagement != null) {
    Site site=distributionManagement.getSite();
    if (site != null) {
      String url=site.getUrl();
      if (Strings.isNotBlank(url)) {
        MavenProject project=getProject();
        if (project != null) {
          url=replaceProperties(url,project.getProperties());
        }
        try {
          String urlToParse=url;
          int idx=url.indexOf("://");
          if (idx > 0) {
            int idx2=url.substring(0,idx).lastIndexOf(':');
            if (idx2 >= 0 && idx2 < idx) {
              urlToParse=url.substring(idx2 + 1);
            }
          }
          URL u=new URL(urlToParse);
          String host=u.getHost();
          String ns=null;
          try {
            KubernetesClient kubernetes=getKubernetes();
            ns=kubernetes.getNamespace();
            Service service=kubernetes.services().inNamespace(ns).withName(host).get();
            if (service != null) {
              String publicUrl=KubernetesHelper.getServiceURL(kubernetes,host,ns,u.getProtocol(),true);
              return URLUtils.pathJoin(publicUrl,u.getPath());
            }
 else {
              if (host.indexOf('.') < 0) {
                getLog().info("Not generating a documentation link annotation as the service " + host + " is not running!");
                return null;
              }
            }
          }
 catch (          Exception e) {
            getLog().warn("Could not look up service " + host + " in namespace "+ ns+ " due to : "+ e);
          }
        }
 catch (        MalformedURLException e) {
          getLog().error("Failed to parse URL: " + url,e);
        }
        return url;
      }
    }
  }
  return null;
}
