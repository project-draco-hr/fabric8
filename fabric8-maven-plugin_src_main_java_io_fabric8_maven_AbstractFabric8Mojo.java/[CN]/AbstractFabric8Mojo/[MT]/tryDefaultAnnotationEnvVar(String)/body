{
  MavenProject rootProject=getRootProject();
  File basedir=rootProject.getBasedir();
  if (basedir == null) {
    basedir=getProject().getBasedir();
  }
  if (basedir == null) {
    basedir=new File(System.getProperty("basedir","."));
  }
  ProjectConfig projectConfig=ProjectConfigs.loadFromFolder(basedir);
  String repoName=rootProject.getArtifactId();
  String userEnvVar="JENKINS_GOGS_USER";
  String username=Systems.getEnvVarOrSystemProperty(userEnvVar);
  if (Objects.equal("BUILD_URL",envVarName)) {
    String jobUrl=projectConfig.getLink("Job");
    if (Strings.isNullOrBlank(jobUrl)) {
      String name=projectConfig.getBuildName();
      if (Strings.isNullOrBlank(name)) {
        if (Strings.isNotBlank(repoName)) {
          name=repoName;
          if (Strings.isNotBlank(username)) {
            name=ProjectRepositories.createBuildName(username,repoName);
          }
 else {
            warnIfInCDBuild("Cannot auto-default BUILD_URL as there is no environment variable `" + userEnvVar + "` defined so we can't guess the Jenkins build URL");
          }
        }
      }
      if (Strings.isNotBlank(name)) {
        try {
          String jenkinsUrl=KubernetesHelper.getServiceURLInCurrentNamespace(getKubernetes(),ServiceNames.JENKINS,"http",null,true);
          jobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",name);
        }
 catch (        Throwable e) {
          Throwable cause=e;
          boolean notFound=false;
          boolean connectError=false;
          Iterable<Throwable> it=createExceptionIterable(e);
          for (          Throwable t : it) {
            connectError=t instanceof ConnectException || "No route to host".equals(t.getMessage());
            notFound=t instanceof IllegalArgumentException || t.getMessage() != null && t.getMessage().startsWith("No kubernetes service could be found for name");
            if (connectError || notFound) {
              cause=t;
              break;
            }
          }
          if (connectError) {
            warnIfInCDBuild("Cannot connect to Kubernetes to find jenkins service URL: " + cause.getMessage());
          }
 else           if (notFound) {
            warnIfInCDBuild(cause.getMessage());
          }
 else {
            warnIfInCDBuild("Cannot find jenkins service URL: " + cause,cause);
          }
        }
      }
    }
    if (Strings.isNotBlank(jobUrl)) {
      String buildId=Systems.getEnvVarOrSystemProperty("BUILD_ID");
      if (Strings.isNotBlank(buildId)) {
        jobUrl=URLUtils.pathJoin(jobUrl,buildId);
      }
 else {
        warnIfInCDBuild("Cannot find BUILD_ID to create a specific jenkins build URL. So using: " + jobUrl);
      }
    }
    return jobUrl;
  }
 else   if (Objects.equal("GIT_URL",envVarName)) {
    if (Strings.isNotBlank(repoName) && Strings.isNotBlank(username)) {
      try {
        String gogsUrl=KubernetesHelper.getServiceURLInCurrentNamespace(getKubernetes(),ServiceNames.GOGS,"http",null,true);
        String rootGitUrl=URLUtils.pathJoin(gogsUrl,username,repoName);
        String gitCommitId=getGitCommitId(envVarName,basedir);
        if (Strings.isNotBlank(gitCommitId)) {
          rootGitUrl=URLUtils.pathJoin(rootGitUrl,"commit",gitCommitId);
        }
        return rootGitUrl;
      }
 catch (      Throwable e) {
        Throwable cause=e;
        boolean notFound=false;
        boolean connectError=false;
        Iterable<Throwable> it=createExceptionIterable(e);
        for (        Throwable t : it) {
          notFound=t instanceof IllegalArgumentException || t.getMessage() != null && t.getMessage().startsWith("No kubernetes service could be found for name");
          connectError=t instanceof ConnectException || "No route to host".equals(t.getMessage());
          if (connectError) {
            cause=t;
            break;
          }
        }
        if (connectError) {
          warnIfInCDBuild("Cannot connect to Kubernetes to find gogs service URL: " + cause.getMessage());
        }
 else         if (notFound) {
          warnIfInCDBuild(cause.getMessage());
        }
 else {
          warnIfInCDBuild("Cannot find gogs service URL: " + cause,cause);
        }
      }
    }
 else {
      warnIfInCDBuild("Cannot auto-default GIT_URL as there is no environment variable `" + userEnvVar + "` defined so we can't guess the Gogs build URL");
    }
  }
 else   if (Objects.equal("GIT_COMMIT",envVarName)) {
    return getGitCommitId(envVarName,basedir);
  }
 else   if (Objects.equal("GIT_BRANCH",envVarName)) {
    try (Repository repository=getGitRepository(basedir,envVarName)){
      if (repository != null) {
        return repository.getBranch();
      }
    }
 catch (    IOException e) {
      warnIfInCDBuild("Failed to find git commit id. " + e,e);
    }
  }
  return null;
}
