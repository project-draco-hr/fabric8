{
  MavenProject rootProject=getRootProject();
  File basedir=rootProject.getBasedir();
  ProjectConfig projectConfig=ProjectConfigs.loadFromFolder(basedir);
  String repoName=rootProject.getArtifactId();
  String userEnvVar="JENKINS_GOGS_USER";
  String username=Systems.getEnvVarOrSystemProperty(userEnvVar);
  if (Objects.equal("BUILD_URL",envVarName)) {
    String jobUrl=projectConfig.getLink("Job");
    if (Strings.isNullOrBlank(jobUrl)) {
      String name=projectConfig.getBuildName();
      if (Strings.isNullOrBlank(name)) {
        if (Strings.isNotBlank(repoName)) {
          name=repoName;
          if (Strings.isNotBlank(username)) {
            name=ProjectRepositories.createBuildName(username,repoName);
          }
 else {
            getLog().warn("Cannot auto-default BUILD_URL as there is no environment variable `" + userEnvVar + "` defined so we can't guess the Jenkins build URL");
          }
        }
      }
      if (Strings.isNotBlank(name)) {
        try {
          String jenkinsUrl=KubernetesHelper.getServiceURLInCurrentNamespace(getKubernetes(),ServiceNames.JENKINS,"http",null,true);
          jobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",name);
          String buildId=Systems.getEnvVarOrSystemProperty("BUILD_ID");
          if (Strings.isNotBlank(buildId)) {
            jobUrl=URLUtils.pathJoin(jobUrl,buildId);
          }
 else {
            getLog().warn("Cannot find BUILD_ID to create a specific jenkins build URL. So using: " + jobUrl);
          }
        }
 catch (        Throwable e) {
          Throwable cause=e;
          boolean connectError=false;
          Iterable<Throwable> it=createExceptionIterable(e);
          for (          Throwable t : it) {
            connectError=t instanceof ConnectException || "No route to host".equals(t.getMessage());
            if (connectError) {
              cause=t;
              break;
            }
          }
          if (connectError) {
            getLog().warn("Cannot connect to Kubernetes to find jenkins service URL: " + cause.getMessage());
          }
 else {
            getLog().warn("Cannot find jenkins service URL: " + cause,cause);
          }
        }
      }
    }
    return jobUrl;
  }
 else   if (Objects.equal("GIT_URL",envVarName)) {
    if (Strings.isNotBlank(repoName) && Strings.isNotBlank(username)) {
      try {
        String gogsUrl=KubernetesHelper.getServiceURLInCurrentNamespace(getKubernetes(),ServiceNames.GOGS,"http",null,true);
        return URLUtils.pathJoin(gogsUrl,username,repoName);
      }
 catch (      Throwable e) {
        Throwable cause=e;
        boolean connectError=false;
        Iterable<Throwable> it=createExceptionIterable(e);
        for (        Throwable t : it) {
          connectError=t instanceof ConnectException || "No route to host".equals(t.getMessage());
          if (connectError) {
            cause=t;
            break;
          }
        }
        if (connectError) {
          getLog().warn("Cannot connect to Kubernetes to find gogs service URL: " + cause.getMessage());
        }
 else {
          getLog().warn("Cannot find gogs service URL: " + cause,cause);
        }
      }
    }
 else {
      getLog().warn("Cannot auto-default GIT_URL as there is no environment variable `" + userEnvVar + "` defined so we can't guess the Gogs build URL");
    }
  }
 else   if (Objects.equal("GIT_COMMIT",envVarName)) {
    try (Repository repository=getGitRepository(basedir,envVarName)){
      if (repository != null) {
        String fullBranch=repository.getFullBranch();
        if (fullBranch == null) {
          fullBranch=repository.getBranch();
        }
        if (fullBranch != null) {
          ObjectId id=repository.resolve(fullBranch);
          if (id != null) {
            return id.getName();
          }
        }
      }
    }
 catch (    IOException e) {
      getLog().warn("Failed to find git commit id. " + e,e);
    }
  }
 else   if (Objects.equal("GIT_BRANCH",envVarName)) {
    try (Repository repository=getGitRepository(basedir,envVarName)){
      if (repository != null) {
        return repository.getBranch();
      }
    }
 catch (    IOException e) {
      getLog().warn("Failed to find git commit id. " + e,e);
    }
  }
  return null;
}
