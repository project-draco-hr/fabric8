{
  try {
    ProjectRequirements requirements=new ProjectRequirements();
    if (includeArtifact) {
      DependencyDTO rootDependency=loadRootDependency();
      requirements.setRootDependency(rootDependency);
    }
    configureRequirements(requirements);
    boolean newUserAdded=false;
    fabricServer=mavenSettings.getServer(serverId);
    if (fabricServer == null) {
      boolean create=false;
      if (mavenSettings.isInteractiveMode() && mavenSettingsWriter != null) {
        System.out.println("Maven settings file: " + mavenSettingsFile.getAbsolutePath());
        System.out.println();
        System.out.println();
        System.out.println("There is no <server> section in your ~/.m2/settings.xml file for the server id: " + serverId);
        System.out.println();
        System.out.println("You can enter the username/password now and have the settings.xml updated or you can do this by hand if you prefer.");
        System.out.println();
        while (true) {
          String value=readInput("Would you like to update the settings.xml file now? (y/n): ").toLowerCase();
          if (value.startsWith("n")) {
            System.out.println();
            System.out.println();
            break;
          }
 else           if (value.startsWith("y")) {
            create=true;
            break;
          }
        }
        if (create) {
          System.out.println("Please let us know the login details for this server: " + serverId);
          System.out.println();
          String userName=readInput("Username: ");
          String password=readPassword("Password: ");
          String password2=readPassword("Repeat Password: ");
          while (!password.equals(password2)) {
            System.out.println("Passwords do not match, please try again.");
            password=readPassword("Password: ");
            password2=readPassword("Repeat Password: ");
          }
          System.out.println();
          fabricServer=new Server();
          fabricServer.setId(serverId);
          fabricServer.setUsername(userName);
          fabricServer.setPassword(password);
          mavenSettings.addServer(fabricServer);
          if (mavenSettingsFile.exists()) {
            int counter=1;
            while (true) {
              File backupFile=new File(mavenSettingsFile.getAbsolutePath() + ".backup-" + counter+++ ".xml");
              if (!backupFile.exists()) {
                System.out.println("Copied original: " + mavenSettingsFile.getAbsolutePath() + " to: "+ backupFile.getAbsolutePath());
                Files.copy(mavenSettingsFile,backupFile);
                break;
              }
            }
          }
          Map<String,Object> config=new HashMap<String,Object>();
          mavenSettingsWriter.write(mavenSettingsFile,config,mavenSettings);
          System.out.println("Updated settings file: " + mavenSettingsFile.getAbsolutePath());
          System.out.println();
          newUserAdded=true;
        }
      }
    }
    if (fabricServer == null) {
      String message="No <server> element can be found in ~/.m2/settings.xml for the server <id>" + serverId + "</id> so we cannot connect to fabric8!\n\n"+ "Please add the following to your ~/.m2/settings.xml file (using the correct user/password values):\n\n"+ "<servers>\n"+ "  <server>\n"+ "    <id>"+ serverId+ "</id>\n"+ "    <username>admin</username>\n"+ "    <password>admin</password>\n"+ "  </server>\n"+ "</servers>\n";
      getLog().error(message);
      throw new MojoExecutionException(message);
    }
    J4pClient client=createJolokiaClient();
    if (upload && includeArtifact) {
      uploadDeploymentUnit(client,newUserAdded);
    }
 else {
      getLog().info("Uploading to the fabric8 maven repository is disabled");
    }
    DeployResults results=uploadRequirements(client,requirements);
    if (results != null) {
      uploadProfileConfigurations(client,results);
      refreshProfile(client,results);
    }
  }
 catch (  MojoExecutionException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MojoExecutionException("Error executing",e);
  }
}
