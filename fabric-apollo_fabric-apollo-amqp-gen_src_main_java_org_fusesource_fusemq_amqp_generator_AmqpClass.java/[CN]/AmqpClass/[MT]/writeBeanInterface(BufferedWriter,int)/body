{
  if (isDescribed()) {
    if (resolveBaseType().isMap()) {
      writer.newLine();
      for (      AmqpField field : fields.values()) {
        AmqpClass symbolClass=TypeRegistry.resolveAmqpClass("symbol");
        Utils.writeJavaComment(writer,indent,"Key for: " + field.getLabel());
        writer.write(Utils.tab(1) + "public static final " + symbolClass.typeMapping+ " "+ Utils.toJavaConstant(field.getName())+ "_KEY = TypeFactory.create"+ symbolClass.typeMapping+ "(\""+ field.getName()+ "\");");
        writer.newLine();
      }
      writer.newLine();
    }
    writer.newLine();
    for (    AmqpField field : fields.values()) {
      AmqpClass fieldClass=field.resolveAmqpFieldType();
      AmqpClass baseType=fieldClass.resolveBaseType();
      if (baseType.isPrimitive() && !baseType.isAny() && !fieldClass.isEnumType()&& !baseType.isDescribed()&& !baseType.isMutable()) {
        writer.newLine();
        field.getDoc().parseFromDoc(fieldClass.doc.docs);
        field.writeJavaDoc(writer,indent);
        writer.write(Utils.tab(indent) + "public void set" + Utils.capFirst(field.getJavaName())+ "("+ baseType.valueMapping+ " "+ Utils.toJavaName(field.getName())+ ");");
        writer.newLine();
        if (baseType.getValueMapping().hasPrimitiveType()) {
          writer.newLine();
          field.writeJavaDoc(writer,indent);
          writer.write(Utils.tab(indent) + "public void set" + Utils.capFirst(field.getJavaName())+ "("+ baseType.getValueMapping().getPrimitiveType()+ " "+ Utils.toJavaName(field.getName())+ ");");
          writer.newLine();
        }
      }
      writer.newLine();
      field.writeJavaDoc(writer,indent);
      writer.write(Utils.tab(1) + "public void set" + Utils.capFirst(field.getJavaName())+ "("+ fieldClass.typeMapping+ " "+ Utils.toJavaName(field.getName())+ ");");
      writer.newLine();
      TypeRegistry.JavaTypeMapping returnType=fieldClass.isPrimitive() ? fieldClass.getValueMapping() : fieldClass.typeMapping;
      writer.newLine();
      field.writeJavaDoc(writer,indent);
      writer.write(Utils.tab(indent) + "public " + returnType+ " get"+ Utils.capFirst(field.getJavaName())+ "();");
      writer.newLine();
    }
  }
  if (isMap()) {
    doc.writeJavaDoc(writer,indent);
    writer.write(Utils.tab(indent) + "public void put(" + getMapKeyType()+ " key, "+ getMapValueType()+ " value);");
    writer.newLine();
    writer.write(Utils.tab(indent) + "public " + getMapValueType()+ " get(Object key);");
    writer.newLine();
  }
 else   if (isList()) {
    doc.writeJavaDoc(writer,indent);
    writer.write(Utils.tab(indent) + "public void set(int index, " + TypeRegistry.any().typeMapping+ " value);");
    writer.newLine();
    writer.write(Utils.tab(indent) + "public " + TypeRegistry.any().typeMapping+ " get(int index);");
    writer.newLine();
    writer.write(Utils.tab(indent) + "public int getListCount();");
    writer.newLine();
  }
  if (isPrimitive() && !isMutable()) {
    writer.newLine();
    writer.write(Utils.tab(1) + "public " + valueMapping+ " getValue();");
    writer.newLine();
  }
}
