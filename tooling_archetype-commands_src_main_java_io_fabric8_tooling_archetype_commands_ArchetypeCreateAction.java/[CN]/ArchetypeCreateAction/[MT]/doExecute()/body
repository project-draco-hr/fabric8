{
  Archetype archetype=archetypeService.getArchetypeByArtifact(archetypeGAV);
  if (archetype == null) {
    archetypeService.getArchetype(archetypeGAV);
  }
  if (archetype != null) {
    Preferences preferences=Preferences.userNodeForPackage(getClass());
    if (target == null) {
      target=new File(preferences.get("target",DEFAULT_TARGET));
    }
 else {
      preferences.put("target",target.getCanonicalPath());
    }
    File archetypeFile=fetchArchetype(archetype);
    if (archetypeFile == null || !archetypeFile.exists()) {
      System.err.println("No archetype found for \"" + archetypeGAV + "\" coordinates");
      return null;
    }
    String defaultGroupId="io.fabric8";
    String defaultArtifactId=archetype.artifactId + "-example";
    String defaultVersion="1.0-SNAPSHOT";
    System.out.println("----- Configure archetype -----");
    String groupId=ShellUtils.readLine(session,String.format("Define value for property 'groupId' (%s): ",defaultGroupId),false);
    String artifactId=ShellUtils.readLine(session,String.format("Define value for property 'artifactId' (%s): ",defaultArtifactId),false);
    String version=ShellUtils.readLine(session,String.format("Define value for property 'version' (%s): ",defaultVersion),false);
    String defaultPackageName=(groupId + "." + artifactId).replaceAll("-",".");
    String packageName=ShellUtils.readLine(session,String.format("Define value for property 'package' (%s): ",defaultPackageName),false);
    if (directoryName == null) {
      String defaultDirectoryName=isNullOrBlank(artifactId) ? defaultArtifactId : artifactId;
      directoryName=ShellUtils.readLine(session,String.format("Define value for property 'directoryName' (%s): ",defaultDirectoryName),false);
    }
    groupId=isNullOrBlank(groupId) ? defaultGroupId : groupId;
    artifactId=isNullOrBlank(artifactId) ? defaultArtifactId : artifactId;
    version=isNullOrBlank(version) ? defaultVersion : version;
    packageName=isNullOrBlank(packageName) ? defaultPackageName : packageName;
    directoryName=isNullOrBlank(directoryName) ? artifactId : directoryName;
    File childDir=new File(target,directoryName);
    ArchetypeHelper helper=new ArchetypeHelper(archetypeFile,childDir,groupId,artifactId,version);
    helper.setPackageName(packageName);
    Map<String,String> properties=helper.parseProperties();
    if (!properties.isEmpty()) {
      System.out.println("----- Configure additional properties -----");
      for (      String key : properties.keySet()) {
        String p=ShellUtils.readLine(session,String.format("Define value for property '%s' (%s): ",key,properties.get(key)),false);
        p=p == null || p.trim().equals("") ? properties.get(key) : p;
        properties.put(key,p);
      }
    }
    helper.setOverrideProperties(properties);
    String confirm=ShellUtils.readLine(session,"Create project: (Y): ",false);
    confirm=confirm == null || confirm.trim().equals("") ? "Y" : confirm;
    if ("Y".equalsIgnoreCase(confirm)) {
      System.out.println("----------------------------------------------------------------------------");
      System.out.println(String.format("Creating project in directory: %s",childDir.getCanonicalPath()));
      helper.execute();
      System.out.println("Project created successfully");
      System.out.println("");
    }
 else {
      System.out.println("----------------------------------------------------------------------------");
      System.out.println("Creating project aborted!");
      System.out.println("");
    }
  }
 else {
    System.err.println("No archetype found for: " + archetypeGAV);
  }
  return null;
}
