{
  Preferences preferences=Preferences.userNodeForPackage(getClass());
  String current=preferences.get(ArchetypeWorkspace.PREFERENCE_WORKSPACE,null);
  if (current == null) {
    System.out.println("No workspace location has been set.");
    System.out.println("Use the archetype-workspace command to set a workspace first.");
    System.out.println("");
    return null;
  }
  File target=new File(current);
  Archetype archetype=null;
  if (!isNullOrBlank(archetypeOrFilter)) {
    archetype=archetypeService.getArchetypeByArtifact(archetypeOrFilter);
    if (archetype == null) {
      archetype=archetypeService.getArchetype(archetypeOrFilter);
    }
  }
  while (archetype == null) {
    List<Archetype> archetypes=archetypeService.listArchetypes(archetypeOrFilter,true);
    System.out.println("Choose archetype:");
    Iterator<Archetype> it=archetypes.iterator();
    int i=0;
    while (it.hasNext()) {
      Archetype select=it.next();
      System.out.println(String.format("%4d: -> %-50s %s",++i,select.artifactId,select.description));
    }
    boolean choosing=true;
    while (choosing) {
      String choose=ShellUtils.readLine(session,String.format("Choose a number or apply filter (case insensitive): %d: ",i),false);
      if (Strings.isNullOrBlank(choose)) {
        choose="" + i;
      }
      try {
        int no=Integer.valueOf(choose);
        if (no >= 1 && no <= archetypes.size()) {
          archetype=archetypes.get(no - 1);
          break;
        }
 else {
          System.out.println("Number " + no + " out of range. Please try again!");
          continue;
        }
      }
 catch (      NumberFormatException e) {
        archetypeOrFilter=choose;
        choosing=false;
        archetype=null;
      }
    }
  }
  File archetypeFile=fetchArchetype(archetype);
  if (archetypeFile == null || !archetypeFile.exists()) {
    System.err.println("No archetype found for \"" + archetypeOrFilter + "\" coordinates");
    return null;
  }
  System.out.println("----------------------------------------------------------------------------");
  System.out.println("Using archetype: " + archetype.artifactId);
  String defaultGroupId="io.fabric8";
  String defaultArtifactId=archetype.artifactId + "-example";
  String defaultVersion="1.0-SNAPSHOT";
  System.out.println("----- Configure archetype -----");
  String groupId=ShellUtils.readLine(session,String.format("Define value for property 'groupId' (%s): ",defaultGroupId),false);
  String artifactId=ShellUtils.readLine(session,String.format("Define value for property 'artifactId' (%s): ",defaultArtifactId),false);
  String version=ShellUtils.readLine(session,String.format("Define value for property 'version' (%s): ",defaultVersion),false);
  String defaultPackageName=(groupId + "." + artifactId).replaceAll("-",".");
  String packageName=ShellUtils.readLine(session,String.format("Define value for property 'package' (%s): ",defaultPackageName),false);
  if (directoryName == null) {
    String defaultDirectoryName=isNullOrBlank(artifactId) ? defaultArtifactId : artifactId;
    directoryName=ShellUtils.readLine(session,String.format("Define value for property 'directoryName' (%s): ",defaultDirectoryName),false);
  }
  groupId=isNullOrBlank(groupId) ? defaultGroupId : groupId;
  artifactId=isNullOrBlank(artifactId) ? defaultArtifactId : artifactId;
  version=isNullOrBlank(version) ? defaultVersion : version;
  packageName=isNullOrBlank(packageName) ? defaultPackageName : packageName;
  directoryName=isNullOrBlank(directoryName) ? artifactId : directoryName;
  File childDir=new File(target,directoryName);
  ArchetypeHelper helper=new ArchetypeHelper(archetypeFile,childDir,groupId,artifactId,version);
  helper.setPackageName(packageName);
  Map<String,String> properties=helper.parseProperties();
  if (!properties.isEmpty()) {
    System.out.println("----- Additional properties -----");
    for (    String key : properties.keySet()) {
      System.out.println(String.format("Using property '%s' (%s): ",key,properties.get(key)));
    }
    boolean choosing=true;
    while (choosing) {
      String confirm=ShellUtils.readLine(session,"Confirm additional properties configuration: (Y): ",false);
      confirm=confirm == null || confirm.trim().equals("") ? "Y" : confirm;
      if (!"Y".equalsIgnoreCase(confirm)) {
        if (!properties.isEmpty()) {
          System.out.println("----- Configure additional properties -----");
          for (          String key : properties.keySet()) {
            String p=ShellUtils.readLine(session,String.format("Define value for property '%s' (%s): ",key,properties.get(key)),false);
            p=p == null || p.trim().equals("") ? properties.get(key) : p;
            properties.put(key,p);
          }
        }
      }
 else {
        choosing=false;
      }
    }
    helper.setOverrideProperties(properties);
  }
  String confirm=ShellUtils.readLine(session,"Create project: (Y): ",false);
  confirm=confirm == null || confirm.trim().equals("") ? "Y" : confirm;
  if ("Y".equalsIgnoreCase(confirm)) {
    System.out.println("----------------------------------------------------------------------------");
    System.out.println(String.format("Creating project in directory: %s",childDir.getCanonicalPath()));
    helper.execute();
    System.out.println("Project created successfully");
    System.out.println("");
  }
 else {
    System.out.println("----------------------------------------------------------------------------");
    System.out.println("Creating project aborted!");
    System.out.println("");
  }
  return null;
}
