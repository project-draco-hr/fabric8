{
  FabricService fabricService;
  ConfigurationAdmin configAdmin;
synchronized (this) {
    fabricService=this.fabricService;
    configAdmin=this.configAdmin.get();
  }
  if (fabricService == null || configAdmin == null) {
    return;
  }
  try {
    Profile profile=fabricService.getCurrentContainer().getOverlayProfile();
    final Map<String,Map<String,String>> pidProperties=profile.getConfigurations();
    List<Configuration> configs=asList(configAdmin.listConfigurations("(" + FABRIC_ZOOKEEPER_PID + "=*)"));
    for (    String pid : pidProperties.keySet()) {
      Hashtable<String,String> c=new Hashtable<String,String>();
      c.putAll(pidProperties.get(pid));
      String p[]=parsePid(pid);
      Configuration config=getConfiguration(configAdmin,pid,p[0],p[1]);
      configs.remove(config);
      Dictionary props=config.getProperties();
      Hashtable old=props != null ? new Hashtable() : null;
      if (pid.equals(AGENT_PID)) {
        c.put(LAST_MODIFIED,String.valueOf(profile.getLastModified()));
      }
      if (old != null) {
        for (Enumeration e=props.keys(); e.hasMoreElements(); ) {
          Object key=e.nextElement();
          Object val=props.get(key);
          old.put(key,val);
        }
        old.remove(FABRIC_ZOOKEEPER_PID);
        old.remove(org.osgi.framework.Constants.SERVICE_PID);
        old.remove(ConfigurationAdmin.SERVICE_FACTORYPID);
      }
      if (!c.equals(old)) {
        LOGGER.info("Updating configuration {}",config.getPid());
        c.put(FABRIC_ZOOKEEPER_PID,pid);
        if (config.getBundleLocation() != null) {
          config.setBundleLocation(null);
        }
        config.update(c);
      }
 else {
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug("Ignoring configuration {} (no changes)",config.getPid());
        }
      }
    }
    for (    Configuration config : configs) {
      LOGGER.info("Deleting configuration {}",config.getPid());
      fabricService.getPortService().unRegisterPort(fabricService.getCurrentContainer(),config.getPid());
      config.delete();
    }
  }
 catch (  Throwable e) {
    if (this.fabricService == fabricService && this.configAdmin == configAdmin) {
      LOGGER.warn("Exception when tracking configurations. This exception will be ignored.",e);
    }
 else {
      LOGGER.debug("Exception when tracking configurations. This exception will be ignored because services have been unbound in the mean time.",e);
    }
  }
}
