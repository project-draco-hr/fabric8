{
  Set<String> dontSubstituteKeys=new HashSet<String>(Arrays.asList("id","container"));
  List<String> children=getChildrenSafe(curator,path);
  for (  String child : children) {
    String childPath=path + "/" + child;
    byte[] data=curator.getData().forPath(childPath);
    if (data != null && data.length > 0) {
      String text=new String(data).trim();
      if (!text.isEmpty()) {
        Map<String,Object> map=mapper.readValue(data,HashMap.class);
        if (map != null) {
          Map<String,Object> substitutedMap=new HashMap<String,Object>();
          Set<Map.Entry<String,Object>> set=map.entrySet();
          for (          Map.Entry<String,Object> entry : set) {
            String key=entry.getKey();
            Object value=entry.getValue();
            if (value != null) {
              if (value instanceof String && !dontSubstituteKeys.contains(key)) {
                value=getSubstitutedData(curator,value.toString());
              }
 else               if (value instanceof List) {
                List list=(List)value;
                List<String> substitutedValues=new ArrayList<String>();
                value=substitutedValues;
                for (                Object item : list) {
                  String serviceText=getSubstitutedData(curator,item.toString());
                  substitutedValues.add(serviceText);
                }
              }
              substitutedMap.put(key,value);
            }
          }
          answer.put(child,substitutedMap);
        }
      }
    }
 else {
      Map<String,Object> map=new HashMap<String,Object>();
      addChildrenToMap(map,childPath,curator,mapper);
      if (!map.isEmpty()) {
        answer.put(child,map);
      }
    }
  }
}
