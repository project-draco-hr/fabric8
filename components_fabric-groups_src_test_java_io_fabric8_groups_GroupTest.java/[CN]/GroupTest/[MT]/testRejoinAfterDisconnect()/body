{
  int port=AvailablePortFinder.getNextAvailable(3020);
  CuratorFramework curator=CuratorFrameworkFactory.builder().connectString("localhost:" + port).retryPolicy(new RetryNTimes(10,100)).build();
  curator.start();
  NIOServerCnxnFactory cnxnFactory=startZooKeeper(port);
  Group<NodeState> group=new ZooKeeperGroup<NodeState>(curator,"/singletons/test" + System.currentTimeMillis(),NodeState.class);
  group.add(listener);
  group.update(new NodeState("foo"));
  group.start();
  GroupCondition groupCondition=new GroupCondition();
  group.add(groupCondition);
  curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
  assertTrue(groupCondition.waitForConnected(5,TimeUnit.SECONDS));
  assertTrue(groupCondition.waitForMaster(5,TimeUnit.SECONDS));
  cnxnFactory.shutdown();
  cnxnFactory.join();
  groupCondition.waitForDisconnected(5,TimeUnit.SECONDS);
  group.remove(groupCondition);
  assertFalse(group.isConnected());
  assertFalse(group.isMaster());
  groupCondition=new GroupCondition();
  group.add(groupCondition);
  cnxnFactory=startZooKeeper(port);
  curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
  curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
  assertTrue(groupCondition.waitForConnected(5,TimeUnit.SECONDS));
  assertTrue(groupCondition.waitForMaster(5,TimeUnit.SECONDS));
  group.close();
  curator.close();
  cnxnFactory.shutdown();
  cnxnFactory.join();
}
