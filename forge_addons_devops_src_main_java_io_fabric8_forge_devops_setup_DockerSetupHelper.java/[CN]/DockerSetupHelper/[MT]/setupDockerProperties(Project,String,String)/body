{
  String packaging=getProjectPackaging(project);
  boolean springBoot=hasSpringBootMavenPlugin(project);
  boolean war=packaging != null && packaging.equals("war");
  boolean bundle=packaging != null && packaging.equals("bundle");
  boolean jar=packaging != null && packaging.equals("jar");
  MavenFacet maven=project.getFacet(MavenFacet.class);
  Model pom=maven.getModel();
  Properties properties=pom.getProperties();
  boolean updated=false;
  if (Strings.isNotBlank(fromImage)) {
    String fullDockerFromName=fromImage;
    if (!fromImage.startsWith(dockerFromImagePrefix) || fromImage.split("/").length <= 2) {
      fullDockerFromName=dockerFromImagePrefix + fromImage;
    }
    updated=MavenHelpers.updatePomProperty(properties,"docker.from",fullDockerFromName,updated);
  }
  updated=MavenHelpers.updatePomProperty(properties,"docker.image",organization + "/${project.artifactId}:${project.version}",updated);
  updated=MavenHelpers.updatePomProperty(properties,"docker.port.container.jolokia","8778",updated);
  if (springBoot) {
    updated=MavenHelpers.updatePomProperty(properties,"docker.assemblyDescriptorRef","artifact",updated);
    updated=MavenHelpers.updatePomProperty(properties,"docker.port.container.http","8080",updated);
  }
 else   if (war) {
    updated=MavenHelpers.updatePomProperty(properties,"docker.assemblyDescriptorRef","rootWar",updated);
    updated=MavenHelpers.updatePomProperty(properties,"docker.port.container.http","8080",updated);
  }
 else   if (bundle) {
    updated=MavenHelpers.updatePomProperty(properties,"docker.assemblyDescriptorRef","artifact-with-dependencies",updated);
    updated=MavenHelpers.updatePomProperty(properties,"docker.port.container.http","8181",updated);
  }
 else {
    updated=MavenHelpers.updatePomProperty(properties,"docker.assemblyDescriptorRef","artifact-with-dependencies",updated);
  }
  if (updated) {
    maven.setModel(pom);
  }
}
