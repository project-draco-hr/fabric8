{
  MavenFacet maven=project.getFacet(MavenFacet.class);
  Model pom=maven.getModel();
  boolean springBoot=hasSpringBootMavenPlugin(project);
  String packaging=getProjectPackaging(project);
  boolean war=packaging != null && packaging.equals("war");
  boolean bundle=packaging != null && packaging.equals("bundle");
  boolean jar=packaging != null && packaging.equals("jar");
  Map<String,String> envs=new LinkedHashMap<>();
  if (springBoot) {
    envs.put("JAR","${project.artifactId}-${project.version}.war");
    envs.put("JAVA_OPTIONS","-Djava.security.egd=/dev/./urandom");
  }
 else   if (war) {
    envs.put("CATALINA_OPTS","-javaagent:/opt/tomcat/jolokia-agent.jar=host=0.0.0.0,port=8778");
  }
 else   if (jar && main != null) {
    envs.put("JAVA_MAIN_CLASS",main);
  }
  MavenPluginBuilder pluginBuilder;
  ConfigurationBuilder configurationBuilder;
  MavenPlugin plugin=MavenHelpers.findPlugin(project,"org.jolokia","docker-maven-plugin");
  if (plugin != null) {
    pluginBuilder=MavenPluginBuilder.create(plugin);
    Configuration config=plugin.getConfig();
    if (config != null) {
      configurationBuilder=ConfigurationBuilder.create(config,pluginBuilder);
    }
 else {
      configurationBuilder=ConfigurationBuilder.create(pluginBuilder);
    }
  }
 else {
    pluginBuilder=MavenPluginBuilder.create().setCoordinate(createCoordinate("org.jolokia","docker-maven-plugin",VersionHelper.dockerVersion()));
    configurationBuilder=pluginBuilder.createConfiguration();
  }
  String commandShell=null;
  if (bundle) {
    commandShell="/usr/bin/deploy-and-start";
  }
  setupDockerConfiguration(configurationBuilder,envs,commandShell);
  MavenPluginFacet pluginFacet=project.getFacet(MavenPluginFacet.class);
  pluginFacet.addPlugin(pluginBuilder);
  setupDockerProperties(project,fromImage);
}
