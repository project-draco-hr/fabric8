{
  System.err.println(executeCommand("fabric:create -n"));
  FabricService fabricService=getFabricService();
  AdminService adminService=ServiceLocator.getOsgiService(AdminService.class);
  String version=System.getProperty("fabric.version");
  System.err.println(executeCommand("admin:create --featureURL mvn:io.fabric8/fuse-fabric/" + version + "/xml/features --feature fabric-git --feature fabric-agent --feature fabric-boot-commands child1"));
  System.err.println(executeCommand("admin:create --featureURL mvn:io.fabric8/fuse-fabric/" + version + "/xml/features --feature fabric-git --feature fabric-agent --feature fabric-boot-commands child2"));
  try {
    System.err.println(executeCommand("admin:start child1"));
    System.err.println(executeCommand("admin:start child2"));
    Provision.instanceStarted(Arrays.asList("child1","child2"),PROVISION_TIMEOUT);
    System.err.println(executeCommand("admin:list"));
    String joinCommand="fabric:join -f --zookeeper-password " + fabricService.getZookeeperPassword() + " "+ fabricService.getZookeeperUrl();
    String response="";
    for (int i=0; i < 10 && !response.contains("true"); i++) {
      response=executeCommand("ssh -l admin -P admin -p " + adminService.getInstance("child1").getSshPort() + " localhost "+ WAIT_FOR_JOIN_SERVICE);
      Thread.sleep(1000);
    }
    response="";
    for (int i=0; i < 10 && !response.contains("true"); i++) {
      response=executeCommand("ssh -l admin -P admin -p " + adminService.getInstance("child2").getSshPort() + " localhost "+ WAIT_FOR_JOIN_SERVICE);
      Thread.sleep(1000);
    }
    System.err.println(executeCommand("ssh -l admin -P admin -p " + adminService.getInstance("child1").getSshPort() + " localhost "+ joinCommand));
    System.err.println(executeCommand("ssh -l admin -P admin -p " + adminService.getInstance("child2").getSshPort() + " localhost "+ joinCommand));
    Provision.containersExist(Arrays.asList("child1","child2"),PROVISION_TIMEOUT);
    Container child1=fabricService.getContainer("child1");
    Container child2=fabricService.getContainer("child2");
    Provision.containersStatus(Arrays.asList(child1,child2),"success",PROVISION_TIMEOUT);
    addToEnsemble(child1,child2);
    System.err.println(executeCommand("fabric:container-list"));
    removeFromEnsemble(child1,child2);
    System.err.println(executeCommand("fabric:container-list"));
  }
  finally {
    System.err.println(executeCommand("admin:stop child1"));
    System.err.println(executeCommand("admin:stop child2"));
  }
}
