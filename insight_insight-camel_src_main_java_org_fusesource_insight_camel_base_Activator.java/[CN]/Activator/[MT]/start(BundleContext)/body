{
  this.bundleContext=context;
  storageProxy.setContext(context);
  storageProxy.init();
  mbeanServer=lookupMBeanServer();
  if (mbeanServer != null) {
    for (    ContainerStrategy strategy : strategies.values()) {
      try {
        mbeanServer.registerMBean(strategy,getObjectName(strategy));
      }
 catch (      Exception e) {
        LOG.warn("An error occured during mbean server unregistration: " + e,e);
      }
    }
  }
  Container.Instance.set(this);
  Hashtable<String,Object> props=new Hashtable<String,Object>();
  props.put(Constants.SERVICE_PID,INSIGHT_CAMEL_PID);
  registration=bundleContext.registerService(ManagedService.class,this,props);
  commandRegistrations=Arrays.asList(SimpleCommand.export(bundleContext,AuditorCommand.class),SimpleCommand.export(bundleContext,BreadcrumbsCommand.class),SimpleCommand.export(bundleContext,ProfilerCommand.class),SimpleCommand.export(bundleContext,TracerCommand.class));
}
