{
  activateComponent();
  try {
    this.period=Integer.parseInt(properties != null && properties.containsKey("period") ? properties.get("period") : "1000");
    this.executors=Executors.newSingleThreadScheduledExecutor();
    group=new ZooKeeperGroup<GitZkBridgeNode>(curator.get(),"/fabric/registry/clusters/gitzkbridge",GitZkBridgeNode.class);
    group.add(this);
    group.update(createState());
    group.start();
    executors.scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        try {
          String login=getContainerLogin();
          String token=generateContainerToken(curator.get());
          CredentialsProvider cp=new UsernamePasswordCredentialsProvider(login,token);
          if (group.isMaster()) {
            update(gitService.get().get(),curator.get(),cp);
          }
 else {
            updateLocal(gitService.get().get(),curator.get(),cp);
          }
        }
 catch (        Exception e) {
          if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Unable to sync git/zookeeper",e);
          }
 else {
            LOGGER.info("Unable to sync git / zookeeper: " + e.getClass().getName() + ": "+ e.getMessage());
          }
        }
      }
    }
,period,period,TimeUnit.MILLISECONDS);
  }
 catch (  RuntimeException rte) {
    deactivateComponent();
    throw rte;
  }
}
