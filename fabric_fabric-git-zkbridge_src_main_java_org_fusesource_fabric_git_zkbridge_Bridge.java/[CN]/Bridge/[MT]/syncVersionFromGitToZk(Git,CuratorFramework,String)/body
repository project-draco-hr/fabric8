{
  Properties versionProps=loadProps(git,METADATA);
  setData(curator,zkNode,toString(versionProps));
  List<String> gitProfiles=list(git.getRepository().getWorkTree());
  gitProfiles.remove(".git");
  gitProfiles.remove(METADATA);
  gitProfiles.remove(CONTAINERS_PROPERTIES);
  List<String> zkProfiles=getChildren(curator,zkNode + "/profiles");
  for (  String profile : gitProfiles) {
    Properties profileProps=loadProps(git,profile + "/" + METADATA);
    setData(curator,zkNode + "/profiles/" + profile,toString(profileProps));
    List<String> zkConfigs=getChildren(curator,zkNode + "/profiles/" + profile);
    List<String> gitConfigs=list(new File(git.getRepository().getWorkTree(),profile));
    gitConfigs.remove(METADATA);
    for (    String file : gitConfigs) {
      byte[] data=read(new File(git.getRepository().getWorkTree(),profile + "/" + file));
      setData(curator,zkNode + "/profiles/" + profile+ "/"+ file,data);
      zkConfigs.remove(file);
    }
    for (    String config : zkConfigs) {
      deleteSafe(curator,zkNode + "/profiles/" + profile+ "/"+ config);
    }
    zkProfiles.remove(profile);
  }
  for (  String profile : zkProfiles) {
    deleteSafe(curator,zkNode + "/profiles/" + profile);
  }
  Properties containerProps=loadProps(git,CONTAINERS_PROPERTIES);
  for (  String container : containerProps.keySet()) {
    setData(curator,zkNode + "/containers/" + container,containerProps.getProperty(container));
  }
  for (  String container : getChildren(curator,zkNode + "/containers")) {
    if (!containerProps.containsKey(container)) {
      deleteSafe(curator,zkNode + "/containers/" + container);
    }
  }
}
