{
  containerName=Strings.isNotBlank(containerName) ? containerName : runtimeProperties.getRuntimeIdentity();
  validateContainerName(containerName);
  if (!containerExists(containerName)) {
    System.out.println("Container " + containerName + " does not exists!");
    return null;
  }
  Container container=fabricService.getContainer(containerName);
  System.out.println(String.format(FORMAT,"Name:",container.getId()));
  System.out.println(String.format(FORMAT,"Version:",container.getVersionId()));
  System.out.println(String.format(FORMAT,"Connected:",container.isAlive()));
  System.out.println(String.format(FORMAT,"Type:",emptyIfNull(container.getType())));
  System.out.println(String.format(FORMAT,"Root:",container.isRoot()));
  System.out.println(String.format(FORMAT,"Ensemble Server:",container.isEnsembleServer()));
  System.out.println(String.format(FORMAT,"Managed:",container.isManaged()));
  Long processId=container.getProcessId();
  System.out.println(String.format(FORMAT,"Process ID:",((processId != null) ? processId.toString() : "")));
  if (Strings.isNotBlank(container.getLocation())) {
    System.out.println(String.format(FORMAT,"Location:",emptyIfNull(container.getLocation())));
  }
  System.out.println(String.format(FORMAT,"Resolver:",emptyIfNull(container.getResolver())));
  System.out.println(String.format(FORMAT,"Network Address:",emptyIfNull(container.getIp())));
  System.out.println(String.format(FORMAT,"Local Network Address:",emptyIfNull(container.getLocalIp())));
  System.out.println(String.format(FORMAT,"Public Network Address:",emptyIfNull(container.getPublicIp())));
  System.out.println(String.format(FORMAT,"Local Hostname:",emptyIfNull(container.getLocalHostname())));
  System.out.println(String.format(FORMAT,"Public Hostname:",emptyIfNull(container.getPublicHostname())));
  System.out.println(String.format(FORMAT,"SSH Url:",emptyIfNull(container.getSshUrl())));
  System.out.println(String.format(FORMAT,"JMX Url:",emptyIfNull(container.getJmxUrl())));
  System.out.println(String.format(FORMAT,"Http Url:",emptyIfNull(container.getHttpUrl())));
  System.out.println(String.format(FORMAT,"Jolokia Url:",emptyIfNull(container.getJolokiaUrl())));
  String debugPort=container.getDebugPort();
  if (Strings.isNotBlank(debugPort)) {
    System.out.println(String.format(FORMAT,"Debug Port:",debugPort));
  }
  if (verbose != null && verbose) {
    Profile[] profiles=container.getProfiles();
    for (int i=0; i < profiles.length; i++) {
      String id=profiles[i].getId();
      if (i == 0) {
        System.out.println(String.format(FORMAT,"Profiles:",id));
      }
 else {
        System.out.println(String.format(FORMAT,"",id));
      }
    }
    Container parent=container.getParent();
    if (parent != null) {
      System.out.println(String.format(FORMAT,"Parent:",parent.getId()));
    }
    Container[] children=container.getChildren();
    for (int i=0; i < children.length; i++) {
      String id=children[i].getId();
      if (i == 0) {
        System.out.println(String.format(FORMAT,"Children:",id));
      }
 else {
        System.out.println(String.format(FORMAT,"",id));
      }
    }
  }
  String blueprintStatus=dataStore.getContainerAttribute(containerName,DataStore.ContainerAttribute.BlueprintStatus,"",false,false);
  String springStatus=dataStore.getContainerAttribute(containerName,DataStore.ContainerAttribute.SpringStatus,"",false,false);
  if (!blueprintStatus.isEmpty()) {
    System.out.println(String.format(FORMAT,"Blueprint Status:",blueprintStatus.toLowerCase()));
  }
  if (!springStatus.isEmpty()) {
    System.out.println(String.format(FORMAT,"Spring Status:",springStatus.toLowerCase()));
  }
  System.out.println(String.format(FORMAT,"Provision Status:",container.getProvisionStatus()));
  if (container.getProvisionException() != null) {
    System.out.println(String.format(FORMAT,"Provision Error:",container.getProvisionException()));
  }
  return null;
}
