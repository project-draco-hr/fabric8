{
  assertEquals("Should have a single NamespaceHandler",new Service("org.apache.aries.blueprint.NamespaceHandler"),Services.parseHeader("org.apache.aries.blueprint.NamespaceHandler").iterator().next());
  Set<Service> services=Services.parseHeader("org.apache.aries.blueprint.NamespaceHandler;osgi.service.blueprint.namespace=\"\"," + "org.apache.aries.blueprint.NamespaceHandler;osgi.service.blueprint.namespace=\"http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0\"," + "org.apache.aries.blueprint.ParserService");
  assertTrue("Should have a plain NamespaceHandler",services.contains(new Service("org.apache.aries.blueprint.NamespaceHandler")));
  assertTrue("Should have a plain ParserService",services.contains(new Service("org.apache.aries.blueprint.ParserService")));
  Map<String,String> properties=new HashMap<String,String>();
  properties.put("osgi.service.blueprint.namespace","http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0");
  assertTrue("Should have a NamespaceHandler with properties",services.contains(new Service("org.apache.aries.blueprint.NamespaceHandler",properties)));
  assertEquals("A null header should return an empty set",0,Services.parseHeader(null).size());
  assertEquals("A blank header should return an empty set",0,Services.parseHeader("").size());
}
