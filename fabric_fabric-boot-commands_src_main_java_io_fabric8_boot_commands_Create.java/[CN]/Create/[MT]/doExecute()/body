{
  String name=System.getProperty(SystemProperties.KARAF_NAME);
  CreateEnsembleOptions.Builder builder=CreateEnsembleOptions.builder().zooKeeperServerTickTime(zooKeeperTickTime).zooKeeperServerInitLimit(zooKeeperInitLimit).zooKeeperServerSyncLimit(zooKeeperSyncLimit).zooKeeperServerDataDir(zooKeeperDataDir).fromRuntimeProperties(new DefaultRuntimeProperties()).provisionTimeout(provisionTimeout).waitForProvision(waitForProvisioning);
  builder.version(version);
  if (containers == null || containers.isEmpty()) {
    containers=Arrays.asList(name);
  }
  if (clean) {
    bootstrap.clean();
  }
  if (!noImport && importDir != null) {
    builder.autoImportEnabled(true);
    builder.importPath(importDir);
  }
  if (globalResolver != null) {
    builder.globalResolver(globalResolver);
    System.setProperty(ZkDefs.GLOBAL_RESOLVER_PROPERTY,globalResolver);
  }
  if (resolver != null) {
    builder.resolver(resolver);
    System.setProperty(ZkDefs.LOCAL_RESOLVER_PROPERTY,resolver);
  }
  if (manualIp != null) {
    builder.manualIp(manualIp);
    System.setProperty(ZkDefs.MANUAL_IP,manualIp);
  }
  if (bindAddress != null) {
    if (!bindAddress.contains(":")) {
      builder.bindAddress(bindAddress);
      System.setProperty(ZkDefs.BIND_ADDRESS,bindAddress);
    }
 else {
      String[] parts=bindAddress.split(":");
      builder.bindAddress(parts[0]);
      builder.zooKeeperServerPort(Integer.parseInt(parts[1]));
      System.setProperty(ZkDefs.BIND_ADDRESS,parts[0]);
    }
  }
  if (externalGitUrl != null) {
    builder.dataStoreProperty(GIT_REMOTE_URL,externalGitUrl);
  }
  if (externalGitUser != null) {
    builder.dataStoreProperty(GIT_REMOTE_USER,externalGitUser);
  }
  if (externalGitPassword != null) {
    builder.dataStoreProperty(GIT_REMOTE_PASSWORD,externalGitPassword);
  }
  if (profiles != null && profiles.size() > 0) {
    builder.profiles(profiles);
  }
  if (nonManaged) {
    builder.agentEnabled(false);
  }
 else {
    builder.agentEnabled(true);
  }
  builder.minimumPort(minimumPort);
  builder.minimumPort(maximumPort);
  System.setProperty(ZkDefs.MINIMUM_PORT,String.valueOf(minimumPort));
  System.setProperty(ZkDefs.MAXIMUM_PORT,String.valueOf(maximumPort));
  newUser=newUser != null ? newUser : ShellUtils.retrieveFabricUser(session);
  newUserPassword=newUserPassword != null ? newUserPassword : ShellUtils.retrieveFabricUserPassword(session);
  Properties userProps=new Properties(new File(System.getProperty("karaf.home") + "/etc/users.properties"));
  if (userProps.isEmpty()) {
    String[] credentials=promptForNewUser(newUser,newUserPassword);
    newUser=credentials[0];
    newUserPassword=credentials[1];
  }
 else   if (newUser == null || newUserPassword == null) {
    newUser="" + userProps.keySet().iterator().next();
    newUserPassword="" + userProps.get(newUser);
    if (newUserPassword.contains(ROLE_DELIMITER)) {
      newUserPassword=newUserPassword.substring(0,newUserPassword.indexOf(ROLE_DELIMITER));
    }
  }
  if (Strings.isNullOrEmpty(newUser)) {
    System.out.println("No user specified. Cannot create a new fabric ensemble.");
    return null;
  }
  StringBuilder sb=new StringBuilder();
  if (session != null) {
    ShellUtils.storeFabricCredentials(session,newUser,newUserPassword);
  }
  if (generateZookeeperPassword) {
  }
 else   if (zookeeperPassword == null) {
    zookeeperPassword=System.getProperty(CreateEnsembleOptions.ZOOKEEPER_PASSWORD,newUserPassword);
    builder.zookeeperPassword(zookeeperPassword);
  }
 else {
    builder.zookeeperPassword(zookeeperPassword);
  }
  CreateEnsembleOptions options=builder.users(userProps).withUser(newUser,newUserPassword,newUserRole).build();
  if (containers.size() == 1 && containers.contains(name)) {
    bootstrap.create(options);
  }
 else {
    service.createCluster(containers,options);
  }
  ShellUtils.storeZookeeperPassword(session,options.getZookeeperPassword());
  if (zookeeperPassword == null && !generateZookeeperPassword) {
    sb.append("Zookeeper password: (reusing users ").append(newUser).append(" password:").append(options.getZookeeperPassword()).append(")\n");
    sb.append("(You can use the --zookeeper-password / --generate-zookeeper-password option to specify one.)\n");
  }
 else   if (generateZookeeperPassword) {
    sb.append("Generated zookeeper password:").append(options.getZookeeperPassword());
  }
 else {
    sb.append("Using specified zookeeper password:").append(options.getZookeeperPassword());
  }
  System.out.println(sb.toString());
  if (!nonManaged && !waitForProvisioning) {
    System.out.println("It may take a couple of seconds for the container to provision...");
    System.out.println("You can use the --wait-for-provisioning option, if you want this command to block until the container is provisioned.");
  }
  return null;
}
