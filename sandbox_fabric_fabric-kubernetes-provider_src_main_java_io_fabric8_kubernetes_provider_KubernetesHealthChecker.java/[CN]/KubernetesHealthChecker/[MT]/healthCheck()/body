{
  FabricService service=fabricService.get();
  Kubernetes kubernetes=getKubernetes();
  if (kubernetes != null && service != null) {
    try {
      Map<String,Pod> podMap=KubernetesHelper.getPodMap(kubernetes);
      Container[] containerArray=service.getContainers();
      Collection<Pod> pods=podMap.values();
      if (!pods.isEmpty()) {
        Map<String,Container> containerMap=createPodIdToContainerMap(containerArray);
        for (        Pod item : pods) {
          String podId=item.getId();
          PodState currentState=item.getPodState();
          if (currentState != null) {
            String host=currentState.getHost();
            String hostIp=currentState.getHost();
            String status=currentState.getStatus();
            Container container=containerMap.remove(podId);
            if (container != null) {
              PodState desiredState=item.getPodState();
              if (desiredState != null) {
                ContainerManifestSchema manifest=desiredState.getContainerManifest();
                if (manifest != null) {
                  List<Container> containers=manifest.getContainers();
                  for (                  Container manifestContainer : containers) {
                  }
                }
              }
              if (!container.isAlive()) {
                container.setAlive(true);
              }
              if (status != null) {
                String result=currentStatusStringToContainerProvisionResult(status);
                if (isProvisionSuccess(result)) {
                  keepAliveCheck(service,status,container,currentState,item);
                }
 else {
                  if (!result.equals(container.getProvisionResult())) {
                    container.setProvisionResult(result);
                  }
                }
              }
 else {
                if (container.isAlive()) {
                  container.setAlive(false);
                }
                if (!status.equals(container.getProvisionResult())) {
                  container.setProvisionResult(status);
                }
              }
            }
          }
        }
        Collection<Container> deadContainers=containerMap.values();
        for (        Container container : deadContainers) {
          CreateContainerMetadata<?> metadata=container.getMetadata();
          if (metadata instanceof CreateKubernetesContainerMetadata) {
            if (container.isAlive()) {
              container.setAlive(false);
            }
            String status=Container.PROVISION_STOPPED;
            if (!status.equals(container.getProvisionResult())) {
              container.setProvisionResult(status);
            }
          }
        }
      }
      Map<String,ReplicationController> replicationMap=KubernetesHelper.getReplicationControllerMap(kubernetes);
      Map<String,Service> serviceMap=KubernetesHelper.getServiceMap(kubernetes);
      checkKubeletContainers(service,containerArray,podMap,replicationMap,serviceMap);
    }
 catch (    Exception e) {
      LOGGER.warn("Health Check Caught: " + e,e);
    }
  }
 else {
    LOGGER.warn("Cannot perform kubernetes health check. kubernetes: " + kubernetes + " fabricService: "+ service);
  }
}
