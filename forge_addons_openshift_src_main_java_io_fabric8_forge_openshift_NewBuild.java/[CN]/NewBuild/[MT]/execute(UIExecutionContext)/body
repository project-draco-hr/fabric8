{
  String buildConfigName=buildName.getValue();
  Objects.assertNotNull(buildConfigName,"buildName");
  Map<String,String> labels=BuildConfigs.createBuildLabels(buildConfigName);
  String imageTagText=imageTag.getValue();
  String gitUrlText=getOrFindGitUrl(context,gitUri.getValue());
  String imageText=outputImage.getValue();
  Model mavenModel=getMavenModel(context);
  if (Strings.isNullOrBlank(imageText) && mavenModel != null) {
    imageText=mavenModel.getProperties().getProperty("docker.image");
  }
  String webhookSecretText=webHookSecret.getValue();
  if (Strings.isNullOrBlank(webhookSecretText)) {
    webhookSecretText="secret101";
  }
  BuildConfig buildConfig=BuildConfigs.createBuildConfig(buildConfigName,labels,gitUrlText,imageTagText,imageText,webhookSecretText);
  System.out.println("Generated BuildConfig: " + toJson(buildConfig));
  ImageStream imageRepository=BuildConfigs.imageRepository(buildConfigName,labels);
  Controller controller=createController();
  controller.applyImageStream(imageRepository,"generated ImageStream: " + toJson(imageRepository));
  controller.applyBuildConfig(buildConfig,"generated BuildConfig: " + toJson(buildConfig));
  return Results.success("Added BuildConfig: " + Builds.getName(buildConfig) + " to OpenShift at master: "+ getKubernetes().getAddress());
}
