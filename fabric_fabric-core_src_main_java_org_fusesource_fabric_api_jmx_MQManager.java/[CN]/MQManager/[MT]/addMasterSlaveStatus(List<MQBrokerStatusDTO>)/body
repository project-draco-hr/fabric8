{
  Map<String,Map<String,MQBrokerStatusDTO>> groupMap=new HashMap<String,Map<String,MQBrokerStatusDTO>>();
  for (  MQBrokerStatusDTO status : answer) {
    String key=status.getGroup();
    Map<String,MQBrokerStatusDTO> list=groupMap.get(key);
    if (list == null) {
      list=new HashMap<String,MQBrokerStatusDTO>();
      groupMap.put(key,list);
    }
    list.put(status.getContainer(),status);
  }
  Set<Map.Entry<String,Map<String,MQBrokerStatusDTO>>> entries=groupMap.entrySet();
  for (  Map.Entry<String,Map<String,MQBrokerStatusDTO>> entry : entries) {
    String group=entry.getKey();
    Map<String,MQBrokerStatusDTO> containerMap=entry.getValue();
    String groupPath=ZkPath.MQ_CLUSTER.getPath(group);
    List<String> children=getAllChildren(getCurator(),groupPath);
    for (    String child : children) {
      byte[] data=getCurator().getData().forPath(child);
      if (data != null && data.length > 0) {
        String text=new String(data).trim();
        if (!text.isEmpty()) {
          ObjectMapper mapper=new ObjectMapper();
          Map<String,Object> map=mapper.readValue(data,HashMap.class);
          String id=stringValue(map,"id","container");
          if (id != null) {
            String container=stringValue(map,"container","agent");
            MQBrokerStatusDTO containerStatus=containerMap.get(container);
            if (containerStatus != null) {
              Boolean master=null;
              List services=listValue(map,"services");
              if (services != null) {
                if (!services.isEmpty()) {
                  List<String> serviceTexts=new ArrayList<String>();
                  for (                  Object service : services) {
                    String serviceText=getSubstitutedData(getCurator(),service.toString());
                    if (Strings.isNotBlank(serviceText)) {
                      serviceTexts.add(serviceText);
                    }
                    containerStatus.setServices(serviceTexts);
                  }
                  master=Boolean.TRUE;
                }
 else {
                  master=Boolean.FALSE;
                }
              }
 else {
                master=Boolean.FALSE;
              }
              containerStatus.setMaster(master);
            }
          }
        }
      }
    }
  }
}
