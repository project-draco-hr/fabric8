{
  ContainerProvider containerProvider=fabricService.getProvider(containerProviderScheme);
  Objects.notNull(containerProvider,"No ContainerProvider available for scheme: " + containerProviderScheme);
  MQService service=new MQServiceImpl(fabricService);
  HashMap<String,String> configuration=new HashMap<String,String>();
  List<String> properties=dto.getProperties();
  String version=dto.getVersion();
  if (Strings.isNullOrBlank(version)) {
    version=ZkDefs.DEFAULT_VERSION;
  }
  if (properties != null) {
    for (    String entry : properties) {
      String[] parts=entry.split("=",2);
      if (parts.length == 2) {
        configuration.put(parts[0],parts[1]);
      }
 else {
        configuration.put(parts[0],"");
      }
    }
  }
  String data=dto.getData();
  String name=dto.getName();
  if (data == null) {
    data=System.getProperty("karaf.base") + System.getProperty("file.separator") + "data"+ System.getProperty("file.separator")+ name;
  }
  configuration.put("data",data);
  String config=dto.getConfig();
  if (config != null) {
    configuration.put("config",service.getConfig(version,config));
  }
  String group=dto.getGroup();
  if (group != null) {
    configuration.put("group",group);
  }
  String networks=dto.getNetworks();
  if (networks != null) {
    configuration.put("network",networks);
  }
  String networksUserName=dto.getNetworksUserName();
  if (networksUserName != null) {
    configuration.put("network.userName",networksUserName);
  }
  String networksPassword=dto.getNetworksPassword();
  if (networksPassword != null) {
    configuration.put("network.password",networksPassword);
  }
  String parentProfile=dto.getParentProfile();
  if (parentProfile != null) {
    configuration.put("parent",parentProfile);
  }
  Profile profile=service.createMQProfile(version,name,configuration);
  System.out.println("MQ profile " + profile.getId() + " ready");
  String assign=dto.getAssign();
  if (assign != null) {
    String[] assignContainers=assign.split(",");
    for (    String containerName : assignContainers) {
      try {
        Container container=fabricService.getContainer(containerName);
        if (container == null) {
          System.out.println("Failed to assign profile to " + containerName + ": profile doesn't exists");
        }
 else {
          HashSet<Profile> profiles=new HashSet<Profile>(Arrays.asList(container.getProfiles()));
          profiles.add(profile);
          container.setProfiles(profiles.toArray(new Profile[profiles.size()]));
          System.out.println("Profile successfully assigned to " + containerName);
        }
      }
 catch (      Exception e) {
        System.out.println("Failed to assign profile to " + containerName + ": "+ e.getMessage());
      }
    }
  }
  List<CreateContainerBasicOptions.Builder> containerBuilders=new ArrayList<CreateContainerBasicOptions.Builder>();
  String create=dto.getCreate();
  if (create != null) {
    String[] createContainers=create.split(",");
    for (    String container : createContainers) {
      String type=null;
      String parent=fabricService.getCurrentContainerName();
      String jmxUser=dto.getUsername();
      String jmxPassword=dto.getPassword();
      String jvmOpts=dto.getJvmOpts();
      CreateContainerBasicOptions.Builder builder=containerProvider.newBuilder();
      builder=(CreateContainerBasicOptions.Builder)builder.name(container).parent(parent).number(1).ensembleServer(false).proxyUri(fabricService.getMavenRepoURI()).jvmOpts(jvmOpts).zookeeperUrl(fabricService.getZookeeperUrl()).zookeeperPassword(fabricService.getZookeeperPassword()).profiles(profile.getId()).version(version);
      if (builder instanceof CreateChildContainerOptions.Builder) {
        CreateChildContainerOptions.Builder childBuilder=(CreateChildContainerOptions.Builder)builder;
        builder=childBuilder.jmxUser(jmxUser).jmxPassword(jmxPassword);
      }
      containerBuilders.add(builder);
    }
  }
  return containerBuilders;
}
