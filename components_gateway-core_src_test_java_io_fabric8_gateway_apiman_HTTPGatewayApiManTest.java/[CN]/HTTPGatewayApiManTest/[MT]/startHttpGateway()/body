{
  LOG.info("Starting HttpGateway with a mapping of /hello/world to the Rest Application");
  if (restApplication != null) {
    LoadBalancer loadBalancer=new RoundRobinLoadBalancer();
    ServiceDTO serviceDetails=new ServiceDTO();
    serviceDetails.setContainer("local");
    serviceDetails.setVersion("1");
    mappedServices.put("/hello/world",new MappedServices("http://localhost:18181/root/",serviceDetails,loadBalancer,false));
  }
  final ApiManager apiManager=new ApiManager();
  DetectingGatewayWebSocketHandler websocketHandler=new DetectingGatewayWebSocketHandler();
  final HttpGateway httpGateway=new HttpGateway(){
    @Override public void addMappingRuleConfiguration(    HttpMappingRule mappingRule){
    }
    @Override public void removeMappingRuleConfiguration(    HttpMappingRule mappingRule){
    }
    @Override public Map<String,IMappedServices> getMappedServices(){
      return mappedServices;
    }
    @Override public boolean isEnableIndex(){
      return true;
    }
    @Override public InetSocketAddress getLocalAddress(){
      return new InetSocketAddress("0.0.0.0",18080);
    }
    @Override public void addCallDetailRecord(    CallDetailRecord cdr){
    }
    @Override public ApiManager getApiManager(){
      if (apiManager.getService() == null) {
        ApiManagerService apiManagerService=new ApiManService();
        Map<String,Object> config=new HashMap<String,Object>();
        config.put("vertx",vertx);
        config.put("httpGateway",this);
        config.put("port",String.valueOf(this.getLocalAddress().getPort()));
        apiManagerService.init(config);
        apiManager.setService(apiManagerService);
      }
      return apiManager;
    }
    @Override public String getGatewayUrl(){
      return "http:/" + getLocalAddress();
    }
  }
;
  websocketHandler.setPathPrefix("");
  Handler<HttpServerRequest> requestHandler=null;
  if (httpGateway.getApiManager().isApiManagerEnabled()) {
    requestHandler=apiManager.getService().createApiManagerHttpGatewayHandler();
  }
 else {
    requestHandler=new HttpGatewayHandler(vertx,httpGateway);
  }
  httpGatewayServer=new HttpGatewayServer(vertx,websocketHandler,18080,requestHandler);
  httpGatewayServer.setHost("0.0.0.0");
  httpGatewayServer.init();
  LOG.info("HttpGateway started");
  configureEngine();
  return httpGatewayServer;
}
