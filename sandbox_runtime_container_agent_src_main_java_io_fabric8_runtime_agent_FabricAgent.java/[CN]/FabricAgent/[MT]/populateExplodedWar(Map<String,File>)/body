{
  updateStatus("populating profile war",null,null);
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(FabricAgent.class.getClassLoader());
    final WebArchive archive=ShrinkWrap.create(WebArchive.class,"profile.war");
    final Set<String> components=new HashSet<String>();
    for (    Map.Entry<String,File> entry : artifacts.entrySet()) {
      String name=entry.getKey();
      File f=entry.getValue();
      if (!isWar(name,f)) {
        archive.addAsLibrary(f);
        ContainerManifest mf=readContainerManifest(f);
        if (mf.getMainAttributes().containsKey(new Attributes.Name(SERVICE_COMPONENT))) {
          String serviceComponents=mf.getMainAttributes().getValue(SERVICE_COMPONENT);
          for (          String component : Strings.splitAndTrimAsList(serviceComponents,",")) {
            if (VALID_COMPONENT_PATH_PATTERN.matcher(component).matches()) {
              archive.add(new ZipFileEntryAsset(new ZipFile(f,ZipFile.OPEN_READ),new ZipEntry(component)),component);
              components.add(component);
            }
          }
        }
      }
    }
    archive.addClass(WebAppContextListener.class);
    archive.addAsWebInfResource("web.xml");
    archive.addAsWebResource("context.xml","META-INF/context.xml");
    archive.setContainerManifest(new Asset(){
      @Override public InputStream openStream(){
        return new ContainerManifestBuilder().addIdentityCapability(GENRATED_RESOURCE_IDENTITY,"1.0.0").addContainerManifestHeader(SERVICE_COMPONENT,Strings.join(components,",")).openStream();
      }
    }
);
    File profileWar=componentContext.getBundleContext().getDataFile("fabric-profile.war");
    archive.as(ZipExporter.class).exportTo(profileWar,true);
    artifacts.put(GENRATED_MAVEN_COORDS,profileWar);
  }
  finally {
    Thread.currentThread().setContextClassLoader(original);
  }
  updateStatus("populated profile war",null,null);
}
