{
  String outputPackage=getMarshallerPackage();
  File out=new File(outputDirectory,outputPackage.replace(".",SLASH) + SLASH + "PrimitiveEncoder.java");
  BufferedWriter writer=new BufferedWriter(new FileWriter(out));
  Utils.writeJavaCopyWrite(writer);
  writer.write("package " + outputPackage + ";");
  writer.newLine();
  writer.newLine();
  TreeSet<String> imports=new TreeSet<String>();
  imports.add("java.io.DataOutput");
  writeMarshallerImports(writer,true,imports,getMarshallerPackage(),getPackagePrefix() + ".types");
  writer.newLine();
  writer.newLine();
  Utils.writeAutoGeneratedWarning(writer,0);
  writer.write("public interface PrimitiveEncoder {");
  writer.newLine();
  HashSet<String> filters=new HashSet<String>();
  filters.add("*");
  filters.add("list");
  filters.add("map");
  for (  AmqpClass amqpClass : TypeRegistry.getGeneratedTypes()) {
    if (!amqpClass.isPrimitive() || filters.contains(amqpClass.getName())) {
      continue;
    }
    String javaType=amqpClass.getValueMapping().getJavaType();
    if (amqpClass.encodings != null) {
      if (amqpClass.hasNonZeroEncoding()) {
        for (        AmqpEncoding encoding : amqpClass.encodings) {
          String encName=Utils.capFirst(Utils.toJavaName(amqpClass.name));
          if (amqpClass.hasMultipleEncodings()) {
            encName+=Utils.capFirst(Utils.toJavaName(Utils.option(encoding.getName(),amqpClass.name)));
          }
          writer.newLine();
          Utils.writeJavaComment(writer,1,"Writes a " + javaType + " encoded as "+ encoding.getLabel());
          writer.write(Utils.tab(1) + "public void write" + encName+ "("+ javaType+ " val, DataOutput buf) throws IOException, AmqpEncodingError;");
          writer.newLine();
          Utils.writeJavaComment(writer,1,"Encodes a " + javaType + " as "+ encoding.getLabel(),"","The encoded data should be written into the supplied buffer at the given offset.");
          writer.write(Utils.tab(1) + "public void encode" + encName+ "("+ javaType+ " val, Buffer buf, int offset) throws AmqpEncodingError;");
          writer.newLine();
          writer.newLine();
          Utils.writeJavaComment(writer,1,"Reads a " + javaType + " encoded as "+ encoding.getLabel());
          if (amqpClass.hasNonFixedEncoding()) {
            writer.write(Utils.tab(1) + "public " + javaType+ " read"+ encName+ "(int size, DataInput dis) throws IOException, AmqpEncodingError;");
          }
 else {
            writer.write(Utils.tab(1) + "public " + javaType+ " read"+ encName+ "(DataInput dis) throws IOException, AmqpEncodingError;");
          }
          writer.newLine();
          writer.newLine();
          Utils.writeJavaComment(writer,1,"Decodes a " + javaType + " encoded as "+ encoding.getLabel());
          if (amqpClass.hasNonFixedEncoding()) {
            writer.write(Utils.tab(1) + "public " + javaType+ " decode"+ encName+ "(Buffer encoded, int offset, int length) throws AmqpEncodingError;");
          }
 else {
            writer.write(Utils.tab(1) + "public " + javaType+ " decode"+ encName+ "(Buffer encoded, int offset) throws AmqpEncodingError;");
          }
          writer.newLine();
        }
      }
    }
  }
  writer.write("}");
  writer.newLine();
  writer.flush();
  writer.close();
}
