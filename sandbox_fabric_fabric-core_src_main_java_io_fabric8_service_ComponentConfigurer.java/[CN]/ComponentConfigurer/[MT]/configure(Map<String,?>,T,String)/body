{
  assertValid();
  Map<String,Object> result=new HashMap<>();
  final Runtime runtime=this.runtime.get();
  final PropertiesProvider runtimeProperties=new PropertiesProvider(){
    @Override public Object getProperty(    String key){
      return runtime.getProperty(key);
    }
    @Override public Object getRequiredProperty(    String key){
      return runtime.getRequiredProperty(key);
    }
    @Override public Object getProperty(    String key,    Object defaultValue){
      return runtime.getProperty(key,defaultValue);
    }
  }
;
  final PropertiesProvider configurationProvider=new MapPropertiesProvider((Map<String,Object>)configuration);
  final PropertiesProvider[] propertiesProviders=new PropertiesProvider[]{configurationProvider,runtimeProperties};
  PropertiesProvider provider=new SubstitutionPropertiesProvider(propertiesProviders);
  for (  Map.Entry<String,?> entry : configuration.entrySet()) {
    String key=entry.getKey();
    Object value=provider.getProperty(key);
    result.put(key,value);
  }
  ConfigInjection.applyConfiguration(result,target,ignorePrefix);
  return result;
}
