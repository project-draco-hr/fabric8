{
  Logger log=session.getLogger();
  Map<Integer,Callable<Boolean>> conditions=new TreeMap<>();
  Callable<Boolean> sessionPodsReady=new SessionPodsAreReady(client,session);
  Callable<Boolean> servicesReady=new SessionServicesAreReady(client,session,configuration);
  List<Object> entities=new ArrayList<>();
  for (  KubernetesList c : kubeConfigs) {
    entities.addAll(c.getItems());
  }
  Collections.sort(entities,new Comparator<Object>(){
    @Override public int compare(    Object left,    Object right){
      if (left instanceof Service) {
        return -1;
      }
 else       if (right instanceof Service) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  String namespace=session.getNamespace();
  String routePrefix=namespace + "." + configuration.getRouteDomainPostfix();
  List<Object> routes=new ArrayList<>();
  for (  Object entity : entities) {
    if (entity instanceof Pod) {
      Pod pod=(Pod)entity;
      log.status("Applying pod:" + getName(pod));
      Set<Secret> secrets=generateSecrets(client,session,pod.getMetadata());
      String serviceAccountName=pod.getSpec().getServiceAccountName();
      if (Strings.isNotBlank(serviceAccountName)) {
        generateServiceAccount(client,session,secrets,serviceAccountName);
      }
      controller.applyPod(pod,session.getId());
      conditions.put(1,sessionPodsReady);
    }
 else     if (entity instanceof Service) {
      Service service=(Service)entity;
      String serviceName=getName(service);
      log.status("Applying service:" + serviceName);
      controller.applyService(service,session.getId());
      conditions.put(2,servicesReady);
      Route route=Routes.createRouteForService(routePrefix,namespace,service,log);
      if (route != null) {
        log.status("Applying route for:" + serviceName);
        controller.applyRoute(route,"route for " + serviceName);
        routes.add(route);
      }
    }
 else     if (entity instanceof ReplicationController) {
      ReplicationController replicationController=(ReplicationController)entity;
      log.status("Applying replication controller:" + getName(replicationController));
      Set<Secret> secrets=generateSecrets(client,session,replicationController.getSpec().getTemplate().getMetadata());
      String serviceAccountName=replicationController.getSpec().getTemplate().getSpec().getServiceAccountName();
      if (Strings.isNotBlank(serviceAccountName)) {
        generateServiceAccount(client,session,secrets,serviceAccountName);
      }
      controller.applyReplicationController(replicationController,session.getId());
      conditions.put(1,sessionPodsReady);
    }
 else     if (entity instanceof HasMetadata) {
      log.status("Applying " + entity.getClass().getSimpleName() + ":"+ KubernetesHelper.getName((HasMetadata)entity));
      controller.apply(entity,session.getId());
    }
 else     if (entity != null) {
      log.status("Applying " + entity.getClass().getSimpleName() + ".");
      controller.apply(entity,session.getId());
    }
  }
  entities.addAll(routes);
  if (!conditions.isEmpty()) {
    Callable<Boolean> compositeCondition=new CompositeCondition(conditions.values());
    WaitStrategy waitStrategy=new WaitStrategy(compositeCondition,configuration.getTimeout(),configuration.getPollInterval());
    if (!waitStrategy.await()) {
      log.error("Timed out waiting for pods/services!");
      return false;
    }
 else {
      log.status("All pods/services are currently 'running'!");
    }
  }
 else {
    log.warn("No pods/services/replication controllers defined in the configuration!");
  }
  return true;
}
