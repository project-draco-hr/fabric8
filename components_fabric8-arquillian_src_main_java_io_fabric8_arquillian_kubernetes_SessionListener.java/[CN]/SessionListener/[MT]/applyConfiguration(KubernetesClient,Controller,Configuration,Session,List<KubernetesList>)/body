{
  Logger log=session.getLogger();
  Map<Integer,Callable<Boolean>> conditions=new TreeMap<>();
  Callable<Boolean> sessionPodsReady=new SessionPodsAreReady(client,session);
  Callable<Boolean> servicesReady=new SessionServicesAreReady(client,session,configuration);
  Set<HasMetadata> entities=new TreeSet<>(new HasMetadataComparator());
  for (  KubernetesList c : kubeConfigs) {
    entities.addAll(enhance(session,configuration,c).getItems());
  }
  if (isOpenShift(client) && containsImageStreamResources(entities)) {
  }
 else {
    String registry=getLocalDockerRegistry();
    if (Strings.isNotBlank(registry)) {
      log.status("Adapting resources to pull images from registry: " + registry);
      addRegistryToImageNameIfNotPresent(entities,registry);
    }
 else {
      log.status("No local fabric8 docker registry found");
    }
  }
  List<Object> items=new ArrayList<>();
  items.addAll(entities);
  Collections.sort(items,new Comparator<Object>(){
    @Override public int compare(    Object left,    Object right){
      if (left instanceof Service) {
        return -1;
      }
 else       if (right instanceof Service) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  boolean isOpenshift=client.isAdaptable(OpenShiftClient.class);
  String namespace=session.getNamespace();
  String routePrefix=namespace + "." + configuration.getKubernetesDomain();
  preprocessEnvironment(client,controller,configuration,session);
  Set<HasMetadata> extraEntities=new TreeSet<>(new HasMetadataComparator());
  for (  Object entity : items) {
    if (entity instanceof Pod) {
      Pod pod=(Pod)entity;
      log.status("Applying pod:" + getName(pod));
      Set<Secret> secrets=generateSecrets(client,session,pod.getMetadata());
      String serviceAccountName=pod.getSpec().getServiceAccountName();
      if (Strings.isNotBlank(serviceAccountName)) {
        generateServiceAccount(client,session,secrets,serviceAccountName);
      }
      controller.applyPod(pod,session.getId());
      conditions.put(1,sessionPodsReady);
    }
 else     if (entity instanceof Service) {
      Service service=(Service)entity;
      String serviceName=getName(service);
      log.status("Applying service:" + serviceName);
      controller.applyService(service,session.getId());
      conditions.put(2,servicesReady);
      if (isOpenshift) {
        Route route=Routes.createRouteForService(routePrefix,namespace,service,log);
        if (route != null) {
          log.status("Applying route for:" + serviceName);
          controller.applyRoute(route,"route for " + serviceName);
          extraEntities.add(route);
        }
      }
    }
 else     if (entity instanceof ReplicationController) {
      ReplicationController replicationController=(ReplicationController)entity;
      log.status("Applying replication controller:" + getName(replicationController));
      Set<Secret> secrets=generateSecrets(client,session,replicationController.getSpec().getTemplate().getMetadata());
      String serviceAccountName=replicationController.getSpec().getTemplate().getSpec().getServiceAccountName();
      if (Strings.isNotBlank(serviceAccountName)) {
        generateServiceAccount(client,session,secrets,serviceAccountName);
      }
      controller.applyReplicationController(replicationController,session.getId());
      conditions.put(1,sessionPodsReady);
    }
 else     if (entity instanceof ReplicaSet || entity instanceof Deployment || entity instanceof DeploymentConfig) {
      log.status("Applying " + entity.getClass().getSimpleName() + ".");
      controller.apply(entity,session.getId());
      conditions.put(1,sessionPodsReady);
    }
 else     if (entity instanceof OAuthClient) {
      OAuthClient oc=(OAuthClient)entity;
      ObjectMeta metadata=KubernetesHelper.getOrCreateMetadata(oc);
      String name=metadata.getName();
      if (isOpenshift) {
        OpenShiftClient openShiftClient=client.adapt(OpenShiftClient.class);
        OAuthClient current=openShiftClient.oAuthClients().withName(name).get();
        boolean create=false;
        if (current == null) {
          current=oc;
          create=true;
        }
        boolean updated=false;
        List<String> redirectURIs=current.getRedirectURIs();
        String redirectUri="http://" + name + "."+ routePrefix;
        if (!redirectURIs.contains(redirectUri)) {
          redirectURIs.add(redirectUri);
          updated=true;
        }
        current.setRedirectURIs(redirectURIs);
        log.status("Applying OAuthClient:" + name);
        controller.setSupportOAuthClients(true);
        if (create) {
          openShiftClient.oAuthClients().create(current);
        }
 else {
          if (updated) {
            openShiftClient.oAuthClients().withName(name).delete();
            current.getMetadata().setResourceVersion(null);
            openShiftClient.oAuthClients().create(current);
          }
        }
      }
    }
 else     if (entity instanceof HasMetadata) {
      log.status("Applying " + entity.getClass().getSimpleName() + ":"+ KubernetesHelper.getName((HasMetadata)entity));
      controller.apply(entity,session.getId());
    }
 else     if (entity != null) {
      log.status("Applying " + entity.getClass().getSimpleName() + ".");
      controller.apply(entity,session.getId());
    }
  }
  entities.addAll(extraEntities);
  if (!conditions.isEmpty()) {
    Callable<Boolean> compositeCondition=new CompositeCondition(conditions.values());
    WaitStrategy waitStrategy=new WaitStrategy(compositeCondition,configuration.getWaitTimeout(),configuration.getWaitPollInterval());
    if (!waitStrategy.await()) {
      log.error("Timed out waiting for pods/services!");
      return false;
    }
 else {
      log.status("All pods/services are currently 'running'!");
    }
  }
 else {
    log.warn("No pods/services/replication controllers defined in the configuration!");
  }
  return true;
}
