{
  Session session=event.getSession();
  final Logger log=session.getLogger();
  String namespace=session.getNamespace();
  System.setProperty(Constants.KUBERNETES_NAMESPACE,namespace);
  log.status("Using Kubernetes at: " + client.getMasterUrl());
  log.status("Creating kubernetes resources inside namespace: " + namespace);
  log.info("if you use OpenShift then type this switch namespaces:     oc project " + namespace);
  log.info("if you use kubernetes then type this to switch namespaces: kubectl namespace " + namespace);
  controller.setNamespace(namespace);
  controller.setThrowExceptionOnError(true);
  controller.setRecreateMode(true);
  controller.setIgnoreRunningOAuthClients(true);
  if (Strings.isNullOrBlank(configuration.getExistingNamespace())) {
    createNamespace(client,session);
  }
 else {
    assertNamespaceExists(client,session,configuration);
  }
  boolean disableEnvironmentInit=Systems.getEnvVarOrSystemProperty(Constants.FABRIC8_DISABLE_ENVIRONMENT_INIT,Boolean.FALSE);
  shutdownHook=new ShutdownHook(client,configuration,session);
  Runtime.getRuntime().addShutdownHook(shutdownHook);
  try {
    URL configUrl=configuration.getConfigUrl();
    List<String> dependencies=!configuration.getDependencies().isEmpty() ? configuration.getDependencies() : Util.getMavenDependencies(session);
    List<KubernetesList> kubeConfigs=new LinkedList<>();
    if (!disableEnvironmentInit) {
      for (      String dependency : dependencies) {
        log.info("Found dependency: " + dependency);
        loadDependency(log,kubeConfigs,dependency,controller,configuration,namespace);
      }
      if (configUrl != null) {
        log.status("Applying kubernetes configuration from: " + configUrl);
        Object dto=loadJson(readAsString(configUrl));
        dto=expandTemplate(controller,configuration,log,namespace,configUrl.toString(),dto);
        KubernetesList kubeList=KubernetesHelper.asKubernetesList(dto);
        List<HasMetadata> items=kubeList.getItems();
        kubeConfigs.add(kubeList);
      }
    }
    if (disableEnvironmentInit || applyConfiguration(client,controller,configuration,session,kubeConfigs)) {
      displaySessionStatus(client,session);
    }
 else {
      throw new IllegalStateException("Failed to apply kubernetes configuration.");
    }
  }
 catch (  Exception e) {
    try {
      cleanupSession(client,configuration,session);
    }
 catch (    MultiException me) {
      throw e;
    }
 finally {
      if (shutdownHook != null) {
        Runtime.getRuntime().removeShutdownHook(shutdownHook);
      }
    }
    throw new RuntimeException(e);
  }
}
