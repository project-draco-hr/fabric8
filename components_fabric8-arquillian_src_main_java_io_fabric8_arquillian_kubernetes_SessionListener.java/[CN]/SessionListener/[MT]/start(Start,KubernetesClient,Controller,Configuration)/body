{
  Session session=event.getSession();
  final Logger log=session.getLogger();
  String namespace=session.getNamespace();
  System.setProperty(Constants.KUBERNETES_NAMESPACE,namespace);
  log.status("Using Kubernetes at: " + client.getMasterUrl());
  log.status("Creating kubernetes resources inside namespace: " + namespace);
  log.info("if you use OpenShift then type this switch namespaces:     oc project " + namespace);
  log.info("if you use kubernetes then type this to switch namespaces: kubectl namespace " + namespace);
  clearTestResultDirectories(session);
  controller.setNamespace(namespace);
  controller.setThrowExceptionOnError(true);
  controller.setRecreateMode(true);
  controller.setIgnoreRunningOAuthClients(true);
  String namespaceToUse=configuration.getNamespace();
  if (Strings.isNullOrBlank(namespaceToUse)) {
    createNamespace(client,controller,session);
  }
 else {
    checkNamespace(client,controller,session,configuration);
    updateNamespaceStatus(client,session,Constants.RUNNING_STATUS);
    namespace=namespaceToUse;
    controller.setNamespace(namespace);
  }
  shutdownHook=new ShutdownHook(client,configuration,session);
  Runtime.getRuntime().addShutdownHook(shutdownHook);
  try {
    URL configUrl=configuration.getEnvironmentConfigUrl();
    List<String> dependencies=!configuration.getEnvironmentDependencies().isEmpty() ? configuration.getEnvironmentDependencies() : resolver.resolve(session);
    List<KubernetesList> kubeConfigs=new LinkedList<>();
    if (configuration.isEnvironmentInitEnabled()) {
      for (      String dependency : dependencies) {
        log.info("Found dependency: " + dependency);
        loadDependency(log,kubeConfigs,dependency,controller,configuration,namespace);
      }
      if (configUrl == null) {
        String resourceName="kubernetes.yml";
        if (controller.getOpenShiftClientOrNull() != null) {
          resourceName="openshift.yml";
        }
        configUrl=findConfigResource("/META-INF/fabric8/" + resourceName);
      }
      if (configUrl != null) {
        log.status("Applying kubernetes configuration from: " + configUrl);
        String configText=readAsString(configUrl);
        Object dto=null;
        String configPath=configUrl.getPath();
        if (configPath.endsWith(".yml") || configPath.endsWith(".yaml")) {
          dto=loadYaml(configText,KubernetesResource.class);
        }
 else {
          dto=loadJson(configText);
        }
        dto=expandTemplate(controller,configuration,log,namespace,configUrl.toString(),dto);
        KubernetesList kubeList=KubernetesHelper.asKubernetesList(dto);
        List<HasMetadata> items=kubeList.getItems();
        kubeConfigs.add(kubeList);
      }
    }
    if (!configuration.isEnvironmentInitEnabled() || applyConfiguration(client,controller,configuration,session,kubeConfigs)) {
      displaySessionStatus(client,session);
    }
 else {
      throw new IllegalStateException("Failed to apply kubernetes configuration.");
    }
  }
 catch (  Exception e) {
    try {
      cleanupSession(client,configuration,session,Constants.ERROR_STATUS);
    }
 catch (    MultiException me) {
      throw e;
    }
 finally {
      if (shutdownHook != null) {
        Runtime.getRuntime().removeShutdownHook(shutdownHook);
      }
    }
    throw new RuntimeException(e);
  }
}
