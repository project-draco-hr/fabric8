{
  @SuppressWarnings("serial") InstallTask installTask=new InstallTask(){
    @Override public void install(    InstallContext installContext,    ProcessConfig config,    String id,    File installDir) throws Exception {
      config.setName(options.getName());
      File archive=getDownloadStrategy(options).downloadContent(options.getUrl(),installDir);
      if (archive == null) {
        archive=new File(installDir,INSTALLED_BINARY);
      }
      File nestedProcessDirectory=null;
      if (options.getExtractCmd() != null && archive.exists()) {
        String extractCmd=options.getExtractCmd();
        FileUtils.extractArchive(archive,installDir,extractCmd,untarTimeout,executor);
        nestedProcessDirectory=findInstallDir(installDir);
        exportInstallDirEnvVar(options,nestedProcessDirectory);
        String[] postUnpackCmds=options.getPostUnpackCmds();
        if (postUnpackCmds != null) {
          for (          String postUnpackCmd : postUnpackCmds) {
            if (Strings.isNotBlank(postUnpackCmd)) {
              String[] args=FileUtils.splitCommands(postUnpackCmd);
              LOGGER.info("Running post unpack command " + Arrays.asList(args) + " in folder "+ nestedProcessDirectory);
              new Command(args).addEnvironment(options.getEnvironment()).setDirectory(nestedProcessDirectory).setTimeLimit(postUnpackTimeout).execute(executor);
            }
          }
        }
        writeJvmConfig(new File(nestedProcessDirectory,"etc"),options.getJvmOptions());
      }
      if (postInstall != null) {
        postInstall.install(installContext,config,id,installDir);
      }
      String[] postInstallCmds=options.getPostInstallCmds();
      if (postInstallCmds != null) {
        for (        String postInstallCmd : postInstallCmds) {
          if (Strings.isNotBlank(postInstallCmd)) {
            String[] args=FileUtils.splitCommands(postInstallCmd);
            LOGGER.info("Running post install command " + Arrays.asList(args) + " in folder "+ nestedProcessDirectory);
            new Command(args).addEnvironment(options.getEnvironment()).setDirectory(nestedProcessDirectory).setTimeLimit(postInstallTimeout).execute(executor);
          }
        }
      }
    }
  }
;
  return installViaScript(options,installTask);
}
