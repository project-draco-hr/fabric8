{
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(InternalNode.class.getClassLoader());
    deleted(pid);
    if (properties != null && !destroyed) {
      ImmutableSettings.Builder builder=ImmutableSettings.settingsBuilder();
      builder.put(settings);
      if (properties != null) {
        for (Enumeration e=properties.keys(); e.hasMoreElements(); ) {
          String key=e.nextElement().toString();
          Object oval=properties.get(key);
          String val=oval != null ? oval.toString() : null;
          builder.put(key,val);
        }
      }
      Node node=new InternalNode(builder.build(),false);
      node.start();
      node.client().admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
      this.services.put(pid,this.bundleContext.registerService(Node.class.getName(),node,null));
      this.nodes.put(pid,node);
      String fabricUrl=null;
      if (node instanceof InternalNode) {
        InternalNode in=(InternalNode)node;
        try {
          HttpServerTransport transport=in.injector().getInstance(HttpServerTransport.class);
          TransportAddress published=transport.boundAddress().publishAddress();
          if (published instanceof InetSocketTransportAddress) {
            InetSocketTransportAddress address=(InetSocketTransportAddress)published;
            fabricUrl="http://" + address.address().getAddress().getHostAddress() + ":"+ address.address().getPort();
          }
        }
 catch (        RuntimeException e) {
          e.printStackTrace();
        }
      }
      if (fabricUrl != null) {
        if (group == null) {
          group=ZooKeeperGroupFactory.create(zookeeper,"/fabric/registry/clusters/elastic-search",acl);
        }
        try {
          eid=group.join(fabricUrl.getBytes("UTF-8"));
        }
 catch (        UnsupportedEncodingException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(cl);
  }
}
