{
  if (LOG.isDebugEnabled()) {
    LOG.debug("block=" + block + ", (length="+ block.getNumBytes()+ "), syncList="+ syncList+ ", closeFile="+ closeFile);
  }
  if (syncList.isEmpty()) {
    namenode.commitBlockSynchronization(block,0,0,closeFile,true,DatanodeID.EMPTY_ARRAY);
    LocatedBlock b=new LocatedBlock(block,targets);
    if (isBlockTokenEnabled) {
      b.setBlockToken(blockTokenSecretManager.generateToken(null,b.getBlock(),EnumSet.of(BlockTokenSecretManager.AccessMode.WRITE)));
    }
    return b;
  }
  List<DatanodeID> successList=new ArrayList<DatanodeID>();
  long generationstamp=namenode.nextGenerationStamp(block,closeFile);
  Block newblock=new Block(block.getBlockId(),block.getNumBytes(),generationstamp);
  for (  BlockRecord r : syncList) {
    try {
      r.datanode.updateBlock(r.info.getBlock(),newblock,closeFile);
      successList.add(r.id);
    }
 catch (    IOException e) {
      InterDatanodeProtocol.LOG.warn("Failed to updateBlock (newblock=" + newblock + ", datanode="+ r.id+ ")",e);
    }
  }
  if (!successList.isEmpty()) {
    DatanodeID[] nlist=successList.toArray(new DatanodeID[successList.size()]);
    namenode.commitBlockSynchronization(block,newblock.getGenerationStamp(),newblock.getNumBytes(),closeFile,false,nlist);
    DatanodeInfo[] info=new DatanodeInfo[nlist.length];
    for (int i=0; i < nlist.length; i++) {
      info[i]=new DatanodeInfo(nlist[i]);
    }
    LocatedBlock b=new LocatedBlock(newblock,info);
    if (isBlockTokenEnabled) {
      b.setBlockToken(blockTokenSecretManager.generateToken(null,b.getBlock(),EnumSet.of(BlockTokenSecretManager.AccessMode.WRITE)));
    }
    return b;
  }
  StringBuilder b=new StringBuilder();
  for (  BlockRecord r : syncList) {
    b.append("\n  " + r.id);
  }
  throw new IOException("Cannot recover " + block + ", none of these "+ syncList.size()+ " datanodes success {"+ b+ "\n}");
}
