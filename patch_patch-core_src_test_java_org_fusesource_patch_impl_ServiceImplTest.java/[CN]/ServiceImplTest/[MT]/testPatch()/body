{
  String bundleSymbolicName="my-bsn";
  String bundleVersion="1.3.1";
  String newBundleVersion="1.3.2";
  File storage=new File(baseDir,"storage");
  delete(storage);
  storage.mkdirs();
  File jar=new File(storage,"temp/bundle.jar");
  File man=new File(storage,"temp/bundle/META-INF/MANIFEST.MF");
  man.getParentFile().mkdirs();
  Manifest mf=new Manifest();
  mf.getMainAttributes().putValue("Manifest-Version","1.0");
  mf.getMainAttributes().putValue("Bundle-ManifestVersion","2");
  mf.getMainAttributes().putValue("Bundle-SymbolicName",bundleSymbolicName);
  mf.getMainAttributes().putValue("Bundle-Version",newBundleVersion);
  FileOutputStream fos=new FileOutputStream(man);
  mf.write(fos);
  fos.close();
  fos=new FileOutputStream(jar);
  jarDir(man.getParentFile().getParentFile(),fos);
  fos.close();
  File patchFile=new File(storage,"temp/patch.zip");
  File pd=new File(storage,"temp/patch/my.patch");
  pd.getParentFile().mkdirs();
  Properties props=new Properties();
  props.put("id","fuse-7.0.1");
  props.put("bundle.count","1");
  props.put("bundle.0",jar.toURI().toURL().toString());
  fos=new FileOutputStream(pd);
  props.store(fos,null);
  fos.close();
  fos=new FileOutputStream(patchFile);
  jarDir(pd.getParentFile(),fos);
  fos.close();
  BundleContext bundleContext=createMock(BundleContext.class);
  Bundle bundle0=createMock(Bundle.class);
  Bundle bundle=createMock(Bundle.class);
  Bundle bundle2=createMock(Bundle.class);
  FrameworkWiring wiring=createMock(FrameworkWiring.class);
  expect(bundleContext.getProperty("fuse.patch.location")).andReturn(storage.toString()).anyTimes();
  replay(bundleContext,bundle);
  ServiceImpl service=new ServiceImpl(bundleContext);
  Iterable<Patch> patches=service.download(patchFile.toURI().toURL());
  assertNotNull(patches);
  Iterator<Patch> it=patches.iterator();
  assertTrue(it.hasNext());
  Patch patch=it.next();
  assertNotNull(patch);
  assertEquals("fuse-7.0.1",patch.getId());
  assertNotNull(patch.getBundles());
  assertEquals(1,patch.getBundles().size());
  Iterator<String> itb=patch.getBundles().iterator();
  assertEquals(jar.toURI().toURL().toString(),itb.next());
  assertNull(patch.getResult());
  verify(bundleContext,bundle);
  reset(bundleContext,bundle);
  expect(bundleContext.getBundles()).andReturn(new Bundle[]{bundle});
  expect(bundle.getSymbolicName()).andReturn(bundleSymbolicName);
  expect(bundle.getVersion()).andReturn(new Version(bundleVersion));
  expect(bundle.getLocation()).andReturn("location");
  replay(bundleContext,bundle);
  Result result=patch.simulate();
  assertNotNull(result);
  assertNull(patch.getResult());
  assertTrue(result.isSimulation());
  verify(bundleContext,bundle);
  reset(bundleContext,bundle);
  expect(bundleContext.getProperty("fuse.patch.location")).andReturn(storage.toString()).anyTimes();
  replay(bundleContext,bundle);
  service=new ServiceImpl(bundleContext);
  patches=service.getPatches();
  assertNotNull(patches);
  it=patches.iterator();
  assertTrue(it.hasNext());
  patch=it.next();
  assertNotNull(patch);
  assertEquals("fuse-7.0.1",patch.getId());
  assertNotNull(patch.getBundles());
  assertEquals(1,patch.getBundles().size());
  itb=patch.getBundles().iterator();
  assertEquals(jar.toURI().toURL().toString(),itb.next());
  assertNull(patch.getResult());
  verify(bundleContext,bundle);
  reset(bundleContext,bundle);
  expect(bundleContext.getBundles()).andReturn(new Bundle[]{bundle});
  expect(bundle.getSymbolicName()).andReturn(bundleSymbolicName);
  expect(bundle.getVersion()).andReturn(new Version(bundleVersion));
  expect(bundle.getLocation()).andReturn("location");
  bundle.uninstall();
  expect(bundleContext.installBundle(jar.toURI().toURL().toString())).andReturn(bundle2);
  expect(bundleContext.getBundles()).andReturn(new Bundle[]{bundle2});
  expect(bundle2.getState()).andReturn(Bundle.INSTALLED);
  expect(bundle2.getHeaders()).andReturn(new Hashtable());
  expect(bundle.getState()).andReturn(Bundle.UNINSTALLED);
  expect(bundleContext.getBundle(0)).andReturn(bundle0);
  expect(bundle0.adapt(FrameworkWiring.class)).andReturn(wiring);
  wiring.refreshBundles(eq(asSet(bundle2,bundle)),anyObject(FrameworkListener[].class));
  expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      for (      FrameworkListener l : (FrameworkListener[])(EasyMock.getCurrentArguments()[1])) {
        l.frameworkEvent(null);
      }
      return null;
    }
  }
);
  replay(bundleContext,bundle0,bundle,bundle2,wiring);
  result=patch.install();
  assertNotNull(result);
  assertSame(result,patch.getResult());
  assertFalse(patch.getResult().isSimulation());
  verify(bundleContext,bundle);
  reset(bundleContext,bundle);
  expect(bundleContext.getProperty("fuse.patch.location")).andReturn(storage.toString()).anyTimes();
  replay(bundleContext,bundle);
  service=new ServiceImpl(bundleContext);
  patches=service.getPatches();
  assertNotNull(patches);
  it=patches.iterator();
  assertTrue(it.hasNext());
  patch=it.next();
  assertNotNull(patch);
  assertEquals("fuse-7.0.1",patch.getId());
  assertNotNull(patch.getBundles());
  assertEquals(1,patch.getBundles().size());
  itb=patch.getBundles().iterator();
  assertEquals(jar.toURI().toURL().toString(),itb.next());
  assertNotNull(patch.getResult());
  verify(bundleContext,bundle);
}
