{
  BundleContext bundleContext=createMock(BundleContext.class);
  Bundle sysBundle=createMock(Bundle.class);
  BundleContext sysBundleContext=createMock(BundleContext.class);
  Bundle bundle=createMock(Bundle.class);
  Bundle bundle2=createMock(Bundle.class);
  FrameworkWiring wiring=createMock(FrameworkWiring.class);
  expect(bundleContext.getBundle(0)).andReturn(sysBundle);
  expect(sysBundle.getBundleContext()).andReturn(sysBundleContext);
  expect(sysBundleContext.getProperty("fuse.patch.location")).andReturn(storage.toString()).anyTimes();
  replay(sysBundleContext,sysBundle,bundleContext,bundle);
  ServiceImpl service=new ServiceImpl(bundleContext);
  Iterable<Patch> patches=service.download(patch140.toURI().toURL());
  assertNotNull(patches);
  Iterator<Patch> it=patches.iterator();
  assertTrue(it.hasNext());
  Patch patch=it.next();
  assertNotNull(patch);
  assertEquals("patch-1.4.0",patch.getId());
  assertNotNull(patch.getBundles());
  assertEquals(1,patch.getBundles().size());
  Iterator<String> itb=patch.getBundles().iterator();
  assertEquals("mvn:foo/my-bsn/1.4.0",itb.next());
  assertNull(patch.getResult());
  verify(sysBundleContext,sysBundle,bundleContext,bundle);
  reset(sysBundleContext,sysBundle,bundleContext,bundle);
  expect(sysBundleContext.getBundles()).andReturn(new Bundle[]{bundle});
  expect(bundle.getSymbolicName()).andReturn("my-bsn").anyTimes();
  expect(bundle.getVersion()).andReturn(new Version("1.3.1")).anyTimes();
  expect(bundle.getLocation()).andReturn("location");
  expect(bundle.getBundleId()).andReturn(123L);
  replay(sysBundleContext,sysBundle,bundleContext,bundle);
  Result result=patch.simulate();
  assertNotNull(result);
  assertNull(patch.getResult());
  assertEquals(1,result.getUpdates().size());
  assertTrue(result.isSimulation());
}
