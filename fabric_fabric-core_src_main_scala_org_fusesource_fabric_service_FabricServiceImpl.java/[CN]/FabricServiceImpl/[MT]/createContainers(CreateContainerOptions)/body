{
  Container[] containers=new Container[options.getNumber()];
  if (options.getZookeeperUrl() == null && !options.isDebugContainer()) {
    options.setZookeeperUrl(getZookeeperUrl());
  }
  if (options.getProxyUri() == null) {
    options.setProxyUri(getMavenRepoURI());
  }
  try {
    ContainerProvider provider=getProvider(options.getProviderType());
    if (provider == null) {
      throw new FabricException("Unable to find an container provider type '" + options.getProviderType() + "'");
    }
    Set<? extends CreateContainerMetadata> createMetadata=new LinkedHashSet<CreateContainerMetadata>();
    String parent=options.getParent() != null ? options.getParent() : "";
    Container parentContainer=null;
    String currentID="";
    Container currentContainer=getCurrentContainer();
    if (currentContainer != null) {
      currentID=currentContainer.getId();
    }
    if (provider instanceof ChildContainerProvider && !parent.equals(currentID)) {
      createMetadata=createChildContainer(options);
    }
 else {
      createMetadata=provider.create(options);
    }
    containers=new Container[createMetadata.size()];
    int container=0;
    for (    CreateContainerMetadata metadata : createMetadata) {
      if (!options.isEnsembleServer()) {
        createContainerConfig(parent,metadata.getContainerName());
      }
      containers[container]=new ContainerImpl(parentContainer,metadata.getContainerName(),FabricServiceImpl.this);
      containers[container++].setCreateContainerMetadata(metadata);
    }
  }
 catch (  FabricException e) {
    throw e;
  }
catch (  Exception e) {
    throw new FabricException(e);
  }
  return containers;
}
