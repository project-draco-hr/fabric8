{
  List<RemoteRepository> repos=new ArrayList<RemoteRepository>();
  for (int i=0; i < repositories.length; i++) {
    String text=repositories[i].trim();
    Authentication authentication=getAuthentication(text);
    if (authentication != null) {
      text=text.replaceFirst(String.format("%s:%s@",authentication.getUsername(),authentication.getPassword()),"");
    }
    boolean snapshot=false;
    while (true) {
      int idx=text.lastIndexOf('@');
      if (idx <= 0) {
        break;
      }
      String postfix=text.substring(idx + 1);
      if (postfix.equals("snapshots")) {
        snapshot=true;
      }
 else       if (postfix.equals("noreleases")) {
      }
 else       if (postfix.startsWith("id")) {
      }
 else {
        LOGGER.warn("Unknown postfix: @" + postfix + " on repository URL: "+ text);
        break;
      }
      text=text.substring(0,idx);
    }
    RemoteRepository repository=new RemoteRepository("repos" + i,"default",text);
    RepositoryPolicy policy=new RepositoryPolicy(true,RepositoryPolicy.UPDATE_POLICY_DAILY,RepositoryPolicy.CHECKSUM_POLICY_WARN);
    repository.setPolicy(snapshot,policy);
    repository.setAuthentication(authentication);
    repos.add(repository);
  }
  return repos;
}
