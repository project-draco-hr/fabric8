{
  if (offset > 0) {
    is.skip(offset);
  }
  int pos=0;
  byte batch[]=new byte[4 * 1024];
  boolean eof_possible=false;
  while (isRunAllowed()) {
    int count=is.read(batch,pos,batch.length - pos);
    if (count < 0) {
      if (logFilePattern == null || eof_possible) {
        if (pos > 0) {
          queue.put(new QueueEntry(Arrays.copyOf(batch,pos),file,offset,pos));
        }
        queue.put(EOF);
        return true;
      }
 else {
        if (logFileExists(file + 1)) {
          eof_possible=true;
          continue;
        }
 else {
          eof_possible=false;
          Thread.sleep(tailRetry);
        }
      }
    }
 else {
      eof_possible=false;
      pos+=count;
      int at=lastnlposition(batch,pos);
      if (at >= 0) {
        int len=at + 1;
        byte[] data=Arrays.copyOf(batch,len);
        int remaining=pos - len;
        System.arraycopy(batch,len,batch,0,remaining);
        pos=remaining;
        queue.put(new QueueEntry(data,file,offset,len));
      }
      if (pos == batch.length) {
        queue.put(new QueueEntry(batch,file,offset,pos));
        batch=new byte[batch.length];
        pos=0;
      }
    }
    offset+=count;
  }
  return false;
}
