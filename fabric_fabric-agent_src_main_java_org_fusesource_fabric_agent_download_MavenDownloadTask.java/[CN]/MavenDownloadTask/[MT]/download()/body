{
  Parser parser=new Parser(url.substring("mvn:".length()));
  Set<DownloadableArtifact> downloadables;
  if (!parser.getVersion().contains("SNAPSHOT")) {
    downloadables=doCollectPossibleDownloads(parser,Collections.singletonList(system));
    if (!downloadables.isEmpty()) {
      DownloadableArtifact artifact=downloadables.iterator().next();
      URL url=artifact.getArtifactURL();
      File file=new File(url.getFile());
      if (file.exists()) {
        return file;
      }
    }
  }
  downloadables=collectPossibleDownloads(parser);
  if (LOG.isTraceEnabled()) {
    LOG.trace("Possible download locations for [" + url + "]");
    for (    DownloadableArtifact artifact : downloadables) {
      LOG.trace("  " + artifact);
    }
  }
  for (  DownloadableArtifact artifact : downloadables) {
    LOG.trace("Downloading [" + artifact + "]");
    try {
      configuration.enableProxy(artifact.getArtifactURL());
      String repository=system.getFile().getAbsolutePath();
      if (!repository.endsWith(Parser.FILE_SEPARATOR)) {
        repository=repository + Parser.FILE_SEPARATOR;
      }
      InputStream is=artifact.getInputStream();
      File file=new File(repository + parser.getArtifactPath());
      file.getParentFile().mkdirs();
      if (!file.getParentFile().isDirectory()) {
        throw new IOException("Unable to create directory " + file.getParentFile().toString());
      }
      File tmp=File.createTempFile("fabric-agent-",null,file.getParentFile());
      OutputStream os=new FileOutputStream(tmp);
      copy(is,os);
      is.close();
      os.close();
      if (file.exists() && !file.delete()) {
        throw new IOException("Unable to delete file: " + file.toString());
      }
      if (!tmp.renameTo(file)) {
        throw new IOException("Unable to rename file " + tmp.toString() + " to "+ file.toString());
      }
      return file;
    }
 catch (    IOException ignore) {
      LOG.debug(Ix2 + "Could not download [" + artifact+ "]");
      LOG.trace(Ix2 + "Reason [" + ignore.getClass().getName()+ ": "+ ignore.getMessage()+ "]");
    }
  }
  throw new IOException("URL [" + url + "] could not be resolved.");
}
