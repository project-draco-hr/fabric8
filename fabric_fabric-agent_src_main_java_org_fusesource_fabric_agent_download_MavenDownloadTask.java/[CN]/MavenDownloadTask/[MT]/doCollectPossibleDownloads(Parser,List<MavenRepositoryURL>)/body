{
  final Set<DownloadableArtifact> downloadables=new TreeSet<DownloadableArtifact>(new DownloadComparator());
  final boolean isLatest=parser.getVersion().contains("LATEST");
  final boolean isSnapshot=parser.getVersion().endsWith("SNAPSHOT");
  VersionRange versionRange=null;
  if (!isLatest && !isSnapshot) {
    try {
      versionRange=new VersionRange(parser.getVersion());
    }
 catch (    Exception ignore) {
    }
  }
  final boolean isVersionRange=versionRange != null;
  final boolean isExactVersion=!(isLatest || isSnapshot || isVersionRange);
  int priority=0;
  for (  MavenRepositoryURL repositoryURL : repositories) {
    LOG.debug("Collecting versions from repository [" + repositoryURL + "]");
    priority++;
    try {
      if (isExactVersion) {
        downloadables.add(resolveExactVersion(parser,repositoryURL,priority));
      }
 else       if (isSnapshot) {
        final DownloadableArtifact snapshot=resolveSnapshotVersion(parser,repositoryURL,priority,parser.getVersion());
        downloadables.add(snapshot);
        if (snapshot.isLocalSnapshotBuild()) {
          break;
        }
      }
 else {
        final Document metadata=getMetadata(repositoryURL.getURL(),new String[]{parser.getArtifactLocalMetdataPath(),parser.getArtifactMetdataPath()});
        if (isLatest) {
          downloadables.add(resolveLatestVersion(parser,metadata,repositoryURL,priority));
        }
 else {
          downloadables.addAll(resolveRangeVersions(parser,metadata,repositoryURL,priority,versionRange));
        }
      }
    }
 catch (    IOException ignore) {
      LOG.debug(Ix2 + "Skipping repository [" + repositoryURL+ "], reason: "+ ignore.getMessage());
    }
  }
  return downloadables;
}
