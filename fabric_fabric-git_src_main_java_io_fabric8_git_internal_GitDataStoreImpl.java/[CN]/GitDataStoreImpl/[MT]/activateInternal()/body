{
  LOGGER.info("Starting up GitDataStore " + this);
  DataStoreTemplate template=runtimeProperties.get().removeRuntimeAttribute(DataStoreTemplate.class);
  if (template != null) {
    Ref rootTag=getGit().getRepository().getRef(GitHelpers.ROOT_TAG);
    if (rootTag == null) {
      getGit().commit().setMessage("First Commit").setCommitter("fabric","user@fabric").call();
      getGit().tag().setName(GitHelpers.ROOT_TAG).setMessage("Tag the root commit").call();
    }
    LOGGER.debug("Running datastore bootstrap template: " + template);
    template.doWith(this,dataStore.get());
  }
  GitProxyService proxyService=gitProxyService.get();
  defaultProxySelector=ProxySelector.getDefault();
  ProxySelector fabricProxySelector=new FabricGitLocalHostProxySelector(defaultProxySelector,proxyService);
  ProxySelector.setDefault(fabricProxySelector);
  LOGGER.debug("Setting up FabricProxySelector: {}",fabricProxySelector);
  if (configuredUrl != null) {
    gitListener.runRemoteUrlChanged(configuredUrl);
    remoteUrl=configuredUrl;
  }
 else {
    gitService.get().addGitListener(gitListener);
    remoteUrl=gitService.get().getRemoteUrl();
    if (remoteUrl != null) {
      gitListener.runRemoteUrlChanged(remoteUrl);
    }
  }
  getInitialVersions();
  LOGGER.info("Using ZooKeeper SharedCount to react when master git repo is changed, so we can do a git pull to the local git repo.");
  counter=new SharedCount(curator.get(),ZkPath.GIT_TRIGGER.getPath(),0);
  counter.addListener(new SharedCountListener(){
    @Override public void countHasChanged(    SharedCountReader sharedCountReader,    int value) throws Exception {
      LOGGER.info("Watch counter updated to " + value + ", doing a pull");
      LockHandle writeLock=aquireWriteLock();
      try {
        doPullInternal(new GitContext(),getCredentialsProvider(),true);
      }
 catch (      Throwable e) {
        LOGGER.debug("Error during pull due " + e.getMessage(),e);
        LOGGER.warn("Error during pull due " + e.getMessage() + ". This exception is ignored.");
      }
 finally {
        writeLock.unlock();
      }
    }
    @Override public void stateChanged(    CuratorFramework curatorFramework,    ConnectionState connectionState){
    }
  }
);
  counter.start();
}
