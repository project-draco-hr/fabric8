{
  LockHandle readLock=aquireReadLock();
  try {
    assertValid();
    final File outputFile=new File(outputFileName);
    outputFile.getParentFile().mkdirs();
    final FileFilter filter;
    if (Strings.isNotBlank(wildcard)) {
      final WildcardFileFilter matcher=new WildcardFileFilter(wildcard);
      filter=new FileFilter(){
        @Override public boolean accept(        File file){
          boolean answer=matcher.accept(file);
          if (!answer) {
            File parentFile=file.getParentFile();
            if (parentFile != null) {
              answer=accept(parentFile);
            }
          }
          return answer;
        }
      }
;
    }
 else {
      filter=null;
    }
    GitOperation<String> gitop=new GitOperation<String>(){
      public String call(      Git git,      GitContext context) throws Exception {
        checkoutVersion(git,versionId);
        return doExportProfiles(git,context,outputFile,filter);
      }
    }
;
    executeRead(gitop,false);
  }
  finally {
    readLock.unlock();
  }
}
