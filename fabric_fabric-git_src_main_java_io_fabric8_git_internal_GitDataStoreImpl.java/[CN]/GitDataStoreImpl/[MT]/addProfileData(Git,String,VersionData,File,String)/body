{
  String profile=file.getName();
  if (Profiles.useDirectoriesForProfiles) {
    if (profile.endsWith(Profiles.PROFILE_FOLDER_SUFFIX)) {
      profile=prefix + profile.substring(0,profile.length() - Profiles.PROFILE_FOLDER_SUFFIX.length());
    }
 else {
      File[] files=file.listFiles();
      if (files != null) {
        for (        File child : files) {
          if (child.isDirectory()) {
            addProfileData(git,version,versionData,child,prefix + file.getName() + "-");
          }
        }
      }
      return;
    }
  }
  Ref versionRef=git.getRepository().getRefDatabase().getRef(version);
  IllegalStateAssertion.assertNotNull(versionRef,"Cannot get version ref for: " + version);
  String revision=versionRef.getObjectId().getName();
  String path=convertProfileIdToDirectory(profile);
  RevCommit commit=CommitUtils.getLastCommit(git.getRepository(),revision,CONFIGS_PROFILES + File.separator + path);
  String lastModified=commit != null ? commit.getId().abbreviate(GIT_COMMIT_SHORT_LENGTH).name() : "";
  Map<String,byte[]> configurations=doGetFileConfigurations(git,profile);
  Map<String,Map<String,String>> substituted=new HashMap<String,Map<String,String>>();
  for (  Map.Entry<String,byte[]> entry : configurations.entrySet()) {
    if (entry.getKey().endsWith(".properties")) {
      String pid=DataStoreUtils.stripSuffix(entry.getKey(),".properties");
      substituted.put(pid,DataStoreUtils.toMap(DataStoreUtils.toProperties(entry.getValue())));
    }
  }
  ProfileData profileData=new ProfileData(lastModified,Collections.unmodifiableMap(configurations),Collections.unmodifiableMap(substituted));
  versionData.profiles.put(profile,profileData);
}
