{
  if (context.isRequirePull() || context.isRequireCommit()) {
    assertWriteLock();
  }
 else {
    assertReadLock();
  }
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader gitcl=GitDataStoreImpl.class.getClassLoader();
    Thread.currentThread().setContextClassLoader(gitcl);
    LOGGER.trace("Setting ThreadContextClassLoader to {} instead of {}",gitcl,tccl);
    Git git=getGit();
    Repository repository=git.getRepository();
    if (personIdent == null) {
      personIdent=new PersonIdent(repository);
    }
    boolean changeNotification=false;
    if (context.isRequirePull()) {
      changeNotification=doPullInternal(git,context,getCredentialsProvider(),false);
    }
    T result=operation.call(git,context);
    if (context.isRequireCommit()) {
      doCommitInternal(git,context);
      changeNotification=true;
    }
    if (context.isRequirePush()) {
      doPushInternal(git,context,getCredentialsProvider());
    }
    if (changeNotification) {
      fireChangeNotification();
    }
    return result;
  }
 catch (  Exception e) {
    throw FabricException.launderThrowable(e);
  }
 finally {
    LOGGER.trace("Restoring ThreadContextClassLoader to {}",tccl);
    Thread.currentThread().setContextClassLoader(tccl);
  }
}
