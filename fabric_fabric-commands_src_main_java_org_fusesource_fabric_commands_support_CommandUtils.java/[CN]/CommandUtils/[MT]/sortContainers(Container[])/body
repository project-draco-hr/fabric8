{
  if (containers == null || containers.length <= 1) {
    return containers;
  }
  List<Container> list=new ArrayList<Container>();
  list.addAll(Arrays.asList(containers));
  Collections.sort(list,new Comparator<Container>(){
    @Override public int compare(    Container c1,    Container c2){
      if (c1 == null) {
        return 1;
      }
 else       if (c2 == null) {
        return -1;
      }
      if (c1.isRoot() && c2.getParent() != null && c2.getParent().equals(c1)) {
        return -1;
      }
 else       if (c2.isRoot() && c1.getParent() != null && c1.getParent().equals(c2)) {
        return 1;
      }
      if (c1.isRoot() && !c2.isRoot()) {
        return c1.getId().compareTo(c2.getParent().getId());
      }
 else       if (!c1.isRoot() && c2.isRoot()) {
        return c1.getParent().getId().compareTo(c2.getId());
      }
      if (!c1.isRoot() && !c2.isRoot() && !c1.getParent().equals(c2.getParent())) {
        return c1.getParent().getId().compareTo(c2.getParent().getId());
      }
      return c1.getId().compareTo(c2.getId());
    }
  }
);
  return list.toArray(new Container[0]);
}
