{
  if (!path.endsWith("/")) {
    path=path + "/";
  }
  if (!path.startsWith("/")) {
    path="/" + path;
  }
  List<Pattern> patterns=RegexSupport.getPatterns(regex);
  List<String> paths=getZooKeeper().getAllChildren(path);
  SortedSet<File> directories=new TreeSet<File>();
  Map<File,String> settings=new HashMap<File,String>();
  for (  String p : paths) {
    p=path + p;
    if (!RegexSupport.matches(patterns,p)) {
      continue;
    }
    byte[] data=getZooKeeper().getData(p);
    if (data != null) {
      settings.put(new File(target + File.separator + p+ ".cfg"),new String(data));
    }
 else {
      directories.add(new File(target + File.separator + p));
    }
  }
  if (delete) {
    if (!dryRun) {
      delete(new File(target));
    }
 else {
      System.out.printf("Deleting %s and everything under it\n",new File(target));
    }
  }
  for (  File d : directories) {
    if (d.exists() && !d.isDirectory()) {
      throw new IllegalArgumentException("Directory " + d + " exists but is not a directory");
    }
    if (!d.exists()) {
      if (!dryRun) {
        if (!d.mkdirs()) {
          throw new RuntimeException("Failed to create directory " + d);
        }
      }
 else {
        System.out.printf("Creating directory path : %s\n",d);
      }
    }
  }
  for (  File f : settings.keySet()) {
    if (f.exists() && !f.isFile()) {
      throw new IllegalArgumentException("File " + f + " exists but is not a file");
    }
    if (!f.getParentFile().exists()) {
      if (!dryRun) {
        if (!f.getParentFile().mkdirs()) {
          throw new RuntimeException("Failed to create directory " + f.getParentFile());
        }
      }
 else {
        System.out.printf("Creating directory path : %s\n",f);
      }
    }
    if (!f.exists()) {
      try {
        if (!dryRun) {
          if (!f.createNewFile()) {
            throw new RuntimeException("Failed to create file " + f);
          }
        }
 else {
          System.out.printf("Creating file : %s\n",f);
        }
      }
 catch (      IOException io) {
        throw new RuntimeException("Failed to create file " + f + " : "+ io);
      }
    }
    if (!dryRun) {
      FileWriter writer=new FileWriter(f,false);
      writer.write(settings.get(f));
      writer.close();
    }
 else {
      System.out.printf("Writing value \"%s\" to file : %s\n",settings.get(f),f);
    }
  }
}
