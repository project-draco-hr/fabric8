{
  if (props == null || Boolean.parseBoolean((String)props.get("disabled"))) {
    return false;
  }
  if (props.get("disabled") != null && "true".equalsIgnoreCase(props.get("disabled").toString())) {
    return false;
  }
  addMavenProxies(props,fabricService.getService());
  updateStatus("analyzing",null);
  PropertiesPropertyResolver syspropsResolver=new PropertiesPropertyResolver(System.getProperties());
  DictionaryPropertyResolver propertyResolver=new DictionaryPropertyResolver(props,syspropsResolver);
  final MavenConfigurationImpl config=new MavenConfigurationImpl(new DictionaryPropertyResolver(props,syspropsResolver),"org.ops4j.pax.url.mvn");
  config.setSettings(new MavenSettingsImpl(config.getSettingsFileUrl(),config.useFallbackRepositories()));
  manager=new DownloadManager(config,getDownloadExecutor());
  Map<String,String> properties=new HashMap<String,String>();
  for (Enumeration e=props.keys(); e.hasMoreElements(); ) {
    Object key=e.nextElement();
    Object val=props.get(key);
    if (!"service.pid".equals(key) && !FABRIC_ZOOKEEPER_PID.equals(key)) {
      properties.put(key.toString(),val.toString());
    }
  }
  boolean restart=false;
  Set<String> libsToRemove=new HashSet<String>(managedLibs.keySet());
  Set<String> endorsedLibsToRemove=new HashSet<String>(managedEndorsedLibs.keySet());
  Set<String> extensionLibsToRemove=new HashSet<String>(managedExtensionLibs.keySet());
  Set<String> sysPropsToRemove=new HashSet<String>(managedSysProps.keySet());
  Set<String> configPropsToRemove=new HashSet<String>(managedConfigProps.keySet());
  Properties configProps=new Properties(new File(KARAF_BASE + File.separator + "etc"+ File.separator+ "config.properties"));
  Properties systemProps=new Properties(new File(KARAF_BASE + File.separator + "etc"+ File.separator+ "system.properties"));
  for (  String key : properties.keySet()) {
    if (key.equals("framework")) {
      String url=properties.get(key);
      restart|=updateFramework(configProps,url);
    }
 else     if (key.startsWith("config.")) {
      String k=key.substring("config.".length());
      String v=properties.get(key);
      managedConfigProps.put(k,v);
      configPropsToRemove.remove(k);
      if (!v.equals(configProps.get(k))) {
        configProps.put(k,v);
        restart=true;
      }
    }
 else     if (key.startsWith("system.")) {
      String k=key.substring("system.".length());
      String v=properties.get(key);
      managedSysProps.put(k,v);
      sysPropsToRemove.remove(k);
      if (!v.equals(systemProps.get(k))) {
        systemProps.put(k,v);
        restart=true;
      }
    }
 else     if (key.startsWith("lib.")) {
      String value=properties.get(key);
      File libFile=manager.download(value).await().getFile();
      String libName=libFile.getName();
      Long checksum=ChecksumUtils.checksum(new FileInputStream(libFile));
      managedLibs.put(libName,"true");
      libsToRemove.remove(libName);
      if (!Long.toString(checksum).equals(libChecksums.getProperty(libName))) {
        Files.copy(libFile,new File(LIB_PATH,libName));
        restart=true;
      }
    }
 else     if (key.startsWith("endorsed.")) {
      String value=properties.get(key);
      File libFile=manager.download(value).await().getFile();
      String libName=libFile.getName();
      Long checksum=ChecksumUtils.checksum(new FileInputStream(libFile));
      managedEndorsedLibs.put(libName,"true");
      endorsedLibsToRemove.remove(libName);
      if (!Long.toString(checksum).equals(endorsedChecksums.getProperty(libName))) {
        Files.copy(libFile,new File(LIB_ENDORSED_PATH,libName));
        restart=true;
      }
    }
 else     if (key.startsWith("extension.")) {
      String value=properties.get(key);
      File libFile=manager.download(value).await().getFile();
      String libName=libFile.getName();
      Long checksum=ChecksumUtils.checksum(new FileInputStream(libFile));
      managedExtensionLibs.put(libName,"true");
      extensionLibsToRemove.remove(libName);
      if (!Long.toString(checksum).equals(extensionChecksums.getProperty(libName))) {
        Files.copy(libFile,new File(LIB_EXT_PATH,libName));
        restart=true;
      }
    }
  }
  for (  String sysProp : sysPropsToRemove) {
    systemProps.remove(sysProp);
    managedSysProps.remove(sysProp);
    System.clearProperty(sysProp);
    restart=true;
  }
  for (  String configProp : configPropsToRemove) {
    configProps.remove(configProp);
    managedConfigProps.remove(configProp);
    restart=true;
  }
  for (  String lib : libsToRemove) {
    File libFile=new File(LIB_PATH,lib);
    libFile.delete();
    libChecksums.remove(lib);
    managedLibs.remove(lib);
    restart=true;
  }
  for (  String lib : endorsedLibsToRemove) {
    File libFile=new File(LIB_ENDORSED_PATH,lib);
    libFile.delete();
    endorsedChecksums.remove(lib);
    managedEndorsedLibs.remove(lib);
    restart=true;
  }
  for (  String lib : extensionLibsToRemove) {
    File libFile=new File(LIB_EXT_PATH,lib);
    libFile.delete();
    extensionChecksums.remove(lib);
    managedExtensionLibs.remove(lib);
    restart=true;
  }
  libChecksums.save();
  endorsedChecksums.save();
  extensionChecksums.save();
  managedLibs.save();
  managedEndorsedLibs.save();
  managedExtensionLibs.save();
  managedConfigProps.save();
  managedSysProps.save();
  if (restart) {
    updateStatus("restarting",null);
    configProps.save();
    systemProps.save();
    System.setProperty("karaf.restart","true");
    bundleContext.getBundle(0).stop();
    return false;
  }
  final Map<String,Repository> repositories=loadRepositories(manager,getPrefixedProperties(properties,"repository."));
  FabResolverFactoryImpl fabResolverFactory=new FabResolverFactoryImpl();
  fabResolverFactory.setConfiguration(new FabricFabConfiguration(config,propertyResolver));
  fabResolverFactory.setBundleContext(bundleContext);
  fabResolverFactory.setFeaturesService(new FeaturesServiceImpl(){
    @Override public Repository[] listRepositories(){
      return repositories.values().toArray(new Repository[repositories.size()]);
    }
  }
);
  DeploymentBuilder builder=new DeploymentBuilder(manager,fabResolverFactory,repositories.values(),urlHandlersTimeout);
  updateStatus("downloading",null);
  Map<String,Resource> downloadedResources=builder.download(getPrefixedProperties(properties,"feature."),getPrefixedProperties(properties,"bundle."),getPrefixedProperties(properties,"fab."),getPrefixedProperties(properties,"req."),getPrefixedProperties(properties,"override."),getPrefixedProperties(properties,"optional."));
  for (  String uri : getPrefixedProperties(properties,"resources.")) {
    builder.addResourceRepository(new MetadataRepository(new HttpMetadataProvider(uri)));
  }
  updateStatus("resolving",null);
  Resource systemBundle=systemBundleContext.getBundle(0).adapt(BundleRevision.class);
  Collection<Resource> allResources=builder.resolve(systemBundle,resolveOptionalImports);
  Set<String> ignoredBundles=getPrefixedProperties(properties,"ignore.");
  Map<String,StreamProvider> providers=builder.getProviders();
  install(allResources,ignoredBundles,providers);
  installFeatureConfigs(bundleContext,downloadedResources);
  return true;
}
