{
  BuildConfigSpec spec=buildConfig.getSpec();
  if (spec == null) {
    spec=new BuildConfigSpec();
    buildConfig.setSpec(spec);
  }
  if (!foundExistingGitUrl && Strings.isNotBlank(gitUrl)) {
    BuildSource source=spec.getSource();
    if (source == null) {
      source=new BuildSource();
      spec.setSource(source);
    }
    source.setType("Git");
    GitBuildSource git=source.getGit();
    if (git == null) {
      git=new GitBuildSource();
      source.setGit(git);
    }
    git.setUri(gitUrl);
  }
  if (Strings.isNotBlank(buildImageStream) && Strings.isNotBlank(buildImageTag)) {
    BuildStrategy strategy=spec.getStrategy();
    if (strategy == null) {
      strategy=new BuildStrategy();
      spec.setStrategy(strategy);
    }
    strategy.setType("Custom");
    CustomBuildStrategy customStrategy=strategy.getCustomStrategy();
    if (customStrategy == null) {
      customStrategy=new CustomBuildStrategy();
      strategy.setCustomStrategy(customStrategy);
    }
    ListEnvVarBuilder envBuilder=new ListEnvVarBuilder();
    if (Strings.isNotBlank(jenkinsUrl)) {
      envBuilder.withEnvVar("BASE_URI",jenkinsUrl);
    }
    envBuilder.withEnvVar("JOB_NAME",name);
    customStrategy.setEnv(envBuilder.build());
    customStrategy.setFrom(new ObjectReferenceBuilder().withKind("DockerImage").withName(s2iCustomBuilderImage).build());
  }
  List<BuildTriggerPolicy> triggers=spec.getTriggers();
  if (triggers == null) {
    triggers=new ArrayList<>();
  }
  if (triggers.isEmpty()) {
    triggers.add(new BuildTriggerPolicyBuilder().withType("GitHub").withNewGithub().withSecret(secret).endGithub().build());
    triggers.add(new BuildTriggerPolicyBuilder().withType("Generic").withNewGeneric().withSecret(secret).endGeneric().build());
    spec.setTriggers(triggers);
  }
  return buildConfig;
}
