{
  File json=getKubernetesJson();
  if (!Files.isFile(json)) {
    if (Files.isFile(kubernetesSourceJson)) {
      json=kubernetesSourceJson;
    }
 else {
      if (failOnNoKubernetesJson) {
        throw new MojoFailureException("No such generated kubernetes json file: " + json + " or source json file "+ kubernetesSourceJson);
      }
 else {
        getLog().warn("No such generated kubernetes json file: " + json + " or source json file "+ kubernetesSourceJson+ " for this project so ignoring");
        return;
      }
    }
  }
  KubernetesClient api=getKubernetes();
  getLog().info("Using kubernetes at: " + api.getAddress() + " in namespace "+ api.getNamespace());
  getLog().info("Kubernetes JSON: " + json);
  try {
    Object dto=KubernetesHelper.loadJson(json);
    if (dto == null) {
      throw new MojoFailureException("Could not load kubernetes json: " + json);
    }
    Controller controller=new Controller(kubernetes);
    controller.setAllowCreate(createNewResources);
    controller.apply(dto,json.getName());
  }
 catch (  IOException e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
}
