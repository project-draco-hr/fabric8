{
  File json=getKubernetesJson();
  if (!Files.isFile(json)) {
    if (Files.isFile(kubernetesSourceJson)) {
      json=kubernetesSourceJson;
    }
 else {
      if (failOnNoKubernetesJson) {
        throw new MojoFailureException("No such generated kubernetes json file: " + json + " or source json file "+ kubernetesSourceJson);
      }
 else {
        getLog().warn("No such generated kubernetes json file: " + json + " or source json file "+ kubernetesSourceJson+ " for this project so ignoring");
        return;
      }
    }
  }
  KubernetesClient kubernetes=getKubernetes();
  getLog().info("Using kubernetes at: " + kubernetes.getAddress() + " in namespace "+ kubernetes.getNamespace());
  getLog().info("Kubernetes JSON: " + json);
  try {
    Controller controller=createController();
    controller.setAllowCreate(createNewResources);
    controller.setServicesOnlyMode(servicesOnly);
    controller.setIgnoreServiceMode(ignoreServices);
    controller.setLogJsonDir(jsonLogDir);
    controller.setBasedir(getRootProjectFolder());
    controller.setIgnoreRunningOAuthClients(ignoreRunningOAuthClients);
    controller.setProcessTemplatesLocally(processTemplatesLocally);
    boolean openShift=kubernetes.isOpenShift();
    getLog().info("Is OpenShift: " + openShift);
    if (!openShift) {
      disableOpenShiftFeatures(controller);
    }
    String fileName=json.getName();
    Object dto=KubernetesHelper.loadJson(json);
    if (dto == null) {
      throw new MojoFailureException("Could not load kubernetes json: " + json);
    }
    if (dto instanceof Template) {
      Template template=(Template)dto;
      dto=applyTemplates(template,kubernetes,controller,fileName);
    }
    Set<KubernetesList> kubeConfigs=new LinkedHashSet<>();
    if (!combineDependencies) {
      for (      File dependency : getDependencies()) {
        getLog().info("Found dependency: " + dependency);
        loadDependency(getLog(),kubeConfigs,dependency);
      }
    }
    Comparator<HasMetadata> metadataComparator=new Comparator<HasMetadata>(){
      @Override public int compare(      HasMetadata left,      HasMetadata right){
        if (left instanceof Service) {
          return -1;
        }
 else         if (right instanceof Service) {
          return 1;
        }
 else         if (left instanceof ReplicationController) {
          return -1;
        }
 else         if (right instanceof ReplicationController) {
          return -1;
        }
 else {
          return 0;
        }
      }
    }
;
    Set<HasMetadata> entities=new TreeSet<>(metadataComparator);
    for (    KubernetesList c : kubeConfigs) {
      entities.addAll(c.getItems());
    }
    entities.addAll(KubernetesHelper.toItemList(dto));
    if (createRoutes) {
      createRoutes(kubernetes,entities);
    }
    for (    HasMetadata entity : entities) {
      if (entity instanceof Pod) {
        Pod pod=(Pod)entity;
        controller.applyPod(pod,fileName);
      }
 else       if (entity instanceof Service) {
        Service service=(Service)entity;
        controller.applyService(service,fileName);
      }
 else       if (entity instanceof ReplicationController) {
        ReplicationController replicationController=(ReplicationController)entity;
        controller.applyReplicationController(replicationController,fileName);
      }
 else       if (entity != null) {
        controller.apply(entity,fileName);
      }
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException(e.getMessage(),e);
  }
}
