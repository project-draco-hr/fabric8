{
  Set<File> dependnencies=new LinkedHashSet<>();
  MavenProject project=getProject();
  Path dir=Paths.get(project.getBuild().getOutputDirectory(),"deps");
  if (!dir.toFile().exists() && !dir.toFile().mkdirs()) {
    throw new IOException("Cannot create temp directory at:" + dir.toAbsolutePath());
  }
  ArtifactResolutionRequest request=new ArtifactResolutionRequest();
  request.setLocalRepository(localRepository);
  request.setRemoteRepositories(remoteRepositories);
  request.setArtifact(project.getArtifact());
  request.setArtifactDependencies(project.getDependencyArtifacts());
  request.setResolveTransitively(false);
  request.setResolveRoot(false);
  request.setForceUpdate(false);
  request.setOffline(true);
  ArtifactResolutionResult result=resolver.resolve(request);
  for (  Artifact missing : result.getMissingArtifacts()) {
    getLog().warn("Missing:" + missing);
  }
  for (  Exception exception : result.getExceptions()) {
    getLog().error("Exception:" + exception);
  }
  for (  Artifact dependency : result.getArtifacts()) {
    File f=dependency.getFile();
    getLog().debug("Checking file:" + f.getAbsolutePath());
    if (f.getName().endsWith("jar") && hasKubernetesJson(f)) {
      getLog().info("Found file:" + f.getAbsolutePath());
      try (FileInputStream fis=new FileInputStream(f);JarInputStream jis=new JarInputStream(fis)){
        Zips.unzip(new FileInputStream(f),dir.toFile());
        File jsonPath=dir.resolve(DEFAULT_CONFIG_FILE_NAME).toFile();
        if (jsonPath.exists()) {
          dependnencies.add(jsonPath);
        }
      }
     }
 else     if (f.getName().endsWith(".json")) {
      dependnencies.add(f);
    }
  }
  return dependnencies;
}
