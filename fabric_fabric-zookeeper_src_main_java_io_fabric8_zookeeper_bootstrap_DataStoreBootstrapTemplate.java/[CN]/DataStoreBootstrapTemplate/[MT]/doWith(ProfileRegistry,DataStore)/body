{
  String versionId=options.getVersion();
  int minimumPort=options.getMinimumPort();
  int maximumPort=options.getMaximumPort();
  String zooKeeperServerHost=options.getBindAddress();
  int zooKeeperServerPort=options.getZooKeeperServerPort();
  int zooKeeperServerConnectionPort=options.getZooKeeperServerConnectionPort();
  int mappedPort=Ports.mapPortToRange(zooKeeperServerPort,minimumPort,maximumPort);
  CuratorFramework curator=null;
  try {
    curator=createCuratorFramework(connectionUrl,options);
    curator.start();
    curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
    File importPath=new File(options.getImportPath());
    if (!importPath.isAbsolute()) {
      importPath=new File(homeDir,options.getImportPath());
    }
    if (options.isAutoImportEnabled()) {
      profileRegistry.importFromFileSystem(importPath.getAbsolutePath());
    }
    ZooKeeperUtils.setData(curator,ZkPath.CONFIG_DEFAULT_VERSION.getPath(),versionId);
    Map<String,String> jaasConfig=Collections.singletonMap("encryption.enabled","${zk:/fabric/authentication/encryption.enabled}");
    Profile defaultProfile=profileRegistry.getProfile(versionId,"default");
    if (defaultProfile == null) {
      ProfileBuilder builder=ProfileBuilder.Factory.create(versionId,"default");
      builder.addConfiguration("io.fabric8.jaas",jaasConfig);
      String createdId=profileRegistry.createProfile(builder.getProfile());
      defaultProfile=profileRegistry.getRequiredProfile(versionId,createdId);
    }
 else {
      ProfileBuilder builder=ProfileBuilder.Factory.createFrom(defaultProfile);
      builder.addConfiguration("io.fabric8.jaas",jaasConfig);
      String updatedId=profileRegistry.updateProfile(builder.getProfile());
      defaultProfile=profileRegistry.getRequiredProfile(versionId,updatedId);
    }
    String defaultProfileId=defaultProfile.getId();
    ZooKeeperUtils.setData(curator,ZkPath.CONFIG_ENSEMBLE_URL.getPath(),"${zk:" + name + "/ip}:"+ zooKeeperServerConnectionPort);
    ZooKeeperUtils.setData(curator,ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),PasswordEncoder.encode(options.getZookeeperPassword()));
    Properties zkProps=new Properties();
    zkProps.setProperty("zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
    zkProps.setProperty("zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
    profileRegistry.setFileConfiguration(versionId,defaultProfileId,"io.fabric8.zookeeper.properties",DataStoreUtils.toBytes(zkProps));
    String profileId="fabric-ensemble-0000";
    IllegalStateAssertion.assertFalse(profileRegistry.hasProfile(versionId,profileId),"Profile already exists: " + versionId + "/"+ profileId);
    ProfileBuilder ensembleProfileBuilder=ProfileBuilder.Factory.create(versionId,profileId);
    String ensembleProfileId=profileRegistry.createProfile(ensembleProfileBuilder.getProfile());
    profileRegistry.setProfileAttribute(versionId,ensembleProfileId,"abstract","true");
    profileRegistry.setProfileAttribute(versionId,ensembleProfileId,"hidden","true");
    Properties ensembleProps=new Properties();
    ensembleProps.put("tickTime",String.valueOf(options.getZooKeeperServerTickTime()));
    ensembleProps.put("initLimit",String.valueOf(options.getZooKeeperServerInitLimit()));
    ensembleProps.put("syncLimit",String.valueOf(options.getZooKeeperServerSyncLimit()));
    ensembleProps.put("dataDir",options.getZooKeeperServerDataDir() + File.separator + "0000");
    loadPropertiesFrom(ensembleProps,importPath + "/fabric/profiles/default.profile/io.fabric8.zookeeper.server.properties");
    profileRegistry.setFileConfiguration(versionId,ensembleProfileId,"io.fabric8.zookeeper.server-0000.properties",DataStoreUtils.toBytes(ensembleProps));
    profileId="fabric-ensemble-0000-1";
    IllegalStateAssertion.assertFalse(profileRegistry.hasProfile(versionId,profileId),"Profile already exists: " + versionId + "/"+ profileId);
    ProfileBuilder serverProfileBuilder=ProfileBuilder.Factory.create(versionId,profileId);
    String ensembleServerProfileId=profileRegistry.createProfile(serverProfileBuilder.getProfile());
    profileRegistry.setProfileAttribute(versionId,ensembleServerProfileId,"hidden","true");
    profileRegistry.setProfileAttribute(versionId,ensembleServerProfileId,"parents",ensembleProfileId);
    Properties serverProps=new Properties();
    serverProps.put("clientPort",String.valueOf(mappedPort));
    serverProps.put("clientPortAddress",zooKeeperServerHost);
    profileRegistry.setFileConfiguration(versionId,ensembleServerProfileId,"io.fabric8.zookeeper.server-0000.properties",DataStoreUtils.toBytes(serverProps));
    ZooKeeperUtils.setData(curator,ZkPath.CONFIG_ENSEMBLES.getPath(),"0000");
    ZooKeeperUtils.setData(curator,ZkPath.CONFIG_ENSEMBLE.getPath("0000"),name);
    Profile fabricProfile=profileRegistry.getProfile(versionId,"fabric");
    if (fabricProfile == null) {
      ProfileBuilder builder=ProfileBuilder.Factory.create(versionId,"fabric");
      String createdId=profileRegistry.createProfile(builder.getProfile());
      fabricProfile=profileRegistry.getRequiredProfile(versionId,createdId);
    }
    String fabricProfileId=fabricProfile.getId();
    Properties agentProps=DataStoreUtils.toProperties(fabricProfile.getFileConfiguration("io.fabric8.agent.properties"));
    agentProps.put("feature.fabric-commands","fabric-commands");
    profileRegistry.setFileConfiguration(versionId,"fabric","io.fabric8.agent.properties",DataStoreUtils.toBytes(agentProps));
    ZooKeeperUtils.createDefault(curator,ZkPath.CONFIG_CONTAINER.getPath(name),versionId);
    StringBuilder profilesBuilder=new StringBuilder();
    Set<String> profiles=options.getProfiles();
    profilesBuilder.append("fabric").append(" ").append("fabric-ensemble-0000-1");
    for (    String p : profiles) {
      profilesBuilder.append(" ").append(p);
    }
    if (!options.isAgentEnabled()) {
      profilesBuilder.append(" ").append("unmanaged");
    }
    ZooKeeperUtils.createDefault(curator,ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(versionId,name),profilesBuilder.toString());
    EncryptionSupport encryption=addUsersToZookeeper(curator,options.getUsers());
    ZooKeeperUtils.createDefault(curator,"/fabric/authentication/encryption.enabled",Boolean.valueOf(encryption != null).toString());
    ZooKeeperUtils.createDefault(curator,"/fabric/authentication/domain","karaf");
    ZooKeeperUtils.createDefault(curator,ZkPath.AUTHENTICATION_CRYPT_ALGORITHM.getPath(),"PBEWithMD5AndDES");
    ZooKeeperUtils.createDefault(curator,ZkPath.AUTHENTICATION_CRYPT_PASSWORD.getPath(),PasswordEncoder.encode(options.getZookeeperPassword()));
    aclManager.fixAcl(curator,"/fabric",true);
  }
 catch (  Exception ex) {
    throw new FabricException("Unable to create bootstrap configuration",ex);
  }
 finally {
    curator.close();
  }
}
