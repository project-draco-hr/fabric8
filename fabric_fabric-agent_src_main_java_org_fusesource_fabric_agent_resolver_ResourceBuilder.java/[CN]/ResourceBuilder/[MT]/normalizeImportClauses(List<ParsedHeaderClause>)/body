{
  Set<String> dupeSet=new HashSet<String>();
  for (  ParsedHeaderClause clause : clauses) {
    Object v=clause.attrs.get(Constants.VERSION_ATTRIBUTE);
    Object sv=clause.attrs.get(Constants.PACKAGE_SPECIFICATION_VERSION);
    if ((v != null) && (sv != null)) {
      if (!((String)v).trim().equals(((String)sv).trim())) {
        throw new IllegalArgumentException("Both version and specification-version are specified, but they are not equal.");
      }
    }
    if ((v != null) || (sv != null)) {
      clause.attrs.remove(Constants.PACKAGE_SPECIFICATION_VERSION);
      v=(v == null) ? sv : v;
      clause.attrs.put(Constants.VERSION_ATTRIBUTE,VersionRange.parseVersionRange(v.toString()));
    }
    v=clause.attrs.get(Constants.BUNDLE_VERSION_ATTRIBUTE);
    if (v != null) {
      clause.attrs.put(Constants.BUNDLE_VERSION_ATTRIBUTE,VersionRange.parseVersionRange(v.toString()));
    }
    for (    String pkgName : clause.paths) {
      if (!dupeSet.contains(pkgName)) {
        if (pkgName.startsWith("java.")) {
          throw new BundleException("Importing java.* packages not allowed: " + pkgName);
        }
 else         if (pkgName.equals(".")) {
          throw new BundleException("Importing '.' is invalid.");
        }
 else         if (pkgName.length() == 0) {
          throw new BundleException("Imported package names cannot be zero length.");
        }
        dupeSet.add(pkgName);
      }
 else {
        throw new BundleException("Duplicate import: " + pkgName);
      }
    }
  }
  return clauses;
}
