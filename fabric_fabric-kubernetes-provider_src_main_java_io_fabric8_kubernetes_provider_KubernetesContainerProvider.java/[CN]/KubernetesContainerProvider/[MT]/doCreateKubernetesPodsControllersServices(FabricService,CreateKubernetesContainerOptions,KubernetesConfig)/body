{
  List<String> definitions=config.getDefinitions();
  String containerId="TODO";
  byte[] json=null;
  Kubernetes kubernetes=getKubernetes();
  Objects.notNull(kubernetes,"kubernetes");
  for (  String definition : definitions) {
    definition=definition.trim();
    if (!definition.contains(":")) {
      Set<String> profileIds=options.getProfiles();
      String versionId=options.getVersion();
      List<Profile> profiles=Profiles.getProfiles(service,profileIds,versionId);
      json=Profiles.getFileConfiguration(profiles,definition);
    }
    if (json == null) {
      URL url=null;
      try {
        url=new URL(definition);
      }
 catch (      MalformedURLException e) {
        LOG.warn("Could not parse kube definition URL " + definition + ". "+ e,e);
      }
      if (url != null) {
        try {
          InputStream in=url.openStream();
          if (in != null) {
            json=Files.readBytes(in);
          }
        }
 catch (        IOException e) {
          LOG.warn("Failed to load URL " + url + ". "+ e,e);
        }
      }
    }
    if (json != null) {
      Object dto=null;
      try {
        ObjectReader reader=objectMapper.reader();
        JsonNode tree=null;
        if (json != null) {
          tree=reader.readTree(new ByteArrayInputStream(json));
          if (tree != null) {
            JsonNode kindNode=tree.get("kind");
            if (kindNode != null) {
              String kind=kindNode.asText();
              if (Objects.equal("Pod",kind)) {
                PodSchema podSchema=objectMapper.reader(PodSchema.class).readValue(json);
                LOG.info("Creating a pod from " + definition);
                try {
                  kubernetes.createPod(podSchema);
                }
 catch (                Exception e) {
                  LOG.error("Failed to create pod from " + definition + ". "+ e+ ". "+ podSchema,e);
                }
              }
 else               if (Objects.equal("Controller",kind)) {
                ControllerSchema controllerSchema=objectMapper.reader(ControllerSchema.class).readValue(json);
                LOG.info("Creating a controller from " + definition);
                try {
                  kubernetes.createReplicationController(controllerSchema);
                }
 catch (                Exception e) {
                  LOG.error("Failed to create controller from " + definition + ". "+ e+ ". "+ controllerSchema,e);
                }
              }
 else               if (Objects.equal("Service",kind)) {
                ServiceSchema serviceSchema=objectMapper.reader(ServiceSchema.class).readValue(json);
                LOG.info("Creating a service from " + definition);
                try {
                  kubernetes.createService(serviceSchema);
                }
 catch (                Exception e) {
                  LOG.error("Failed to create controller from " + definition + ". "+ e+ ". "+ serviceSchema,e);
                }
              }
 else {
                LOG.warn("Unknown JSON from " + definition + ". JSON: "+ tree);
              }
            }
          }
        }
      }
 catch (      IOException e) {
        LOG.warn("Failed to parse JSON definition: " + definition + ". "+ e,e);
      }
    }
  }
  String status="TODO";
  List<String> warnings=new ArrayList<>();
  CreateKubernetesContainerMetadata metadata=createKubernetesContainerMetadata(containerId,"kubelet",status,warnings);
  return metadata;
}
