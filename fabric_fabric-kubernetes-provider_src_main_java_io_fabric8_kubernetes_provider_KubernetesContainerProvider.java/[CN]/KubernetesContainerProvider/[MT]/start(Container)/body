{
  assertValid();
  CreateKubernetesContainerMetadata containerMetadata=getContainerMetadata(container);
  CreateKubernetesContainerOptions options=containerMetadata.getCreateOptions();
  if (containerMetadata != null && containerMetadata.isKubelet()) {
    try {
      FabricService service=getFabricService();
      List<String> kubelets=getKubeletFileNames(service,options);
      if (kubelets.size() > 0) {
        startKubletPodsReplicationControllersServices(service,options,kubelets,containerMetadata);
      }
    }
 catch (    Exception e) {
      String message="Could not start kubelet for container: " + container.getId() + ": "+ e+ Dockers.dockerErrorMessage(e);
      LOG.warn(message,e);
      throw new RuntimeException(message,e);
    }
  }
 else {
    try {
      DockerCreateContainerParameters parameters=new DockerCreateContainerParameters(options).invoke();
      doCreateDockerContainer(options,parameters);
    }
 catch (    Exception e) {
      String message="Could not start pod for container: " + container.getId() + ": "+ e+ Dockers.dockerErrorMessage(e);
      LOG.warn(message,e);
      throw new RuntimeException(message,e);
    }
  }
}
