{
  assertValid();
  CreateKubernetesContainerMetadata containerMetadata=getContainerMetadata(container);
  CreateKubernetesContainerOptions options=containerMetadata.getCreateOptions();
  if (containerMetadata != null && containerMetadata.isKubelet()) {
    try {
      FabricService service=getFabricService();
      List<String> kubelets=getKubeletFileNames(service,options);
      if (kubelets.size() > 0) {
        stopKubletPodsReplicationControllersServices(service,options,kubelets,containerMetadata);
      }
    }
 catch (    Exception e) {
      String message="Could not start kubelet for container: " + container.getId() + ": "+ e+ Dockers.dockerErrorMessage(e);
      LOG.warn(message,e);
      throw new RuntimeException(message,e);
    }
  }
 else {
    String id=getPodId(container);
    if (!Strings.isNullOrBlank(id)) {
      try {
        deletePod(id);
      }
 catch (      Exception e) {
        String message="Could not remove pod: it probably no longer exists " + e + Dockers.dockerErrorMessage(e);
        LOG.warn(message,e);
        throw new RuntimeException(message,e);
      }
      container.setProvisionResult(Container.PROVISION_STOPPED);
    }
  }
}
