{
  EnumMap<EventType,Boolean> endpointFilterSet=new EnumMap<EventType,Boolean>(EventType.class);
  EnumMap<EventType,Boolean> exchangeFilterSet=new EnumMap<EventType,Boolean>(EventType.class);
  for (  Policy policy : allEvents) {
    LOG.debug("Applying ALL EVENTS policy to " + notifier + " for bundle: "+ camelContextService.getBundleSymbolicName()+ ": "+ policy);
    for (    EventType et : EventType.values()) {
      if (et == EventType.ALL) {
        continue;
      }
      EventTypeConfiguration config=notifier.getConfig(et);
      config.setInclude(policy.getAction().getType() == ActionType.INCLUDE);
      ExpressionFilter exchangeFilter=policy.getTypedFilterFor(ScopeElement.EXCHANGE,ExpressionFilter.class);
      if (exchangeFilter != null) {
        if (exchangeFilterSet.get(et)) {
          LOG.warn("Duplicate policy definition. Exchange filter had already been set for event: %s",et);
        }
        endpointFilterSet.put(et,Boolean.TRUE);
        Language language=camelContextService.getCamelContext().resolveLanguage(exchangeFilter.getLanguage());
        ObjectHelper.notNull(language,"Predicate language",policy);
        Predicate predicate=language.createPredicate(exchangeFilter.getExpression());
        ObjectHelper.notNull(predicate,"Predicate object",policy);
        config.getExchangeFilters().add(predicate);
      }
      LOG.debug("Resulting EventTypeConfiguration(" + et + ") for "+ notifier+ " for bundle: "+ camelContextService.getBundleSymbolicName()+ ": "+ config);
    }
  }
}
