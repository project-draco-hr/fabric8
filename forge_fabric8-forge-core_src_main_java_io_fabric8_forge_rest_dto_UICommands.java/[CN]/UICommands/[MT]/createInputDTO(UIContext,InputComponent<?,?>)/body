{
  String name=input.getName();
  String description=input.getDescription();
  String label=input.getLabel();
  String requiredMessage=input.getRequiredMessage();
  char shortNameChar=input.getShortName();
  String shortName=Character.toString(shortNameChar);
  Object value=convertValueToSafeJson(input.getValueConverter(),InputComponents.getValueFor(input));
  Class<?> valueType=input.getValueType();
  String javaType=null;
  if (valueType != null) {
    javaType=valueType.getCanonicalName();
  }
  String type=JsonSchemaTypes.getJsonSchemaTypeName(valueType);
  boolean enabled=input.isEnabled();
  boolean required=input.isRequired();
  List<Object> enumValues=new ArrayList<>();
  Iterable valueChoices=null;
  Converter converter=null;
  boolean isSelect=false;
  if (input instanceof SelectComponent) {
    SelectComponent selectComponent=(SelectComponent)input;
    valueChoices=selectComponent.getValueChoices();
    converter=selectComponent.getItemLabelConverter();
    isSelect=true;
  }
  if (valueChoices == null && input instanceof HasCompleter) {
    HasCompleter hasCompleter=(HasCompleter)input;
    UICompleter completer=hasCompleter.getCompleter();
    if (completer != null) {
      Object currentValue=InputComponents.getValueFor(input);
      String textValue=currentValue != null ? currentValue.toString() : "";
      valueChoices=completer.getCompletionProposals(context,input,textValue);
      converter=null;
    }
  }
  if (valueChoices != null) {
    for (    Object valueChoice : valueChoices) {
      Object jsonValue=convertValueToSafeJson(converter,valueChoice);
      enumValues.add(jsonValue);
    }
    if (!isSelect) {
    }
  }
  if (enumValues.isEmpty()) {
    enumValues=null;
  }
  return new PropertyDTO(name,description,label,requiredMessage,value,javaType,type,enabled,required,enumValues);
}
