{
  System.err.println(executeCommand("fabric:create -n"));
  System.err.println(executeCommand("fabric:profile-list"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
    Set<Container> containers=ContainerBuilder.create(fabricProxy,2).withName("cnt").withProfiles("default").assertProvisioningResult().build();
    try {
      LinkedList<Container> containerList=new LinkedList<Container>(containers);
      Container broker=containerList.removeLast();
      setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(broker.getId()),"changing");
      System.err.println(executeCommand("fabric:container-change-profile " + broker.getId() + " mq-default"));
      Provision.provisioningSuccess(Arrays.asList(new Container[]{broker}),PROVISION_TIMEOUT);
      System.err.println(executeCommand("fabric:cluster-list"));
      for (      Container c : containerList) {
        setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(c.getId()),"changing");
        System.err.println(executeCommand("fabric:container-change-profile " + c.getId() + " example-camel-mq"));
      }
      Provision.provisioningSuccess(containerList,PROVISION_TIMEOUT);
      Assert.assertTrue(Provision.waitForCondition(containerList,new ContainerCondition(){
        @Override public Boolean checkConditionOnContainer(        final Container c){
          System.err.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " osgi:list"));
          System.err.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-list"));
          String completed=executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-info route2 | grep \"Exchanges Completed\"");
          System.err.println(completed);
          if (completed.contains("Exchanges Completed") && !completed.contains("Exchanges Completed: 0")) {
            return true;
          }
 else {
            return false;
          }
        }
      }
,10000L));
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
