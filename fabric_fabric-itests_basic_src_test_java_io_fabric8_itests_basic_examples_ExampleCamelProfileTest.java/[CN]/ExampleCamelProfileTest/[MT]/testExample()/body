{
  System.out.println(executeCommand("fabric:create -n --wait-for-provisioning"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    Set<Container> containers=ContainerBuilder.create(fabricProxy,1).withName("cnt").withProfiles("quickstarts-karaf-beginner-camel.log").assertProvisioningResult().build();
    Assert.assertEquals("Should be 1 container",1,containers.size());
    try {
      Assert.assertTrue(Provision.waitForCondition(containers,new ContainerCondition(){
        @Override public Boolean checkConditionOnContainer(        final Container c){
          System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " osgi:list"));
          System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-list"));
          String completed=executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-info log-route | grep \"Exchanges Completed\"");
          System.out.println(completed);
          if (completed.contains("Exchanges Completed") && !completed.contains("Exchanges Completed: 0")) {
            return true;
          }
 else {
            return false;
          }
        }
      }
,10000L));
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
