{
  preCreateContainer(name);
  CreateEnsembleOptions ensembleOptions=CreateEnsembleOptions.build().zookeeperPassword(zookeeperPassword).user(newUser,newUserPassword + "," + newUserRole);
  CreateSshContainerOptions options=CreateContainerOptionsBuilder.ssh().name(name).resolver(resolver).ensembleServer(isEnsembleServer).number(1).host(host).username(user).password(password).privateKeyFile(privateKeyFile != null ? privateKeyFile : CreateSshContainerOptions.DEFAULT_PRIVATE_KEY_FILE).passPhrase(passPhrase).port(port).sshRetries(sshRetries).minimumPort(minimumPort).maximumPort(maximumPort).password(password).proxyUri(proxyUri != null ? proxyUri : fabricService.getMavenRepoURI()).zookeeperUrl(fabricService.getZookeeperUrl()).zookeeperPassword(isEnsembleServer && zookeeperPassword != null ? zookeeperPassword : fabricService.getZookeeperPassword()).jvmOpts(jvmOpts).createEnsembleOptions(ensembleOptions);
  if (path != null && !path.isEmpty()) {
    options.setPath(path);
  }
  CreateContainerMetadata[] metadatas=fabricService.createContainers(options);
  if (isEnsembleServer && metadatas != null && metadatas.length > 0 && metadatas[0].isSuccess()) {
    ShellUtils.storeZookeeperPassword(session,metadatas[0].getCreateOptions().getZookeeperPassword());
  }
  displayContainers(metadatas);
  postCreateContainers(metadatas);
  return null;
}
