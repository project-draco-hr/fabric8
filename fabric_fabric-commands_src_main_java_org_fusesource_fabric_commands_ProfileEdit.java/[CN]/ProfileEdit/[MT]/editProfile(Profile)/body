{
  Map<String,Map<String,String>> config=profile.getConfigurations();
  Map<String,String> pidConfig=config.get(AGENT_PID);
  if (pidConfig == null) {
    pidConfig=new HashMap<String,String>();
  }
  if (featuresList != null && !featuresList.isEmpty()) {
    String[] features=featuresList.split(DELIMETER);
    for (    String feature : features) {
      updateConfig(pidConfig,FEATURE_PREFIX + feature.replace('/','_'),feature,set,delete);
    }
  }
  if (repositoryUriList != null && !repositoryUriList.isEmpty()) {
    String[] repositoryURIs=repositoryUriList.split(DELIMETER);
    for (    String repopsitoryURI : repositoryURIs) {
      updateConfig(pidConfig,REPOSITORY_PREFIX + repopsitoryURI.replace('/','_'),repopsitoryURI,set,delete);
    }
  }
  if (bundlesList != null && !bundlesList.isEmpty()) {
    String[] bundles=bundlesList.split(DELIMETER);
    for (    String bundlesLocation : bundles) {
      updateConfig(pidConfig,BUNDLE_PREFIX + bundlesLocation.replace('/','_'),bundlesLocation,set,delete);
    }
  }
  if (fabsList != null && !fabsList.isEmpty()) {
    String[] fabs=fabsList.split(DELIMETER);
    for (    String fabsLocation : fabs) {
      updateConfig(pidConfig,FAB_PREFIX + fabsLocation.replace('/','_'),fabsLocation,set,delete);
    }
  }
  if (configAdminConfigList != null && !configAdminConfigList.isEmpty()) {
    Map<String,String> configMap=extractConfigs(configAdminConfigList);
    for (    Map.Entry<String,String> configEntries : configMap.entrySet()) {
      String key=configEntries.getKey();
      if (key.contains(PID_KEY_SEPARATOR)) {
        String pid=key.substring(0,key.lastIndexOf(PID_KEY_SEPARATOR));
        key=key.substring(key.lastIndexOf(PID_KEY_SEPARATOR) + 1);
        String value=configEntries.getValue();
        Map<String,String> cfg=config.get(pid);
        if (cfg == null) {
          cfg=new HashMap<String,String>();
        }
        if (importPid) {
          importPidFromLocalConfigAdmin(pid,cfg);
        }
        updateConfig(cfg,key,value,set,delete);
        config.put(pid,cfg);
      }
    }
  }
  if (systemPropertyList != null && !systemPropertyList.isEmpty()) {
    String[] keyValues=systemPropertyList.split("=");
    Map<String,String> configMap=extractConfigs(systemPropertyList);
    for (    Map.Entry<String,String> configEntries : configMap.entrySet()) {
      String key=configEntries.getKey();
      String value=configEntries.getValue();
      updateConfig(pidConfig,SYSTEM_PREFIX + key,value,set,delete);
    }
  }
  if (configPropertyList != null && !configPropertyList.isEmpty()) {
    String[] keyValues=configPropertyList.split("=");
    Map<String,String> configMap=extractConfigs(configPropertyList);
    for (    Map.Entry<String,String> configEntries : configMap.entrySet()) {
      String key=configEntries.getKey();
      String value=configEntries.getValue();
      updateConfig(pidConfig,CONFIG_PREFIX + key,value,set,delete);
    }
  }
  config.put(AGENT_PID,pidConfig);
  profile.setConfigurations(config);
}
