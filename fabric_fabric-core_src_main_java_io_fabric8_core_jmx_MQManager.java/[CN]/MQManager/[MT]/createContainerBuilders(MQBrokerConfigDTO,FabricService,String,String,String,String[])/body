{
  ContainerProvider containerProvider=fabricService.getProvider(containerProviderScheme);
  Objects.notNull(containerProvider,"No ContainerProvider available for scheme: " + containerProviderScheme);
  if (!containerProvider.isValidProvider()) {
    throw new IllegalArgumentException("ContainerProvider for scheme: " + containerProviderScheme + " is not valid in current environment");
  }
  List<CreateContainerBasicOptions.Builder> containerBuilders=new ArrayList<CreateContainerBasicOptions.Builder>();
  for (  String container : createContainers) {
    String type=null;
    String parent=fabricService.getCurrentContainerName();
    String jvmOpts=dto.getJvmOpts();
    CreateContainerBasicOptions.Builder builder=containerProvider.newBuilder();
    builder=(CreateContainerBasicOptions.Builder)builder.name(container).parent(parent).number(dto.requiredInstances()).ensembleServer(false).proxyUri(fabricService.getMavenRepoURI()).jvmOpts(jvmOpts).zookeeperUrl(fabricService.getZookeeperUrl()).zookeeperPassword(fabricService.getZookeeperPassword()).profiles(profileId).version(version);
    containerBuilders.add(builder);
  }
  return containerBuilders;
}
