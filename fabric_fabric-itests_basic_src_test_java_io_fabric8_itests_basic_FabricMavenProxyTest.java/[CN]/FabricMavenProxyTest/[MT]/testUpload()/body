{
  String featureLocation=System.getProperty("feature.location");
  System.out.println("Testing with feature from:" + featureLocation);
  System.err.println(executeCommand("fabric:create -n"));
  Set<ContainerProxy> containers=null;
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    containers=ContainerBuilder.create(fabricProxy,2).withName("maven").withProfiles("fabric").assertProvisioningResult().build();
    List<String> uploadUrls=new ArrayList<String>();
    ServiceProxy<CuratorFramework> curatorProxy=ServiceProxy.createServiceProxy(bundleContext,CuratorFramework.class);
    try {
      CuratorFramework curator=curatorProxy.getService();
      List<String> children=ZooKeeperUtils.getChildren(curator,ZkPath.MAVEN_PROXY.getPath("upload"));
      for (      String child : children) {
        String uploadeUrl=ZooKeeperUtils.getSubstitutedPath(curator,ZkPath.MAVEN_PROXY.getPath("upload") + "/" + child);
        uploadUrls.add(uploadeUrl);
      }
    }
  finally {
      curatorProxy.close();
    }
    Random random=new Random();
    int index=random.nextInt(uploadUrls.size());
    String targetUrl=uploadUrls.get(index);
    String uploadUrl=targetUrl + "itest/itest/1.0/itest-1.0-features.xml";
    System.out.println("Using URI: " + uploadUrl);
    DefaultHttpClient client=new DefaultHttpClient();
    HttpPut put=new HttpPut(uploadUrl);
    client.getCredentialsProvider().setCredentials(AuthScope.ANY,new UsernamePasswordCredentials("admin","admin"));
    FileNIOEntity entity=new FileNIOEntity(new File(featureLocation),"text/xml");
    put.setEntity(entity);
    HttpResponse response=client.execute(put);
    System.err.println("Response:" + response.getStatusLine());
    Assert.assertTrue(response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 202);
    System.err.println(executeCommand("fabric:profile-edit --repositories mvn:itest/itest/1.0/xml/features default"));
    System.err.println(executeCommand("fabric:profile-edit --features example-cbr default"));
    Provision.containerStatus(containers,PROVISION_TIMEOUT);
  }
  finally {
    ContainerBuilder.destroy(containers);
  }
}
