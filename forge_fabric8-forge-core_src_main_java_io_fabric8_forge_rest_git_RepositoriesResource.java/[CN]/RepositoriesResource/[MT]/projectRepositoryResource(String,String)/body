{
  UserDetails userDetails=gitUserHelper.createUserDetails(request);
  String origin=projectFileSystem.getRemote();
  String remoteRepository=namespace + "/" + projectId;
  String branch=request.getParameter("branch");
  if (Strings.isNullOrBlank(branch)) {
    branch="master";
  }
  String objectId=request.getParameter("ref");
  OpenShiftClient osClient=kubernetes.adapt(OpenShiftClient.class).inNamespace(namespace);
  BuildConfig buildConfig=osClient.buildConfigs().withName(projectId).get();
  if (buildConfig == null) {
    throw new NotFoundException("No BuildConfig for " + remoteRepository);
  }
  BuildConfigSpec spec=buildConfig.getSpec();
  if (spec == null) {
    throw new NotFoundException("No BuildConfig spec for " + remoteRepository);
  }
  BuildSource source=spec.getSource();
  if (source == null) {
    throw new NotFoundException("No BuildConfig source for " + remoteRepository);
  }
  GitBuildSource gitSource=source.getGit();
  if (gitSource == null) {
    throw new NotFoundException("No BuildConfig git source for " + remoteRepository);
  }
  String uri=gitSource.getUri();
  if (Strings.isNullOrBlank(uri)) {
    throw new NotFoundException("No BuildConfig git URI for " + remoteRepository);
  }
  String sourceSecretName=request.getParameter("secret");
  String secretNamespace=request.getParameter("secretNamespace");
  if (Strings.isNullOrBlank(secretNamespace)) {
    secretNamespace=namespace;
  }
  if (Strings.isNullOrBlank(sourceSecretName)) {
    LocalObjectReference sourceSecret=source.getSourceSecret();
    if (sourceSecret != null) {
      sourceSecretName=sourceSecret.getName();
    }
  }
  File projectFolder=projectFileSystem.getNamespaceProjectFolder(namespace,projectId,secretNamespace,sourceSecretName);
  String cloneUrl=uri;
  File gitFolder=new File(projectFolder,".git");
  LOG.debug("Cloning " + cloneUrl);
  RepositoryResource resource=new RepositoryResource(projectFolder,gitFolder,userDetails,origin,branch,remoteRepository,lockManager,projectFileSystem,cloneUrl,objectId);
  if (sourceSecretName != null) {
    try {
      Secret secret=osClient.secrets().inNamespace(secretNamespace).withName(sourceSecretName).get();
      if (secret != null) {
        Map<String,String> data=secret.getData();
        File privateKeyFile=createSshKeyFile(namespace,sourceSecretName,SSH_PRIVATE_KEY_DATA_KEY,data.get(SSH_PRIVATE_KEY_DATA_KEY));
        if (privateKeyFile == null) {
          privateKeyFile=createSshKeyFile(namespace,sourceSecretName,SSH_PRIVATE_KEY_DATA_KEY2,data.get(SSH_PRIVATE_KEY_DATA_KEY2));
        }
        userDetails.setSshPrivateKey(privateKeyFile);
        if (privateKeyFile != null) {
          privateKeyFile.setReadable(false,true);
        }
        File publicKeyFile=createSshKeyFile(namespace,sourceSecretName,SSH_PUBLIC_KEY_DATA_KEY,data.get(SSH_PUBLIC_KEY_DATA_KEY));
        if (publicKeyFile == null) {
          publicKeyFile=createSshKeyFile(namespace,sourceSecretName,SSH_PUBLIC_KEY_DATA_KEY2,data.get(SSH_PUBLIC_KEY_DATA_KEY2));
        }
        userDetails.setSshPublicKey(publicKeyFile);
        String username=decodeSecretData(data.get(USERNAME_DATA_KEY));
        String password=decodeSecretData(data.get(PASSWORD_DATA_KEY));
        if (Strings.isNotBlank(username)) {
          userDetails.setUser(username);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Using user: " + username);
          }
        }
        if (Strings.isNotBlank(password)) {
          userDetails.setPassword(password);
        }
      }
    }
 catch (    IOException e) {
      LOG.error("Failed to load secret key " + sourceSecretName + ". "+ e,e);
      throw new RuntimeException("Failed to load secret key " + sourceSecretName + ". "+ e,e);
    }
  }
  try {
    String message=request.getParameter("message");
    if (Strings.isNotBlank(message)) {
      resource.setMessage(message);
    }
  }
 catch (  Exception e) {
    LOG.warn("failed to load message parameter: " + e,e);
  }
  return resource;
}
