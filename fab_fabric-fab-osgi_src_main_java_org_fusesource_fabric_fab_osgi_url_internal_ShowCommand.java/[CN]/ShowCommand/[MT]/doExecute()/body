{
  OsgiModuleRegistry registry=Activator.registry;
  List<ModuleRegistry.Module> modules=registry.getApplicationModules();
  for (  ModuleRegistry.Module module : modules) {
    if (module.getName().equals(name)) {
      ModuleRegistry.VersionedModule selected=null;
      TreeSet<String> versions=new TreeSet<String>();
      for (      ModuleRegistry.VersionedModule mv : module.getVersions()) {
        String v=mv.getId().getVersion();
        versions.add(v);
        if (version != null && version.equals(v)) {
          selected=mv;
        }
      }
      if (version == null) {
        selected=module.latest();
      }
 else {
        if (selected == null) {
          println("Unknown version: %s",version);
          return null;
        }
      }
      println("%15s: %s","Name",selected.getName());
      println("%15s: %s","Version",selected.getId().getVersion());
      println("%15s: %s","Artifact Id",selected.getId());
      versions.remove(selected.getId().getVersion());
      if (!versions.isEmpty()) {
        println("%20s: %s","Available",join(versions,", "));
      }
      String desc=notEmpty(selected.getLongDescription()) ? selected.getLongDescription() : selected.getDescription();
      String lines[]=wordWrap(desc,60);
      println("%15s: %s","Description",lines[0]);
      for (int i=1; i < lines.length; i++) {
        println("%15s  %s","",lines[i]);
      }
      Map<String,ModuleRegistry.VersionedModule> extensions=selected.getAvailableExtensions();
      if (extensions.size() > 0) {
        HashSet enabled=new HashSet<String>(selected.getEnabledExtensions());
        println("Extensions:");
        println("  * %-20s\t%-10s\t%-40s","Name","Version","Description");
        for (        Map.Entry<String,ModuleRegistry.VersionedModule> entry : extensions.entrySet()) {
          ModuleRegistry.VersionedModule extension=entry.getValue();
          println("  %s %-20s\t%-10s\t%-40s",enabled.contains(extension.getName()) ? "+" : "-",extension.getName(),extension.getId().getVersion(),extension.getDescription());
        }
      }
    }
  }
  return null;
}
