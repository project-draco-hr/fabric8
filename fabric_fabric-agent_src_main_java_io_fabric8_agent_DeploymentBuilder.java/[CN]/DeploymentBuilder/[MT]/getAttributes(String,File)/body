{
  Manifest man=null;
  try {
    man=Manifests.getManifest(file);
  }
 catch (  Exception e) {
    if (file == null) {
      throw new IOException("Error - file must not be null. Source: \"" + uri + "\"",e);
    }
 else {
      throw new IOException("Error opening file \"" + file.getCanonicalPath() + "\". Source: \""+ uri+ "\", size: "+ file.length(),e);
    }
  }
  if (man == null) {
    throw new IllegalArgumentException("Resource " + uri + " does not contain a manifest");
  }
  Attributes attributes=man.getMainAttributes();
  String bsn=attributes.getValue(Constants.BUNDLE_SYMBOLICNAME);
  if (bsn.indexOf(';') > 0) {
    bsn=bsn.substring(0,bsn.indexOf(';'));
  }
  Version ver=VersionTable.getVersion(attributes.getValue(Constants.BUNDLE_VERSION));
  Map<VersionRange,Map<String,String>> ranges=metadata.get(bsn);
  if (ranges != null) {
    for (    Map.Entry<VersionRange,Map<String,String>> entry2 : ranges.entrySet()) {
      if (entry2.getKey().contains(ver)) {
        for (        Map.Entry<String,String> entry3 : entry2.getValue().entrySet()) {
          String val=attributes.getValue(entry3.getKey());
          if (val != null) {
            val+="," + entry3.getValue();
          }
 else {
            val=entry3.getValue();
          }
          attributes.putValue(entry3.getKey(),val);
        }
      }
    }
  }
  return attributes;
}
