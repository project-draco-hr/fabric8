{
  KubernetesClient kubernetes=getKubernetes();
  String name=repoName;
  if (Strings.isNotBlank(username)) {
    name=username + "-" + name;
  }
  Map<String,String> labels=new HashMap<>();
  labels.put("user",username);
  labels.put("repo",repoName);
  TaigaClient taiga=null;
  ProjectDTO taigaProject=null;
  try {
    taiga=createTaiga();
    taigaProject=createTaigaProject(taiga);
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the Taiga project: " + e,e);
  }
  Map<String,String> annotations=new HashMap<>();
  String jenkinsJobUrl=null;
  try {
    String jenkinsUrl=kubernetes.getServiceURL(ServiceNames.JENKINS,kubernetes.getNamespace(),"http",true);
    if (Strings.isNotBlank(jenkinsUrl)) {
      if (Strings.isNotBlank(jenkinsMonitorView)) {
        annotations.put("fabric8.link.jenkins.monitor/url",URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsMonitorView));
        annotations.put("fabric8.link.jenkins.monitor/label","Monitor");
      }
      if (Strings.isNotBlank(jenkinsPipelineView)) {
        annotations.put("fabric8.link.jenkins.pipeline/url",URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsPipelineView));
        annotations.put("fabric8.link.jenkins.pipeline/label","Pipeline");
      }
      if (Strings.isNotBlank(jenkinsJob)) {
        jenkinsJobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",jenkinsJob);
        annotations.put("fabric8.link.jenkins.job/url",jenkinsJobUrl);
        annotations.put("fabric8.link.jenkins.job/label","Job");
      }
    }
  }
 catch (  Exception e) {
    getLog().warn("Could not find the Jenkins URL!: " + e,e);
  }
  String taigaLink=getTaigaProjectUrl(taiga,taigaProject);
  if (Strings.isNotBlank(taigaLink)) {
    annotations.put("fabric8.link.taiga/url",taigaLink);
    annotations.put("fabric8.link.taiga/label","Issues");
  }
  BuildConfig buildConfig=new BuildConfigBuilder().withNewMetadata().withName(name).withLabels(labels).withAnnotations(annotations).endMetadata().withNewSpec().withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource().withNewStrategy().withType("Docker").withNewDockerStrategy().withNewFrom().withName(buildImageStream + ":" + buildImageTag).endFrom().endDockerStrategy().endStrategy().addNewTrigger().withType("github").withNewGithub().withSecret(secret).endGithub().endTrigger().addNewTrigger().withType("generic").withNewGeneric().withSecret(secret).endGeneric().endTrigger().endSpec().build();
  Controller controller=createController();
  controller.applyBuildConfig(buildConfig,"maven");
  getLog().info("Created build configuration for " + name + " in namespace: "+ controller.getNamespace()+ " at "+ kubernetes.getAddress());
  createJenkinsWebhook(jenkinsJobUrl);
  createTaigaWebhook(taiga,taigaProject);
}
