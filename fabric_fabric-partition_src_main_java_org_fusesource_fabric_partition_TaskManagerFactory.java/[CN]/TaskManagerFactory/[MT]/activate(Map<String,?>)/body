{
  validate(properties);
  String s=readString(properties,Constants.SERVICE_PID);
  String taskId=readString(properties,TASK_ID_PROPERTY_NAME);
  String taskDefinition=readString(properties,TASK_DEFINITION_PROPERTY_NAME);
  String partitionsPath=readString(properties,PARTITIONS_PATH_PROPERTY_NAME);
  String policyType=readString(properties,WORK_BALANCING_POLICY);
  String workerType=readString(properties,WORKER_TYPE);
  if (!balancingPolicies.containsKey(policyType)) {
    waitingOnBalancing.put(policyType,s);
    pendingPids.put(s,properties);
    LOGGER.warn("Policy type {} not found. Will resume: {} when policy is made available.",policyType,s);
  }
 else   if (!partitionListeners.containsKey(workerType)) {
    waitingOnListener.put(workerType,s);
    pendingPids.put(s,properties);
    LOGGER.warn("Worker type {} not found. Will resume: {} when worker type is made available.",workerType,s);
  }
 else {
    BalancingPolicy balancingPolicy=balancingPolicies.get(policyType);
    PartitionListener partitionListener=partitionListeners.get(workerType);
    TaskManager taskManager=new DefaultTaskManager(curator,taskId,taskDefinition,partitionsPath,partitionListener,balancingPolicy);
    TaskManager oldTaskManager=taksManagers.put(s,taskManager);
    if (oldTaskManager != null) {
      oldTaskManager.stop();
    }
    taskManager.start();
  }
}
