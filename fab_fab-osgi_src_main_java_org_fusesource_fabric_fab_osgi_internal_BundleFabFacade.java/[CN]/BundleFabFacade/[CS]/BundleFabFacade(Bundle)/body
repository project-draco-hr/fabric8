{
  this.bundle=bundle;
  this.configuration=Configuration.newInstance();
  Dictionary headers=bundle.getHeaders();
  Object fabId=headers.get(ServiceConstants.INSTR_FAB_MODULE_ID);
  String fabIdString=null;
  if (fabId instanceof String) {
    fabIdString=(String)fabId;
  }
 else {
    Enumeration iter=bundle.findEntries("META-INF","pom.properties",true);
    while (iter.hasMoreElements()) {
      Object value=iter.nextElement();
      if (value instanceof URL) {
        URL url=(URL)value;
        Properties properties=new Properties();
        try {
          properties.load(url.openStream());
        }
 catch (        IOException e) {
          throw new IllegalArgumentException("Failed to load Properties for " + url + ". "+ e.getMessage(),e);
        }
        String groupId=properties.getProperty("groupId");
        String artifactId=properties.getProperty("artifactId");
        String version=properties.getProperty("version");
        if (notEmpty(groupId) && notEmpty(artifactId) && notEmpty(version)) {
          fabIdString=groupId + ":" + artifactId+ ":"+ version+ ":jar";
        }
      }
    }
    if (fabIdString == null) {
      Object bundleName=headers.get(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME);
      Object versionValue=headers.get(ServiceConstants.INSTR_IMPLEMENTATION_VERSION);
      if (bundleName instanceof String && versionValue instanceof String) {
        String name=bundleName.toString();
        String version=versionValue.toString();
        int idx=name.lastIndexOf('.');
        if (idx > 0) {
          fabIdString=name.substring(0,idx) + ":" + name.substring(idx + 1,name.length())+ ":"+ version+ ":jar";
        }
      }
    }
  }
  if (fabIdString != null) {
    dependencyId=VersionedDependencyId.fromString(fabIdString);
  }
  if (dependencyId == null) {
    throw new IllegalArgumentException("Bundle is not a FAB as there is no manifest header: " + ServiceConstants.INSTR_FAB_MODULE_ID);
  }
}
