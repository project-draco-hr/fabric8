{
  String response=null;
  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  final PrintStream printStream=new PrintStream(byteArrayOutputStream);
  final CommandProcessor commandProcessor=ServiceLocator.awaitService(FrameworkUtil.getBundle(FabricKarafTestSupport.class).getBundleContext(),CommandProcessor.class);
  final CommandSession commandSession=commandProcessor.createSession(System.in,printStream,printStream);
  commandSession.put("APPLICATION",System.getProperty("runtime.id","root"));
  commandSession.put("USER","karaf");
  FutureTask<String> commandFuture=new FutureTask<String>(new Callable<String>(){
    public String call() throws Exception {
      Subject subject=new Subject();
      subject.getPrincipals().add(new UserPrincipal("admin"));
      subject.getPrincipals().add(new RolePrincipal("admin"));
      subject.getPrincipals().add(new RolePrincipal("manager"));
      subject.getPrincipals().add(new RolePrincipal("viewer"));
      if (roles != null) {
        for (        RolePrincipal role : roles) {
          subject.getPrincipals().add(role);
        }
      }
      return Subject.doAs(subject,new PrivilegedAction<String>(){
        @Override public String run(){
          for (          String command : commands) {
            boolean keepRunning=true;
            if (!silent) {
              System.out.println(command);
              System.out.flush();
            }
            LOGGER.info("Executing command: " + command);
            while (!Thread.currentThread().isInterrupted() && keepRunning) {
              try {
                commandSession.execute(command);
                keepRunning=false;
              }
 catch (              Exception e) {
                if (retryException(e)) {
                  keepRunning=true;
                  sleep(1000);
                }
 else {
                  throw new CommandExecutionException(e);
                }
              }
            }
          }
          printStream.flush();
          return byteArrayOutputStream.toString();
        }
      }
);
    }
  }
);
  try {
    executor.submit(commandFuture);
    response=commandFuture.get(timeout,TimeUnit.MILLISECONDS);
  }
 catch (  ExecutionException e) {
    throw CommandExecutionException.launderThrowable(e.getCause());
  }
catch (  Exception e) {
    throw CommandExecutionException.launderThrowable(e);
  }
  return response;
}
