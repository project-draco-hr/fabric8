{
  executeCommand("fabric:create -n");
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy,1).withName("node").withProfiles("jboss-fuse-full").assertProvisioningResult().build();
    try {
      Container node=containers.iterator().next();
      Provision.provisioningSuccess(Arrays.asList(node),PROVISION_TIMEOUT);
      CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
      ManagedGroupFactory factory=ManagedGroupFactoryBuilder.create(curator,getClass().getClassLoader(),new Callable<CuratorFramework>(){
        @Override public CuratorFramework call() throws Exception {
          throw new Exception("Shouldn't be called");
        }
      }
);
      final MultiGroup group=(MultiGroup)factory.createMultiGroup("/fabric/registry/clusters/fusemq/default",FabricDiscoveryAgent.ActiveMQNode.class);
      group.start();
      FabricDiscoveryAgent.ActiveMQNode master=null;
      Provision.waitForCondition(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          while ((FabricDiscoveryAgent.ActiveMQNode)group.master() == null) {
            Thread.sleep(1000);
          }
          return true;
        }
      }
,timeout);
      master=(FabricDiscoveryAgent.ActiveMQNode)group.master();
      String masterContainer=master.getContainer();
      assertEquals("node1",masterContainer);
      for (int i=0; i < 5; i++) {
        Thread.sleep(5000);
        executeCommand("container-remove-profile node1 jboss-fuse-full");
        Provision.provisioningSuccess(Arrays.asList(fabricService.getContainers()),PROVISION_TIMEOUT);
        Provision.waitForCondition(new Callable<Boolean>(){
          @Override public Boolean call() throws Exception {
            while ((FabricDiscoveryAgent.ActiveMQNode)group.master() != null) {
              Thread.sleep(1000);
            }
            return true;
          }
        }
,timeout);
        master=(FabricDiscoveryAgent.ActiveMQNode)group.master();
        assertNull(master);
        Thread.sleep(5000);
        executeCommand("container-add-profile node1 jboss-fuse-full");
        Provision.provisioningSuccess(Arrays.asList(fabricService.getContainers()),PROVISION_TIMEOUT);
        Provision.waitForCondition(new Callable<Boolean>(){
          @Override public Boolean call() throws Exception {
            while ((FabricDiscoveryAgent.ActiveMQNode)group.master() == null) {
              Thread.sleep(1000);
            }
            return true;
          }
        }
,timeout);
        master=(FabricDiscoveryAgent.ActiveMQNode)group.master();
        masterContainer=master.getContainer();
        assertEquals("node1",masterContainer);
      }
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
