{
  executeCommand("fabric:create -n");
  Set<Container> containers=ContainerBuilder.create(1).withName("node").withProfiles("jboss-fuse-full").assertProvisioningResult().build();
  Container node=containers.iterator().next();
  containers.remove(node);
  Provision.provisioningSuccess(Arrays.asList(node),PROVISION_TIMEOUT);
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  ServiceProxy<CuratorFramework> curatorProxy=ServiceProxy.createServiceProxy(bundleContext,CuratorFramework.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=curatorProxy.getService();
    final ZooKeeperMultiGroup group=new ZooKeeperMultiGroup<FabricDiscoveryAgent.ActiveMQNode>(curator,"/fabric/registry/clusters/fusemq/default",FabricDiscoveryAgent.ActiveMQNode.class);
    group.start();
    FabricDiscoveryAgent.ActiveMQNode master=null;
    Provision.waitForCondition(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        while ((FabricDiscoveryAgent.ActiveMQNode)group.master() == null) {
          Thread.sleep(1000);
        }
        return true;
      }
    }
,300000L);
    master=(FabricDiscoveryAgent.ActiveMQNode)group.master();
    String masterContainer=master.getContainer();
    assertEquals("node1",masterContainer);
    for (int i=0; i < 10; i++) {
      Thread.sleep(5000);
      executeCommand("container-remove-profile node1 jboss-fuse-full");
      Provision.provisioningSuccess(Arrays.asList(fabricService.getContainers()),PROVISION_TIMEOUT);
      Provision.waitForCondition(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          while ((FabricDiscoveryAgent.ActiveMQNode)group.master() != null) {
            Thread.sleep(1000);
          }
          return true;
        }
      }
,300000L);
      master=(FabricDiscoveryAgent.ActiveMQNode)group.master();
      assertNull(master);
      Thread.sleep(5000);
      executeCommand("container-add-profile node1 jboss-fuse-full");
      Provision.provisioningSuccess(Arrays.asList(fabricService.getContainers()),PROVISION_TIMEOUT);
      Provision.waitForCondition(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          while ((FabricDiscoveryAgent.ActiveMQNode)group.master() == null) {
            Thread.sleep(1000);
          }
          return true;
        }
      }
,300000L);
      master=(FabricDiscoveryAgent.ActiveMQNode)group.master();
      masterContainer=master.getContainer();
      assertEquals("node1",masterContainer);
    }
  }
  finally {
    fabricProxy.close();
    curatorProxy.close();
  }
}
