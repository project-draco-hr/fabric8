{
  if (Strings.isNullOrBlank(gogsUsername)) {
    gogsUsername="gogsadmin";
  }
  if (Strings.isNullOrBlank(gogsPassword)) {
    gogsPassword="RedHat$1";
  }
  try {
    KubernetesClient kubernetes=getKubernetes();
    String namespace=kubernetes.getNamespace();
    Log log=getLog();
    String gogsAddress=kubernetes.getServiceURL(ServiceNames.GOGS,namespace,"http",true);
    log.info("Found gogs address: " + gogsAddress + " for namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getAddress());
    if (Strings.isNullOrBlank(gogsAddress)) {
      throw new MojoExecutionException("No address for service " + ServiceNames.GOGS + " in namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getAddress());
    }
    log.info("Querying webhooks in gogs for namespace: " + namespace + " on Kubernetes address: "+ kubernetes.getAddress());
    GitRepoClient repoClient=new GitRepoClient(gogsAddress,gogsUsername,gogsPassword);
    List<WebHookDTO> webhooks=repoClient.getWebhooks(gogsUsername,repo);
    for (    WebHookDTO webhook : webhooks) {
      String url=null;
      WebhookConfig config=webhook.getConfig();
      if (config != null) {
        url=config.getUrl();
        if (Objects.equal(webhookUrl,url)) {
          log.info("Already has webhook for: " + url + " so not creating again");
          return;
        }
        log.info("Ignoring webhook " + url + " from: "+ toJson(config));
      }
    }
    CreateWebhookDTO createWebhook=new CreateWebhookDTO();
    createWebhook.setType("gogs");
    WebhookConfig config=createWebhook.getConfig();
    config.setUrl(webhookUrl);
    config.setSecret(secret);
    WebHookDTO webhook=repoClient.createWebhook(gogsUsername,repo,createWebhook);
    if (log.isDebugEnabled()) {
      log.debug("Got created web hook: " + toJson(webhook));
    }
    log.info("Created webhook for " + webhookUrl + " for namespace: "+ namespace+ " on gogs URL: "+ gogsAddress);
  }
 catch (  MojoExecutionException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MojoExecutionException("Failed to load environment schemas: " + e,e);
  }
}
