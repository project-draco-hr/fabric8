{
  if (Strings.isNullOrBlank(gogsUser)) {
    gogsUser="gogsadmin";
  }
  if (Strings.isNullOrBlank(gogsPwd)) {
    gogsPwd="RedHat$1";
  }
  String namespace=kubernetes.getNamespace();
  String gogsAddress=kubernetes.getServiceURL(ServiceNames.GOGS,namespace,"http",true);
  log.info("Found gogs address: " + gogsAddress + " for namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getAddress());
  if (Strings.isNullOrBlank(gogsAddress)) {
    throw new MojoExecutionException("No address for service " + ServiceNames.GOGS + " in namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getAddress());
  }
  log.info("Querying webhooks in gogs for namespace: " + namespace + " on Kubernetes address: "+ kubernetes.getAddress());
  GitRepoClient repoClient=new GitRepoClient(gogsAddress,gogsUser,gogsPwd);
  RepositoryDTO repository=repoClient.getRepository(gogsUser,repoName);
  if (repository == null) {
    log.info("No repository found for user: " + gogsUser + " repo: "+ repoName+ " so cannot create any web hooks");
    return false;
  }
  List<WebHookDTO> webhooks=repoClient.getWebhooks(gogsUser,repoName);
  for (  WebHookDTO webhook : webhooks) {
    String url=null;
    WebhookConfig config=webhook.getConfig();
    if (config != null) {
      url=config.getUrl();
      if (Objects.equal(webhookUrl,url)) {
        log.info("Already has webhook for: " + url + " so not creating again");
        return false;
      }
      log.info("Ignoring webhook " + url + " from: "+ toJson(config));
    }
  }
  CreateWebhookDTO createWebhook=new CreateWebhookDTO();
  createWebhook.setType("gogs");
  WebhookConfig config=createWebhook.getConfig();
  config.setUrl(webhookUrl);
  config.setSecret(webhookSecret);
  WebHookDTO webhook=repoClient.createWebhook(gogsUser,repoName,createWebhook);
  if (log.isDebugEnabled()) {
    log.debug("Got created web hook: " + toJson(webhook));
  }
  log.info("Created webhook for " + webhookUrl + " for namespace: "+ namespace+ " on gogs URL: "+ gogsAddress);
  return true;
}
