{
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMinimumMessageCount(1);
  JCoDestination destination=JCoDestinationManager.getDestination("nplDest");
  Structure request=RfcUtil.getRequest(destination.getRepository(),"BAPI_FLCUST_CREATEFROMDATA");
  RfcUtil.setValue(request,"TEST_RUN","");
  Structure customerData=(Structure)RfcUtil.getValue(request,"CUSTOMER_DATA");
  RfcUtil.setValue(customerData,"CUSTNAME","Barney Rubble");
  RfcUtil.setValue(customerData,"FORM","Mr.");
  RfcUtil.setValue(customerData,"STREET","456 Cobblestone Ave");
  RfcUtil.setValue(customerData,"POBOX","987");
  RfcUtil.setValue(customerData,"POSTCODE","99999");
  RfcUtil.setValue(customerData,"CITY","Bedrock");
  RfcUtil.setValue(customerData,"CONTR","US");
  RfcUtil.setValue(customerData,"REGION","PA");
  RfcUtil.setValue(customerData,"PHONE","18005551212");
  RfcUtil.setValue(customerData,"CUSTTYPE","P");
  RfcUtil.setValue(customerData,"DISCOUNT","005");
  RfcUtil.setValue(customerData,"LANG_ISO","en");
  template.sendBody("direct:createFlcustList",request);
  assertMockEndpointsSatisfied();
  Structure response=mock.getExchanges().get(0).getIn().getBody(Structure.class);
  Resource res=new XMLResourceImpl();
  res.getContents().add(response);
  res.save(System.out,null);
}
