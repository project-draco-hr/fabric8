{
  xmitsInProgress.getAndIncrement();
  Socket sock=null;
  DataOutputStream out=null;
  BlockSender blockSender=null;
  try {
    final String dnName=targets[0].getName(connectToDnViaHostname);
    InetSocketAddress curTarget=NetUtils.createSocketAddr(dnName);
    sock=newSocket();
    LOG.debug("Connecting to " + dnName);
    NetUtils.connect(sock,curTarget,socketTimeout);
    sock.setSoTimeout(targets.length * socketTimeout);
    long writeTimeout=socketWriteTimeout + HdfsConstants.WRITE_TIMEOUT_EXTENSION * (targets.length - 1);
    OutputStream baseStream=NetUtils.getOutputStream(sock,writeTimeout);
    out=new DataOutputStream(new BufferedOutputStream(baseStream,SMALL_BUFFER_SIZE));
    blockSender=new BlockSender(b,0,b.getNumBytes(),false,false,false,datanode);
    DatanodeInfo srcNode=new DatanodeInfo(dnRegistration);
    out.writeShort(DataTransferProtocol.DATA_TRANSFER_VERSION);
    out.writeByte(DataTransferProtocol.OP_WRITE_BLOCK);
    out.writeLong(b.getBlockId());
    out.writeLong(b.getGenerationStamp());
    out.writeInt(0);
    out.writeBoolean(false);
    Text.writeString(out,"");
    out.writeBoolean(true);
    srcNode.write(out);
    out.writeInt(targets.length - 1);
    for (int i=1; i < targets.length; i++) {
      targets[i].write(out);
    }
    Token<BlockTokenIdentifier> accessToken=BlockTokenSecretManager.DUMMY_TOKEN;
    if (isBlockTokenEnabled) {
      accessToken=blockTokenSecretManager.generateToken(null,b,EnumSet.of(BlockTokenSecretManager.AccessMode.WRITE));
    }
    accessToken.write(out);
    blockSender.sendBlock(out,baseStream,null);
    LOG.info(dnRegistration + ":Transmitted " + b+ " to "+ curTarget);
  }
 catch (  IOException ie) {
    LOG.warn(dnRegistration + ":Failed to transfer " + b+ " to "+ targets[0].getName()+ " got "+ StringUtils.stringifyException(ie));
    try {
      checkDiskError(ie);
    }
 catch (    IOException e) {
      LOG.warn("DataNode.checkDiskError failed in run() with: ",e);
    }
  }
 finally {
    xmitsInProgress.getAndDecrement();
    IOUtils.closeStream(blockSender);
    IOUtils.closeStream(out);
    IOUtils.closeSocket(sock);
  }
}
