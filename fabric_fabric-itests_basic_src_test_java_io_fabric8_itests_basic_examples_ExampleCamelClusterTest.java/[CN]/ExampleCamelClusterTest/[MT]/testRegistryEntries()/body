{
  System.err.println(executeCommand("fabric:create -n root"));
  Set<Container> containers=ContainerBuilder.create(3).withName("fabric-camel").withProfiles("feature-camel").assertProvisioningResult().build();
  try {
    LinkedList<Container> containerList=new LinkedList<Container>(containers);
    Container client=containerList.removeLast();
    LinkedList<Container> servers=new LinkedList<Container>(containerList);
    for (    Container c : servers) {
      Profile p=c.getVersion().getProfile("example-camel-cluster.server");
      c.setProfiles(new Profile[]{p});
    }
    Provision.provisioningSuccess(servers,PROVISION_TIMEOUT);
    Profile p=client.getVersion().getProfile("example-camel-cluster.client");
    client.setProfiles(new Profile[]{p});
    Provision.provisioningSuccess(Arrays.asList(new Container[]{client}),PROVISION_TIMEOUT);
    System.err.println(executeCommand("fabric:container-list"));
    System.err.println(executeCommand("fabric:profile-display --overlay fabric-camel-server"));
    ServiceProxy<CuratorFramework> curatorProxy=ServiceProxy.createServiceProxy(bundleContext,CuratorFramework.class);
    try {
      CuratorFramework curator=curatorProxy.getService();
      Assert.assertNotNull(exists(curator,"/fabric/registry/camel/endpoints"));
      Assert.assertEquals(1,getChildren(curator,"/fabric/registry/camel/endpoints").size());
      Assert.assertTrue(Provision.waitForCondition(Arrays.asList(client),new ContainerCondition(){
        @Override public Boolean checkConditionOnContainer(        final Container c){
          return getCompletedExchangesCount(c) > 0;
        }
      }
,60000L));
      Container lastActiveServerContainer=servers.removeLast();
      for (      Container c : servers) {
        try {
          c.destroy(true);
        }
 catch (        Exception ex) {
        }
        final int completed=getCompletedExchangesCount(client);
        Assert.assertTrue(Provision.waitForCondition(Arrays.asList(client),new ContainerCondition(){
          @Override public Boolean checkConditionOnContainer(          final Container c){
            return getCompletedExchangesCount(c) > completed + 3;
          }
        }
,60000L));
      }
      System.err.println(new AnsiString(executeCommand("fabric:container-connect -u admin -p admin " + client.getId() + " camel:route-info fabric-client")).getPlain().toString());
    }
  finally {
      curatorProxy.close();
    }
  }
  finally {
    ContainerBuilder.destroy(containers);
  }
}
