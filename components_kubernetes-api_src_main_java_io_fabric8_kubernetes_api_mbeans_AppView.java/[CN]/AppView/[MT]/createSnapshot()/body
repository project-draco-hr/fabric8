{
  Map<String,Service> servicesMap=KubernetesHelper.getServiceMap(kubernetes);
  Map<String,ReplicationController> controllerMap=KubernetesHelper.getReplicationControllerMap(kubernetes);
  Map<String,Pod> podMap=KubernetesHelper.getPodMap(kubernetes);
  AppViewSnapshot snapshot=new AppViewSnapshot(servicesMap,controllerMap,podMap);
  for (  Service service : servicesMap.values()) {
    String appPath=getAppPath(getId(service));
    if (appPath != null) {
      AppViewDetails dto=snapshot.getOrCreateAppView(appPath,service.getNamespace());
      dto.addService(service);
    }
  }
  for (  ReplicationController controller : controllerMap.values()) {
    String appPath=getAppPath(getId(controller));
    if (appPath != null) {
      AppViewDetails dto=snapshot.getOrCreateAppView(appPath,controller.getNamespace());
      dto.addController(controller);
    }
  }
  Set<ReplicationController> remainingControllers=new HashSet<>(controllerMap.values());
  Collection<AppViewDetails> appViews=snapshot.getApps();
  for (  AppViewDetails appView : appViews) {
    remainingControllers.removeAll(appView.getControllers().values());
  }
  for (  ReplicationController controller : remainingControllers) {
    AppViewDetails dto=snapshot.createApp(controller.getNamespace());
    dto.addController(controller);
  }
  Set<Pod> remainingPods=new HashSet<>(podMap.values());
  for (  AppViewDetails appView : appViews) {
    remainingPods.removeAll(appView.getPods().values());
  }
  for (  Pod pod : remainingPods) {
    AppViewDetails dto=snapshot.createApp(pod.getNamespace());
    dto.addPod(pod);
  }
  snapshotCache.set(snapshot);
  return snapshot;
}
