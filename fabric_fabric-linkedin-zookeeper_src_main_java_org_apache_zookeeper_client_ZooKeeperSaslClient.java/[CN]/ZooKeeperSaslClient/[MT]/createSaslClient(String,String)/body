{
  try {
    if (login == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("JAAS loginContext is: " + loginContext);
      }
      login=new Login(loginContext,new ClientCallbackHandler(null));
      login.startThreadIfNeeded();
    }
    Subject subject=login.getSubject();
    SaslClient saslClient;
    if (subject.getPrincipals().isEmpty()) {
      LOG.info("Client will use DIGEST-MD5 as SASL mechanism.");
      String[] mechs={"DIGEST-MD5"};
      String username=(String)(subject.getPublicCredentials().toArray()[0]);
      String password=(String)(subject.getPrivateCredentials().toArray()[0]);
      saslClient=Sasl.createSaslClient(mechs,username,"zookeeper","zk-sasl-md5",null,new ClientCallbackHandler(password));
      return saslClient;
    }
 else {
      final Object[] principals=subject.getPrincipals().toArray();
      final Principal clientPrincipal=(Principal)principals[0];
      final KerberosName clientKerberosName=new KerberosName(clientPrincipal.getName());
      String serverRealm=System.getProperty("zookeeper.server.realm",clientKerberosName.getRealm());
      KerberosName serviceKerberosName=new KerberosName(servicePrincipal + "@" + serverRealm);
      final String serviceName=serviceKerberosName.getServiceName();
      final String serviceHostname=serviceKerberosName.getHostName();
      final String clientPrincipalName=clientKerberosName.toString();
      try {
        saslClient=Subject.doAs(subject,new PrivilegedExceptionAction<SaslClient>(){
          public SaslClient run() throws SaslException {
            LOG.info("Client will use GSSAPI as SASL mechanism.");
            String[] mechs={"GSSAPI"};
            LOG.debug("creating sasl client: client=" + clientPrincipalName + ";service="+ serviceName+ ";serviceHostname="+ serviceHostname);
            SaslClient saslClient=Sasl.createSaslClient(mechs,clientPrincipalName,serviceName,serviceHostname,null,new ClientCallbackHandler(null));
            return saslClient;
          }
        }
);
        return saslClient;
      }
 catch (      Exception e) {
        LOG.error("Error creating SASL client:" + e);
        e.printStackTrace();
        return null;
      }
    }
  }
 catch (  LoginException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error("Exception while trying to create SASL client: " + e);
    return null;
  }
}
