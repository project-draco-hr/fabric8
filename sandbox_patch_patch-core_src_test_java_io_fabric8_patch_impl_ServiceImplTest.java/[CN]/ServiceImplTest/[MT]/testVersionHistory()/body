{
  PatchImpl patch1=new PatchImpl(null,new PatchData("patch1","First patch",null,null,null));
  patch1.setResult(new ResultImpl(patch1,true,System.currentTimeMillis(),new LinkedList<BundleUpdate>(),null,null));
  patch1.getResult().getUpdates().add(new BundleUpdateImpl("my-bsn","1.1.0","mvn:groupId/my-bsn/1.1.0","1.0.0","mvn:groupId/my-bsn/1.0.0"));
  PatchImpl patch2=new PatchImpl(null,new PatchData("patch2","Second patch",null,null,null));
  patch2.setResult(new ResultImpl(patch1,true,System.currentTimeMillis(),new LinkedList<BundleUpdate>(),null,null));
  patch2.getResult().getUpdates().add(new BundleUpdateImpl("my-bsn;directive1=true","1.2.0","mvn:groupId/my-bsn/1.2.0","1.1.0","mvn:groupId/my-bsn/1.1.0"));
  Map<String,Patch> patches=new HashMap<String,Patch>();
  patches.put("patch1",patch1);
  patches.put("patch2",patch2);
  ServiceImpl.BundleVersionHistory history=new ServiceImpl.BundleVersionHistory(patches);
  assertEquals("Should return version from patch result instead of the original location","mvn:groupId/my-bsn/1.2.0",history.getLocation(createMockBundle("my-bsn","1.2.0","mvn:groupId/my-bsn/1.0.0")));
  assertEquals("Should return version from patch result instead of the original location","mvn:groupId/my-bsn/1.1.0",history.getLocation(createMockBundle("my-bsn","1.1.0","mvn:groupId/my-bsn/1.0.0")));
  assertEquals("Should return original bundle location if no maching version is found in the history","mvn:groupId/my-bsn/1.0.0",history.getLocation(createMockBundle("my-bsn","1.0.0","mvn:groupId/my-bsn/1.0.0")));
  assertEquals("Should return original bundle location if no maching version is found in the history","mvn:groupId/my-bsn/0.9.0",history.getLocation(createMockBundle("my-bsn","0.9.0","mvn:groupId/my-bsn/0.9.0")));
}
