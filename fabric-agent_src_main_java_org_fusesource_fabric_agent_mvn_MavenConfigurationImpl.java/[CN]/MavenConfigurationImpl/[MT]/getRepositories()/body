{
  if (!contains(m_pid + MavenConstants.PROPERTY_REPOSITORIES)) {
    String repositoriesProp=m_propertyResolver.get(m_pid + MavenConstants.PROPERTY_REPOSITORIES);
    if ((repositoriesProp == null || repositoriesProp.startsWith(REPOSITORIES_APPEND_SIGN)) && m_settings != null) {
      String settingsRepos=m_settings.getRepositories();
      if (settingsRepos != null) {
        if (repositoriesProp == null) {
          repositoriesProp=settingsRepos;
        }
 else {
          repositoriesProp=repositoriesProp.substring(1) + REPOSITORIES_SEPARATOR + settingsRepos;
        }
      }
    }
    final List<MavenRepositoryURL> repositoriesProperty=new ArrayList<MavenRepositoryURL>();
    MavenRepositoryURL localRepository=getLocalRepository();
    if (localRepository != null) {
      repositoriesProperty.add(localRepository);
    }
    if (repositoriesProp != null && repositoriesProp.trim().length() > 0) {
      String[] repositories=repositoriesProp.split(REPOSITORIES_SEPARATOR);
      for (      String repositoryURL : repositories) {
        repositoriesProperty.add(new MavenRepositoryURL(repositoryURL));
      }
    }
    LOGGER.trace("Using repositories [" + repositoriesProperty + "]");
    return set(m_pid + MavenConstants.PROPERTY_REPOSITORIES,repositoriesProperty);
  }
  return get(m_pid + MavenConstants.PROPERTY_REPOSITORIES);
}
