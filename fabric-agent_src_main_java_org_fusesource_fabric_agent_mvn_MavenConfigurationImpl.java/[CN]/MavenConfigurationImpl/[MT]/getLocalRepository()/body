{
  if (!contains(m_pid + MavenConstants.PROPERTY_LOCAL_REPOSITORY)) {
    String spec=m_propertyResolver.get(m_pid + MavenConstants.PROPERTY_LOCAL_REPOSITORY);
    if (spec == null && m_settings != null) {
      spec=m_settings.getLocalRepository();
    }
    if (spec != null) {
      if (!spec.toLowerCase().contains("@snapshots")) {
        spec+="@snapshots";
      }
      try {
        return set(m_pid + MavenConstants.PROPERTY_LOCAL_REPOSITORY,new MavenRepositoryURL(spec));
      }
 catch (      MalformedURLException e) {
        try {
          return set(m_pid + MavenConstants.PROPERTY_LOCAL_REPOSITORY,new MavenRepositoryURL(new File(spec).toURI().toASCIIString()));
        }
 catch (        MalformedURLException ignore) {
          LOGGER.warn("Local repository [" + spec + "] cannot be used and will be skipped");
          return set(m_pid + MavenConstants.PROPERTY_LOCAL_REPOSITORY,null);
        }
      }
    }
  }
  return get(m_pid + MavenConstants.PROPERTY_LOCAL_REPOSITORY);
}
