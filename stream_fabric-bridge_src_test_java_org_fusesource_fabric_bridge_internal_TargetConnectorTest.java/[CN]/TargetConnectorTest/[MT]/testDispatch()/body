{
  connector.afterPropertiesSet();
  connector.start();
  sendMessages(TEST_LOCAL_BROKER_URL,BridgeDestinationsConfig.DEFAULT_STAGING_QUEUE_NAME,TEST_SOURCES.length * TEST_BATCH_SIZE,new MessageCreator(){
    int index=0;
    @Override public Message createMessage(    Session session) throws JMSException {
      TextMessage message=session.createTextMessage("Test Message " + index);
      message.setStringProperty(BridgeDestinationsConfig.DEFAULT_DESTINATION_NAME_HEADER,TEST_SOURCES[index]);
      index=++index < TEST_SOURCES.length ? index : 0;
      return message;
    }
  }
);
  for (  final String destinationName : TEST_SOURCES) {
    receiveMessages(TEST_LOCAL_BROKER_URL,destinationName,TEST_BATCH_SIZE,new BaseMatcher<Message>(){
      @Override public boolean matches(      Object message){
        boolean retVal=false;
        try {
          retVal=destinationName.matches(((TextMessage)message).getStringProperty(BridgeDestinationsConfig.DEFAULT_DESTINATION_NAME_HEADER));
        }
 catch (        JMSException e) {
          fail(e.getMessage());
        }
        return retVal;
      }
      @Override public void describeTo(      Description desc){
        desc.appendText("Message contains property " + BridgeDestinationsConfig.DEFAULT_DESTINATION_NAME_HEADER);
      }
    }
);
  }
}
