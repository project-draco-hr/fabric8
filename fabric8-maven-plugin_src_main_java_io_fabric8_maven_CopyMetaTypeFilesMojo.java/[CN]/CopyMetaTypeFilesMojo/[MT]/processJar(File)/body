{
  try {
    JarFile jarFile=new JarFile(file);
    Enumeration<JarEntry> entries=jarFile.entries();
    Map<String,String> xmlMap=new HashMap<>();
    Map<String,MetaData> metadataMap=new HashMap<>();
    Map<String,Properties> propertiesMap=new HashMap<>();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      String name=entry.getName();
      if (name.startsWith("OSGI-INF/metatype/")) {
        if (name.endsWith(XML_SUFFIX)) {
          MetaDataReader reader=new MetaDataReader();
          InputStream in=jarFile.getInputStream(entry);
          if (in != null) {
            String text=IOHelpers.readFully(in);
            MetaData metadata=reader.parse(new ByteArrayInputStream(text.getBytes()));
            if (metadata != null) {
              String pid=name.substring(0,name.length() - XML_SUFFIX.length());
              xmlMap.put(pid,text);
              metadataMap.put(pid,metadata);
            }
          }
        }
 else         if (name.endsWith(PROPERTIES_SUFFIX)) {
          String pid=name.substring(0,name.length() - PROPERTIES_SUFFIX.length());
          Properties properties=new Properties();
          InputStream in=jarFile.getInputStream(entry);
          if (in != null) {
            properties.load(in);
            propertiesMap.put(pid,properties);
          }
        }
      }
    }
    Set<Map.Entry<String,MetaData>> metadataEntries=metadataMap.entrySet();
    for (    Map.Entry<String,MetaData> metadataEntry : metadataEntries) {
      String pid=metadataEntry.getKey();
      MetaData metadata=metadataEntry.getValue();
      Properties properties=propertiesMap.get(pid);
      if (properties == null) {
        properties=new Properties();
      }
      String xml=xmlMap.get(pid);
      if (xml == null) {
        getLog().warn("Missing XML file for " + pid);
      }
 else {
        writeMetaTypeObjects(metadata,properties,xml);
      }
    }
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Failed to process jar " + file + ". "+ e,e);
  }
}
