{
  LOGGER.trace("deactivating: {}",key);
  if (!active.get()) {
    LOGGER.trace("not active: {}",key);
    return;
  }
  if (exclusiveLock.get()) {
    LOGGER.debug("deactivated (exclusive): {}",key);
    active.set(false);
    return;
  }
  getSinglePermit(timeout,unit);
  try {
    writeLock(timeout,unit).unlock();
    LOGGER.debug("deactivated: {}",key);
    active.set(false);
  }
 catch (  PermitStateTimeoutException ex) {
    semaphore.release(1);
    throw new PermitStateTimeoutException("Cannot deactivate state [" + key.getName() + "] in time",key,timeout,unit);
  }
}
