{
  DispatchQueue queue=Dispatch.createQueue();
  HashMap<String,SerializationStrategy> map=new HashMap<String,SerializationStrategy>();
  map.put("protobuf",new ProtobufSerializationStrategy());
  ServerInvokerImpl server=new ServerInvokerImpl("tcp://localhost:0",queue,map);
  server.start();
  ClientInvokerImpl client=new ClientInvokerImpl(queue,map);
  client.start();
  try {
    server.registerService("service-id",new ServerInvoker.ServiceFactory(){
      public Object get(){
        return new HelloImpl();
      }
      public void unget(){
      }
    }
,HelloImpl.class.getClassLoader());
    InvocationHandler handler=client.getProxy(server.getConnectAddress(),"service-id",HelloImpl.class.getClassLoader());
    final Hello hello=(Hello)Proxy.newProxyInstance(HelloImpl.class.getClassLoader(),new Class[]{Hello.class},handler);
    final AtomicInteger requests=new AtomicInteger(0);
    final AtomicInteger responses=new AtomicInteger(0);
    final AtomicInteger failures=new AtomicInteger(0);
    char[] chars=new char[65 * 1024];
    final String payload=new String(chars);
    Thread[] threads=new Thread[BENCHMARK_CLIENTS];
    for (int t=0; t < BENCHMARK_CLIENTS; t++) {
      threads[t]=new Thread(){
        public void run(){
          try {
            requests.incrementAndGet();
            hello.hello(payload);
            responses.incrementAndGet();
          }
 catch (          Throwable t) {
            failures.incrementAndGet();
          }
        }
      }
;
      threads[t].start();
    }
    for (int t=0; t < BENCHMARK_CLIENTS; t++) {
      threads[t].join(10000);
      System.err.format("REQUEST: %d of %d%n",requests.get(),BENCHMARK_CLIENTS);
      System.err.format("RESPONSES: %d of %d%n",responses.get(),BENCHMARK_CLIENTS);
      assertEquals(threads[t].isAlive(),false);
    }
    assertEquals(BENCHMARK_CLIENTS,requests.get());
    assertEquals(BENCHMARK_CLIENTS,responses.get());
    assertEquals(0,failures.get());
  }
  finally {
    server.stop();
    client.stop();
  }
}
