{
  activateComponent();
  CuratorFramework curatorFramework=curator.get();
  String path=ZkPath.WEBAPPS_CLUSTER.getPath("io.hawt.dockerui.hawtio-dockerui");
  Stat stat=null;
  try {
    stat=curatorFramework.checkExists().forPath(path);
  }
 catch (  Exception e) {
    LOG.warn("Failed to check if path " + path + " existed: "+ e,e);
  }
  if (stat == null) {
    try {
      curatorFramework.create().creatingParentsIfNeeded().forPath(path);
    }
 catch (    Exception e) {
      LOG.warn("Tried to create path " + path + " but got: "+ e,e);
    }
  }
  apiCache=new PathChildrenCache(curatorFramework,path,false);
  apiCache.getListenable().addListener(new PathChildrenCacheListener(){
    @Override public void childEvent(    CuratorFramework curatorFramework,    PathChildrenCacheEvent event) throws Exception {
      try {
        LOG.info("event: " + event);
        ChildData childData=event.getData();
        if (childData != null) {
          PathChildrenCacheEvent.Type eventType=event.getType();
          byte[] data=childData.getData();
          LOG.info("Got childEvent " + eventType + " "+ childData);
          if (isValidData(data)) {
            loadData(curatorFramework,eventType,data);
          }
 else {
            String path1=childData.getPath();
            List<String> names=curatorFramework.getChildren().forPath(path1);
            for (            String name : names) {
              String fullPath=path1 + "/" + name;
              data=curatorFramework.getData().forPath(fullPath);
              if (isValidData(data)) {
                LOG.info("Loading data: " + fullPath);
                loadData(curatorFramework,eventType,data);
              }
            }
          }
        }
      }
 catch (      Exception e) {
        LOG.warn("Caught: " + e,e);
      }
    }
  }
);
  try {
    apiCache.start(PathChildrenCache.StartMode.NORMAL);
  }
 catch (  Exception e) {
    LOG.warn("Failed to build initial apiCache: " + e,e);
  }
}
