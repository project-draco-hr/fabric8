{
  MethodSource<JavaClassSource> method=clazz.getMethod("configure");
  if (method != null && method.isPublic() && method.getParameters().isEmpty() && method.getReturnType().isType("void")) {
    return method;
  }
  method=clazz.getMethod("createRouteBuilder");
  if (method != null && (method.isPublic() || method.isProtected()) && method.getParameters().isEmpty()) {
    MethodDeclaration md=(MethodDeclaration)method.getInternal();
    Block block=md.getBody();
    if (block != null) {
      List statements=block.statements();
      for (int i=0; i < statements.size(); i++) {
        Statement stmt=(Statement)statements.get(i);
        if (stmt instanceof ReturnStatement) {
          ReturnStatement rs=(ReturnStatement)stmt;
          Expression exp=rs.getExpression();
          if (exp != null && exp instanceof ClassInstanceCreation) {
            ClassInstanceCreation cic=(ClassInstanceCreation)exp;
            boolean isRouteBuilder=false;
            if (cic.getType() instanceof SimpleType) {
              SimpleType st=(SimpleType)cic.getType();
              isRouteBuilder="RouteBuilder".equals(st.getName().toString());
            }
            if (isRouteBuilder && cic.getAnonymousClassDeclaration() != null) {
              List body=cic.getAnonymousClassDeclaration().bodyDeclarations();
              for (int j=0; j < body.size(); j++) {
                Object line=body.get(j);
                if (line instanceof MethodDeclaration) {
                  MethodDeclaration amd=(MethodDeclaration)line;
                  if ("configure".equals(amd.getName().toString())) {
                    return new AnonymousMethodSource(clazz,amd);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return null;
}
