{
  Set<ContainerProxy> containers=new HashSet<ContainerProxy>();
  BundleContext bundleContext=getBundleContext();
  FabricService fabricService=fabricServiceServiceProxy.getService();
  CompletionService<Set<ContainerProxy>> completionService=new ExecutorCompletionService<Set<ContainerProxy>>(executorService);
  int tasks=0;
  for (  B options : buildersList) {
    options.profiles(profileNames);
    if (!options.isEnsembleServer()) {
      options.zookeeperUrl(fabricService.getZookeeperUrl());
      completionService.submit(new CreateContainerTask(fabricServiceServiceProxy,options));
      tasks++;
    }
  }
  try {
    for (int i=0; i < tasks; i++) {
      Future<Set<ContainerProxy>> futureContainerSet=completionService.poll(CREATE_TIMEOUT,TimeUnit.MILLISECONDS);
      Set<ContainerProxy> containerSet=futureContainerSet.get();
      containers.addAll(containerSet);
    }
    try {
      if (waitForProvisioning) {
        Provision.containerStatus(containers,provisionTimeOut);
      }
      if (assertProvisioningResult) {
        Provision.provisioningSuccess(containers,provisionTimeOut,ContainerCallback.DISPLAY_ALL);
      }
    }
 catch (    Exception e) {
      throw FabricException.launderThrowable(e);
    }
  }
 catch (  Exception e) {
    throw FabricException.launderThrowable(e);
  }
  return Collections.unmodifiableSet(containers);
}
