{
  LOG.debug("Generating Fabric profile from dir: {}",pom);
  File projectDir=pom.getParentFile();
  Document doc=archetypeHelper.parseXml(new InputSource(new FileReader(pom)));
  Element root=doc.getDocumentElement();
  String packaging=archetypeHelper.firstElementText(root,"packaging","");
  String groupId=archetypeHelper.firstElementText(root,"groupId","");
  String artifactId=archetypeHelper.firstElementText(root,"artifactId","");
  String profile=archetypeHelper.firstElementText(root,"fabric8.profile",null);
  String parentProfiles=archetypeHelper.firstElementText(root,"fabric8.parentProfiles","karaf");
  String featureRepos=archetypeHelper.firstElementText(root,"fabric8.featureRepos",null);
  String features=archetypeHelper.firstElementText(root,"fabric8.features",null);
  String bundles=archetypeHelper.firstElementText(root,"fabric8.bundles",null);
  String includeArtifact=archetypeHelper.firstElementText(root,"fabric8.includeArtifact","true");
  String projectConfigDir=archetypeHelper.firstElementText(root,"fabric8.profileConfigDir","src/main/fabric8");
  String projectDataDir=archetypeHelper.firstElementText(root,"fabric8.profileConfigDir","src/main/resources/data");
  String includeRootReadMe=archetypeHelper.firstElementText(root,"fabric8.includeRootReadMe","true");
  if (ArchetypeHelper.isEmpty(profile)) {
    profile=groupId + "-" + artifactId;
  }
  StringBuilder sb=new StringBuilder();
  if ("war".equals(packaging)) {
    sb.append("\nattribute.parents = " + parentProfiles);
    if ("true".equalsIgnoreCase(includeArtifact)) {
      sb.append("\nbundle." + artifactId + " = "+ "war:mvn:"+ groupId+ "/"+ artifactId+ "/${version:fabric}/war");
    }
  }
 else   if ("bundle".equals(packaging)) {
    sb.append("\nattribute.parents = " + parentProfiles);
    if ("true".equalsIgnoreCase(includeArtifact)) {
      sb.append("\nbundle." + artifactId + " = "+ "mvn:"+ groupId+ "/"+ artifactId+ "/${version:fabric}");
    }
  }
 else {
    sb.append("\nattribute.parents = " + parentProfiles);
  }
  if (featureRepos != null) {
    String[] parts=featureRepos.split("\\s+");
    int i=0;
    for (    String s : parts) {
      if (!ArchetypeHelper.isEmpty(s)) {
        sb.append("\nrepository.repository-" + i + " = "+ s);
        i++;
      }
    }
  }
  if (features != null) {
    String[] parts=features.split("\\s+");
    for (    String s : parts) {
      if (!ArchetypeHelper.isEmpty(s)) {
        sb.append("\nfeature." + s + " = "+ s);
      }
    }
  }
  if (bundles != null) {
    String[] parts=bundles.split("\\s+");
    int i=0;
    for (    String s : parts) {
      if (!ArchetypeHelper.isEmpty(s)) {
        sb.append("\nbundle.bundle-" + i + " = "+ s);
        i++;
      }
    }
  }
  sb.append("\n");
  profile=profile.replace("-","/");
  File profileDir=new File(karafProfileDir,"/" + profile + ".profile");
  if (!profileDir.exists()) {
    profileDir.mkdirs();
  }
  File agent=new File(profileDir,"io.fabric8.agent.properties");
  ArchetypeHelper.writeFile(agent,sb.toString(),false);
  if ("true".equalsIgnoreCase(includeRootReadMe)) {
    File readme=findReadMe(projectDir);
    if (readme != null) {
      File target=new File(profileDir,"ReadMe.md");
      LOG.debug("Copying readme file {} -> {}",readme,target);
      copyFile(readme,target,new IdentityReplacement());
    }
  }
  File projectConfig=new File(projectDir,projectConfigDir);
  if (projectConfig.exists()) {
    LOG.debug("Coping config from dir " + projectConfig);
    copyDataFiles(projectConfig,projectConfig,profileDir,null);
  }
  File projectData=new File(projectDir,projectDataDir);
  if (projectData.exists()) {
    LOG.debug("Coping data from dir " + projectData);
    copyDataFiles(projectData,projectData,new File(profileDir,"data"),null);
  }
}
