{
  LOG.debug("Generating archetype from {} to {}",projectDir.getName(),archetypeDir.getCanonicalPath());
  dirs.add(archetypeDir.getName());
  File srcDir=new File(projectDir,"src/main");
  File testDir=new File(projectDir,"src/test");
  File outputSrcDir=new File(archetypeDir,"src");
  File outputGitIgnoreFile=new File(archetypeDir,".gitignore");
  if (clean) {
    LOG.debug("Removing generated archetype dir {}",archetypeDir);
    FileUtils.deleteDirectory(archetypeDir);
  }
 else   if (outputSrcDir.exists() && outputGitIgnoreFile.exists() && fileIncludesLine(outputGitIgnoreFile,"src")) {
    LOG.debug("Removing generated src dir {}",outputSrcDir);
    FileUtils.deleteDirectory(outputSrcDir);
    if (outputSrcDir.exists()) {
      throw new RuntimeException("The projectDir " + outputSrcDir + " should not exist!");
    }
  }
  File archetypeOutputDir=new File(archetypeDir,"src/main/resources/archetype-resources");
  File metadataXmlOutFile=new File(archetypeDir,"src/main/resources-filtered/META-INF/maven/archetype-metadata.xml");
  Replacement replaceFunction=new IdentityReplacement();
  File mainSrcDir=null;
  for (  String it : ArchetypeUtils.sourceCodeDirNames) {
    File dir=new File(srcDir,it);
    if (dir.exists()) {
      mainSrcDir=dir;
      break;
    }
  }
  if (mainSrcDir != null) {
    File rootPackage=archetypeUtils.findRootPackage(mainSrcDir);
    if (rootPackage != null) {
      String packagePath=archetypeUtils.relativePath(mainSrcDir,rootPackage);
      String packageName=packagePath.replace(File.separatorChar,'.');
      LOG.debug("Found root package in {}: {}",mainSrcDir,packageName);
      final String regex=packageName.replace(".","\\.");
      replaceFunction=new Replacement(){
        @Override public String replace(        String token){
          return token.replaceAll(regex,"\\${package}");
        }
      }
;
      File outputMainSrc=new File(archetypeOutputDir,archetypeUtils.relativePath(projectDir,mainSrcDir));
      copyCodeFiles(rootPackage,outputMainSrc,replaceFunction);
    }
  }
  File testSrcDir=null;
  for (  String it : ArchetypeUtils.sourceCodeDirNames) {
    File dir=new File(testDir,it);
    if (dir.exists()) {
      testSrcDir=dir;
      break;
    }
  }
  if (testSrcDir != null) {
    File rootPackage=archetypeUtils.findRootPackage(testSrcDir);
    if (rootPackage != null) {
      String packagePath=archetypeUtils.relativePath(testSrcDir,rootPackage);
      String packageName=packagePath.replace(File.separatorChar,'.');
      LOG.debug("Found root package in {}: {}",testSrcDir,packageName);
      final String regex=packageName.replace(".","\\.");
      replaceFunction=new Replacement(){
        @Override public String replace(        String token){
          return token.replaceAll(regex,"\\${package}");
        }
      }
;
      File rootTestDir=new File(testSrcDir,packagePath);
      File outputTestSrc=new File(archetypeOutputDir,archetypeUtils.relativePath(projectDir,testSrcDir));
      if (rootTestDir.exists()) {
        copyCodeFiles(rootTestDir,outputTestSrc,replaceFunction);
      }
 else {
        copyCodeFiles(testSrcDir,outputTestSrc,replaceFunction);
      }
    }
  }
  createArchetypeDescriptors(projectPom,archetypeDir,new File(archetypeOutputDir,"pom.xml"),metadataXmlOutFile,replaceFunction);
  copyOtherFiles(projectDir,projectDir,archetypeOutputDir,replaceFunction);
  if (!outputGitIgnoreFile.exists()) {
    ArchetypeUtils.writeGitIgnore(outputGitIgnoreFile);
  }
}
