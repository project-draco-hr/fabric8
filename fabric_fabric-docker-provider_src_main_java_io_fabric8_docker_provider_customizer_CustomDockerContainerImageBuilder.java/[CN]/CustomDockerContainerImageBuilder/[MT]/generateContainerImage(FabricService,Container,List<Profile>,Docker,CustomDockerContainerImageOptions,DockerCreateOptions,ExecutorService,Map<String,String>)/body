{
  String libDirAndSeparator=ensureEndsWithFileSeparator(options.getJavaLibraryPath());
  String deployDirAndSeparator=ensureEndsWithFileSeparator(options.getJavaDeployPath());
  String homeDirAndSeparator=ensureEndsWithFileSeparator(options.getHomePath());
  String baseImage=options.getBaseImage();
  String tag=options.getNewImageName();
  DockerFileBuilder dockerFile=DockerFileBuilder.from(baseImage);
  File tmpDockerfileDir=File.createTempFile("fabric-",".dockerfiledir");
  tmpDockerfileDir.delete();
  tmpDockerfileDir.mkdirs();
  String libDirPath="lib";
  File uploadLibDir=new File(tmpDockerfileDir,libDirPath);
  String deployDirPath="deploy";
  File uploadDeployDir=new File(tmpDockerfileDir,deployDirPath);
  String overlaysDirPath="overlays";
  File overlaysDir=new File(tmpDockerfileDir,overlaysDirPath);
  ArtifactFilesAdder artifactFilesAdder;
  if (options.isMavenJavaLibraryPathLayout()) {
    artifactFilesAdder=new MavenArtifactFilesAdder(fabric,profileList,downloadExecutor,uploadLibDir,uploadDeployDir);
  }
 else {
    artifactFilesAdder=new FlatArtifactFilesAdder(fabric,profileList,downloadExecutor,uploadLibDir,uploadDeployDir);
  }
  artifactFilesAdder.invoke();
  int libFileCount=artifactFilesAdder.getLibFileCount();
  int deployFileCount=artifactFilesAdder.getDeployFileCount();
  Set<String> artifactKeys=artifactFilesAdder.getArtifactKeys();
  if (libFileCount > 0) {
    dockerFile.add(libDirPath,libDirAndSeparator);
  }
  if (deployFileCount > 0) {
    if (libFileCount == 0 || !Objects.equal(libDirPath,overlaysDirPath)) {
      dockerFile.add(deployDirPath,deployDirAndSeparator);
    }
  }
  if (container != null) {
    List<String> bundles=new ArrayList<String>();
    for (    String name : artifactKeys) {
      if (name.startsWith("fab:")) {
        name=name.substring(4);
      }
      bundles.add(name);
    }
    Collections.sort(bundles);
    container.setProvisionList(bundles);
  }
  String restAPI=fabric.getRestAPI();
  int overlays=0;
  if (Strings.isNotBlank(restAPI)) {
    String profileOverlayFolder=options.getOverlayFolder();
    overlays=addOverlayFiles(dockerFile,restAPI,fabric,profileList,containerOptions,envVars,homeDirAndSeparator,overlaysDir,tmpDockerfileDir,profileOverlayFolder);
    String[] childFiles=overlaysDir.list();
    if (childFiles != null && childFiles.length > 0) {
      dockerFile.add(overlaysDirPath,homeDirAndSeparator);
    }
  }
 else {
    LOGGER.error("Cannot perform container overlays as there is no REST API for fabric8!");
  }
  if (overlays == 0 && libFileCount == 0 && deployFileCount == 0) {
    LOGGER.info("Not creating a custom docker container as no files to deploy or overlays");
    return null;
  }
  String[] copiedEnvVars=JavaContainerEnvironmentVariables.ALL_ENV_VARS;
  for (  String envVarName : copiedEnvVars) {
    String value=envVars.get(envVarName);
    if (value != null) {
      dockerFile.env(envVarName,value);
    }
  }
  String entryPoint=options.getEntryPoint();
  if (Strings.isNotBlank(entryPoint)) {
    dockerFile.cmd(entryPoint);
  }
  dockerFile.writeTo(new File(tmpDockerfileDir,"Dockerfile"));
  File tmpArchive=File.createTempFile("fabric8-",".dockerarchive");
  createDockerArchive(tmpArchive,tmpDockerfileDir);
  String answer=tag;
  Object errors=null;
  try {
    LOGGER.info("POSTing archive " + tmpArchive.getCanonicalPath() + " from docker archive folder "+ tmpDockerfileDir.getCanonicalPath());
    Object results=docker.build(tmpArchive,tag,0,0,1,1);
    LOGGER.info("Docker Build Result: " + results);
  }
 catch (  Exception e) {
    LOGGER.error("Failed to upload docker folder: " + tmpDockerfileDir + ": "+ Dockers.dockerErrorMessage(e)+ ". "+ e,e);
    throw e;
  }
  if (answer == null) {
    LOGGER.error("Failed to create image " + errors);
    throw new CreateDockerImageFailedException("Failed to create docker image: " + errors);
  }
 else {
    LOGGER.info("Created Image: " + answer);
    return answer;
  }
}
