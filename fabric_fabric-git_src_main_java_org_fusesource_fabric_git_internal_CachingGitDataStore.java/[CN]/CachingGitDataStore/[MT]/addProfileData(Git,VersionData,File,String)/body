{
  String profile=file.getName();
  if (useDirectoriesForProfiles) {
    if (profile.endsWith(PROFILE_FOLDER_SUFFIX)) {
      profile=prefix + profile.substring(0,profile.length() - PROFILE_FOLDER_SUFFIX.length());
    }
 else {
      File[] files=file.listFiles();
      if (files != null) {
        for (        File child : files) {
          if (child.isDirectory()) {
            addProfileData(git,data,child,prefix + file.getName() + "-");
          }
        }
      }
      return;
    }
  }
  long lastModified=file.lastModified();
  File metadataFile=new File(file,AGENT_METADATA_FILE);
  if (metadataFile.exists()) {
    long modified=metadataFile.lastModified();
    lastModified=Math.max(lastModified,modified);
  }
  Map<String,byte[]> configurations=doGetFileConfigurations(git,profile);
  Map<String,Map<String,String>> substituted=new HashMap<String,Map<String,String>>();
  for (  Map.Entry<String,byte[]> entry : configurations.entrySet()) {
    if (entry.getKey().endsWith(".properties")) {
      String pid=DataStoreHelpers.stripSuffix(entry.getKey(),".properties");
      substituted.put(pid,DataStoreHelpers.toMap(DataStoreHelpers.toProperties(entry.getValue())));
    }
  }
  ProfileData profileData=new ProfileData(lastModified,configurations,substituted);
  data.profiles.put(profile,profileData);
}
