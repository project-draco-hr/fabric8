{
  _stateChangeDispatcher.setDaemon(true);
  _stateChangeDispatcher.start();
  bundleContext.addServiceListener(new ServiceListener(){
    @Override public void serviceChanged(    ServiceEvent event){
      if (_state == State.CONNECTED && event.getType() == ServiceEvent.REGISTERED) {
        LifecycleListener listener=(LifecycleListener)bundleContext.getService(event.getServiceReference());
        try {
          listener.onConnected();
        }
 catch (        Throwable e) {
          log.warn("Exception while executing listener (ignored)",e);
        }
 finally {
          bundleContext.ungetService(event.getServiceReference());
        }
      }
    }
  }
,"(" + Constants.OBJECTCLASS + "="+ LifecycleListener.class.getName()+ ")");
  Hashtable ht=new Hashtable();
  zkClientRegistration=bundleContext.registerService(new String[]{IZKClient.class.getName(),org.linkedin.zookeeper.client.IZKClient.class.getName()},this,ht);
  ht=new Hashtable();
  ht.put(Constants.SERVICE_PID,PID);
  managedServiceRegistration=bundleContext.registerService(ManagedService.class.getName(),this,ht);
  updated(getDefaultProperties());
}
