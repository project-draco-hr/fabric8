{
  Map<Object,Boolean> newHistory=super.callListeners(history,connectedEvent);
  try {
    ServiceReference[] references=bundleContext.getServiceReferences(LifecycleListener.class.getName(),null);
    if (references != null) {
      for (      ServiceReference reference : references) {
        LifecycleListener listener=(LifecycleListener)bundleContext.getService(reference);
        Boolean previousEvent=history.get(reference);
        if (previousEvent == null || previousEvent != connectedEvent) {
          try {
            if (connectedEvent) {
              listener.onConnected();
            }
 else {
              listener.onDisconnected();
            }
          }
 catch (          Throwable e) {
            LOG.warn("Exception while executing listener (ignored)",e);
          }
        }
        newHistory.put(reference,connectedEvent);
        bundleContext.ungetService(reference);
      }
    }
  }
 catch (  InvalidSyntaxException e) {
    throw new IllegalStateException(e);
  }
  return newHistory;
}
