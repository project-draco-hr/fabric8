{
  Map<Object,Boolean> history=new IdentityHashMap<Object,Boolean>();
  log.info("Starting StateChangeDispatcher");
  while (_running.get()) {
    Boolean isConnectedEvent;
    try {
      isConnectedEvent=_events.take();
    }
 catch (    InterruptedException e) {
      continue;
    }
    if (!_running.get() || isConnectedEvent == null) {
      continue;
    }
    Map<Object,Boolean> newHistory=new IdentityHashMap<Object,Boolean>();
    for (    LifecycleListener listener : _listeners) {
      Boolean previousEvent=history.get(listener);
      if (previousEvent == null || previousEvent != isConnectedEvent) {
        try {
          if (isConnectedEvent) {
            listener.onConnected();
          }
 else {
            listener.onDisconnected();
          }
        }
 catch (        Throwable e) {
          log.warn("Exception while executing listener (ignored)",e);
        }
      }
      newHistory.put(listener,isConnectedEvent);
    }
    try {
      ServiceReference[] references=bundleContext.getServiceReferences(LifecycleListener.class.getName(),null);
      if (references != null) {
        for (        ServiceReference reference : references) {
          LifecycleListener listener=(LifecycleListener)bundleContext.getService(reference);
          Boolean previousEvent=history.get(reference);
          if (previousEvent == null || previousEvent != isConnectedEvent) {
            try {
              if (isConnectedEvent) {
                listener.onConnected();
              }
 else {
                listener.onDisconnected();
              }
            }
 catch (            Throwable e) {
              log.warn("Exception while executing listener (ignored)",e);
            }
          }
          newHistory.put(reference,isConnectedEvent);
          bundleContext.ungetService(reference);
        }
      }
    }
 catch (    InvalidSyntaxException e) {
      throw new IllegalStateException(e);
    }
    history=newHistory;
  }
  log.info("StateChangeDispatcher terminated.");
}
