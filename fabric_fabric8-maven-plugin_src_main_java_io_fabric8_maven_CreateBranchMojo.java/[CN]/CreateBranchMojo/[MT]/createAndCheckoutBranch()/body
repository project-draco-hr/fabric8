{
  if (Strings.isNullOrBlank(oldBranchName)) {
    List<String> branches=new ArrayList<String>(RepositoryUtils.getBranches(git.getRepository()));
    int size=branches.size();
    if (size > 0) {
      String last=branches.get(size - 1);
      int idx=last.lastIndexOf('/');
      if (idx > 0) {
        oldBranchName=last.substring(idx + 1);
        getLog().info("Using previous branch: " + oldBranchName);
      }
    }
  }
  if (Strings.isNullOrBlank(oldBranchName)) {
    oldBranchName="master";
    getLog().warn("Could not deduce the old branch so setting it to: " + oldBranchName);
  }
  checkoutBranch(git,oldBranchName);
  getLog().info("Creating branch " + branchName + " in "+ getGitBuildPathDescription());
  createOrCheckoutBranch(git,branchName,remoteName);
  checkoutBranch(git,branchName);
}
