{
  System.err.println(executeCommand("fabric:create -n"));
  CuratorFramework curator=getCurator();
  Set<Container> containers=ContainerBuilder.create(2).withName("cnt").withProfiles("default").assertProvisioningResult().build();
  Container broker=containers.iterator().next();
  containers.remove(broker);
  setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(broker.getId()),"changing");
  System.err.println(executeCommand("fabric:container-change-profile " + broker.getId() + " mq-default"));
  Provision.provisioningSuccess(Arrays.asList(new Container[]{broker}),PROVISION_TIMEOUT);
  System.err.println(executeCommand("fabric:cluster-list"));
  for (  Container c : containers) {
    setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(c.getId()),"changing");
    System.err.println(executeCommand("fabric:container-change-profile " + c.getId() + " example-mq"));
  }
  Provision.provisioningSuccess(containers,PROVISION_TIMEOUT);
  System.err.println(executeCommand("fabric:cluster-list"));
  assertTrue(Provision.waitForCondition(Arrays.asList(new Container[]{broker}),new ContainerCondition(){
    @Override public Boolean checkConditionOnContainer(    final Container c){
      System.err.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " activemq:bstat"));
      String output=executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " activemq:query -QQueue=FABRIC.DEMO");
      return output.contains("DequeueCount = ") && !output.contains("DequeueCount = 0");
    }
  }
,10000L));
}
