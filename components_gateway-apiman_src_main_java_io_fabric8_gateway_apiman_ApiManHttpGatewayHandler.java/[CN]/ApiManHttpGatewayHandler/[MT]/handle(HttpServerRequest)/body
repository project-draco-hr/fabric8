{
  final long callStart=System.nanoTime();
  if (HttpMapping.isMappingIndexRequest(request,httpGateway)) {
    HttpMapping.respond(request,httpGateway);
    return;
  }
  ServiceRequest srequest=new ServiceRequest();
  srequest.setRawRequest(request);
  srequest.setApiKey(getApiKey(request));
  srequest.setType(request.method());
  srequest.setRemoteAddr(request.remoteAddress().getAddress().getHostAddress());
  srequest.setDestination(request.path());
  Map<String,String> headerMap=new HashMap<String,String>();
  for (  String key : request.headers().names()) {
    headerMap.put(key,request.headers().get(key));
  }
  srequest.setHeaders(headerMap);
  final HttpServerResponse response=request.response();
  IEngine engine=(IEngine)apiManager.getEngine();
  final IServiceRequestExecutor requestExecutor=engine.executor(srequest,new IAsyncResultHandler<IEngineResult>(){
    @Override public void handle(    IAsyncResult<IEngineResult> iAsyncEngineResult){
      if (!iAsyncEngineResult.isSuccess()) {
        response.setStatusCode(500);
        response.setStatusMessage("Gateway Internal Error: " + iAsyncEngineResult.getError().getMessage());
        response.close();
        LOG.error("Gateway Internal Error " + iAsyncEngineResult.getError().getMessage());
      }
 else {
        IEngineResult engineResult=iAsyncEngineResult.getResult();
        if (engineResult.isFailure()) {
          ServiceResponse serviceResponse=engineResult.getServiceResponse();
          if (serviceResponse != null) {
            final HttpClient finalClient=(HttpClient)serviceResponse.getAttribute("finalClient");
            finalClient.close();
          }
          PolicyFailure policyFailure=engineResult.getPolicyFailure();
          response.putHeader("X-Policy-Failure-Type",String.valueOf(policyFailure.getType()));
          response.putHeader("X-Policy-Failure-Message",policyFailure.getMessage());
          response.putHeader("X-Policy-Failure-Code",String.valueOf(policyFailure.getFailureCode()));
          int errorCode=403;
          if (policyFailure.getType() == PolicyFailureType.Authentication) {
            errorCode=401;
          }
 else           if (policyFailure.getType() == PolicyFailureType.Authorization) {
            errorCode=401;
          }
          response.setStatusCode(errorCode);
          response.setStatusMessage(policyFailure.getMessage());
          response.end();
          response.close();
        }
 else         if (engineResult.isResponse()) {
          ServiceResponse serviceResponse=engineResult.getServiceResponse();
          response.setStatusCode(serviceResponse.getCode());
          response.setStatusMessage(serviceResponse.getMessage());
          response.setChunked(true);
          engineResult.bodyHandler(new IAsyncHandler<IApimanBuffer>(){
            @Override public void handle(            IApimanBuffer chunk){
              response.write((Buffer)chunk.getNativeBuffer());
            }
          }
);
          engineResult.endHandler(new IAsyncHandler<Void>(){
            @Override public void handle(            Void flag){
              LOG.debug("ResponseCode from downstream " + response.getStatusCode());
              CallDetailRecord cdr=new CallDetailRecord(System.nanoTime() - callStart,response.getStatusMessage());
              httpGateway.addCallDetailRecord(cdr);
              response.end();
              response.close();
              LOG.debug("Complete success, and closed the client connection.");
            }
          }
);
        }
      }
    }
  }
);
  requestExecutor.streamHandler(new IAsyncHandler<ISignalWriteStream>(){
    @Override public void handle(    final ISignalWriteStream writeStream){
      request.dataHandler(new Handler<Buffer>(){
        public void handle(        Buffer data){
          IApimanBuffer apimanBuffer=new VertxBuffer(data);
          writeStream.write(apimanBuffer);
        }
      }
);
      writeStream.end();
    }
  }
);
  requestExecutor.execute();
}
