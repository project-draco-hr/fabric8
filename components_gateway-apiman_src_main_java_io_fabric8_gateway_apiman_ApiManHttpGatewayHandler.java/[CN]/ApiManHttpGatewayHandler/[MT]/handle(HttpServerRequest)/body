{
  final long callStart=System.nanoTime();
  ServiceRequest srequest=new ServiceRequest();
  srequest.setRawRequest(request);
  srequest.setApiKey(getApiKey(request));
  srequest.setType(request.method());
  srequest.setRemoteAddr(request.remoteAddress().getAddress().getHostAddress());
  srequest.setDestination(request.path());
  Map<String,String> headerMap=new HashMap<String,String>();
  for (  String key : request.headers().names()) {
    headerMap.put(key,request.headers().get(key));
  }
  srequest.setHeaders(headerMap);
  final HttpServerResponse response=request.response();
  IAsyncHandler<EngineResult> asyncHandler=new IAsyncHandler<EngineResult>(){
    @Override public void handle(    IAsyncResult<EngineResult> result){
      if (result.isError()) {
        response.setStatusCode(500);
        response.setStatusMessage("Gateway Internal Error");
        response.end();
        LOG.error("Gateway Internal Error: " + result.getError().getMessage(),result.getError());
      }
 else {
        EngineResult engineResult=result.getResult();
        if (engineResult.isFailure()) {
          ServiceResponse serviceResponse=engineResult.getServiceResponse();
          if (serviceResponse != null) {
            final HttpClient finalClient=(HttpClient)serviceResponse.getAttribute("finalClient");
            finalClient.close();
          }
          PolicyFailure policyFailure=engineResult.getPolicyFailure();
          response.putHeader("X-Policy-Failure-Type",String.valueOf(policyFailure.getType()));
          response.putHeader("X-Policy-Failure-Message",policyFailure.getMessage());
          response.putHeader("X-Policy-Failure-Code",String.valueOf(policyFailure.getFailureCode()));
          int errorCode=500;
          if (policyFailure.getType() == PolicyFailureType.Authentication) {
            errorCode=401;
          }
 else           if (policyFailure.getType() == PolicyFailureType.Authorization) {
            errorCode=403;
          }
          response.setStatusCode(errorCode);
          response.setStatusMessage(policyFailure.getMessage());
          response.end();
        }
 else         if (engineResult.isResponse()) {
          ServiceResponse serviceResponse=engineResult.getServiceResponse();
          response.setStatusCode(serviceResponse.getCode());
          response.setStatusMessage(serviceResponse.getMessage());
          HttpClientResponse clientResponse=(HttpClientResponse)serviceResponse.getAttribute(ApiManService.ATTR_CLIENT_RESPONSE);
          if (clientResponse != null) {
            final HttpClient httpClient=(HttpClient)serviceResponse.getAttribute(ApiManService.ATTR_HTTP_CLIENT);
            response.setChunked(true);
            clientResponse.dataHandler(new Handler<Buffer>(){
              public void handle(              Buffer data){
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Proxying response body:" + data);
                }
                response.write(data);
              }
            }
);
            clientResponse.endHandler(new VoidHandler(){
              public void handle(){
                response.end();
                httpClient.close();
              }
            }
);
            LOG.debug("ResponseCode from downstream " + clientResponse.statusCode());
          }
          CallDetailRecord cdr=new CallDetailRecord(System.nanoTime() - callStart,clientResponse.statusMessage());
          httpGateway.addCallDetailRecord(cdr);
        }
      }
    }
  }
;
  ((IEngine)apiManager.getEngine()).execute(srequest,asyncHandler);
}
