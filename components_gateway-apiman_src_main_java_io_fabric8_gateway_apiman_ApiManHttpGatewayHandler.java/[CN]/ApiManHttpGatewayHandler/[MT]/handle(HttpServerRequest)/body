{
  final long callStart=System.nanoTime();
  final HttpServerResponse response=request.response();
  try {
    if (HttpMapping.isMappingIndexRequest(request,httpGateway)) {
      HttpMapping.respond(request,httpGateway);
      return;
    }
    ServiceRequest srequest=new ServiceRequest();
    srequest.setRawRequest(request);
    srequest.setApiKey(getApiKey(request));
    srequest.setType(request.method());
    srequest.setRemoteAddr(request.remoteAddress().getAddress().getHostAddress());
    srequest.setDestination(request.path());
    Map<String,String> headerMap=new HashMap<String,String>();
    for (    String key : request.headers().names()) {
      headerMap.put(key,request.headers().get(key));
    }
    srequest.setHeaders(headerMap);
    IMappedServices mappedServices=HttpMapping.getMapping(request,httpGateway.getMappedServices());
    if (mappedServices != null) {
      ProxyMappingDetails proxyMappingDetails=mappedServices.getProxyMappingDetails();
      String[] apiManagerServiceInfo=apiManager.getApiManagerServiceInfo(proxyMappingDetails.getServicePath());
      if (apiManagerServiceInfo == null)       throw new Exception("Service Not Found in API Manager.");
      srequest.setServiceOrgId(apiManagerServiceInfo[0]);
      srequest.setServiceId(apiManagerServiceInfo[1]);
      srequest.setServiceVersion(apiManagerServiceInfo[2]);
    }
 else {
      throw new Exception("Service Not Found in API Manager.");
    }
    IEngine engine=(IEngine)apiManager.getEngine();
    final IServiceRequestExecutor requestExecutor=engine.executor(srequest,new IAsyncResultHandler<IEngineResult>(){
      @Override public void handle(      IAsyncResult<IEngineResult> iAsyncEngineResult){
        if (!iAsyncEngineResult.isSuccess()) {
          response.setStatusCode(500);
          response.setStatusMessage("Gateway Internal Error: " + iAsyncEngineResult.getError().getMessage());
          response.end();
          LOG.error("Gateway Internal Error " + iAsyncEngineResult.getError().getMessage());
        }
 else {
          IEngineResult engineResult=iAsyncEngineResult.getResult();
          if (engineResult.isFailure()) {
            ServiceResponse serviceResponse=engineResult.getServiceResponse();
            if (serviceResponse != null) {
              final HttpClient finalClient=(HttpClient)serviceResponse.getAttribute("finalClient");
              finalClient.close();
            }
            PolicyFailure policyFailure=engineResult.getPolicyFailure();
            response.putHeader("X-Policy-Failure-Type",String.valueOf(policyFailure.getType()));
            response.putHeader("X-Policy-Failure-Message",policyFailure.getMessage());
            response.putHeader("X-Policy-Failure-Code",String.valueOf(policyFailure.getFailureCode()));
            int errorCode=403;
            if (policyFailure.getType() == PolicyFailureType.Authentication) {
              errorCode=401;
            }
 else             if (policyFailure.getType() == PolicyFailureType.Authorization) {
              errorCode=401;
            }
            response.setStatusCode(errorCode);
            response.setStatusMessage(policyFailure.getMessage());
            response.end();
          }
 else           if (engineResult.isResponse()) {
            ServiceResponse serviceResponse=engineResult.getServiceResponse();
            response.setStatusCode(serviceResponse.getCode());
            response.setStatusMessage(serviceResponse.getMessage());
            response.setChunked(true);
            engineResult.bodyHandler(new IAsyncHandler<IApimanBuffer>(){
              @Override public void handle(              IApimanBuffer chunk){
                response.write((Buffer)chunk.getNativeBuffer());
              }
            }
);
            engineResult.endHandler(new IAsyncHandler<Void>(){
              @Override public void handle(              Void flag){
                LOG.debug("ResponseCode from downstream " + response.getStatusCode());
                CallDetailRecord cdr=new CallDetailRecord(System.nanoTime() - callStart,response.getStatusMessage());
                httpGateway.addCallDetailRecord(cdr);
                response.end();
                LOG.debug("Complete success, and response end.");
              }
            }
);
          }
        }
      }
    }
);
    requestExecutor.streamHandler(new IAsyncHandler<ISignalWriteStream>(){
      @Override public void handle(      final ISignalWriteStream writeStream){
        request.dataHandler(new Handler<Buffer>(){
          @Override public void handle(          Buffer data){
            IApimanBuffer apimanBuffer=new VertxApimanBuffer(data);
            writeStream.write(apimanBuffer);
          }
        }
);
        writeStream.end();
      }
    }
);
    requestExecutor.execute();
  }
 catch (  Exception e) {
    response.setStatusCode(404);
    response.setStatusMessage("User error " + e.getMessage());
    response.end();
    LOG.error("User error " + e.getMessage());
  }
}
