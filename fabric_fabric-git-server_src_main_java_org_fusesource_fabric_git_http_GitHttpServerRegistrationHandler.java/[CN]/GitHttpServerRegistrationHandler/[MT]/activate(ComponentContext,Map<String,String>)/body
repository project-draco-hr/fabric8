{
  activateComponent(context);
  try {
    this.realm=properties != null && properties.containsKey(REALM_PROPERTY_NAME) ? properties.get(REALM_PROPERTY_NAME) : DEFAULT_REALM;
    this.role=properties != null && properties.containsKey(ROLE_PROPERTY_NAME) ? properties.get(ROLE_PROPERTY_NAME) : DEFAULT_ROLE;
    group=new ZooKeeperGroup(curator,ZkPath.GIT.getPath(),GitNode.class);
    group.add(this);
    group.update(createState());
    group.start();
    try {
      HttpContext base=httpService.createDefaultHttpContext();
      HttpContext secure=new SecureHttpContext(base,realm,role);
      String basePath=System.getProperty("karaf.data") + File.separator + "git"+ File.separator;
      String fabricGitPath=basePath + "fabric";
      File fabricRoot=new File(fabricGitPath);
      if (!fabricRoot.exists() && !fabricRoot.mkdirs()) {
        throw new FileNotFoundException("Could not found git root:" + basePath);
      }
      Dictionary<String,Object> initParams=new Hashtable<String,Object>();
      initParams.put("base-path",basePath);
      initParams.put("repository-root",basePath);
      initParams.put("export-all","true");
      httpService.registerServlet("/git",gitServlet,initParams,secure);
    }
 catch (    Exception e) {
      LOGGER.error("Error while registering git servlet",e);
    }
  }
 catch (  RuntimeException rte) {
    deactivateComponent();
    throw rte;
  }
}
