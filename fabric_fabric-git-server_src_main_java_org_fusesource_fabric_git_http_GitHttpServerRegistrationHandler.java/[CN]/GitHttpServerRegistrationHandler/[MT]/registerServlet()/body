{
  try {
    HttpContext base=httpService.get().createDefaultHttpContext();
    HttpContext secure=new SecureHttpContext(base,realm,role);
    File fabricRoot=new File(FABRIC_REPO_PATH);
    if (!fabricRoot.exists()) {
      Git localGit=gitService.get().get();
      Git.cloneRepository().setTimeout(10).setBare(true).setNoCheckout(true).setCloneAllBranches(true).setDirectory(fabricRoot).setURI(localGit.getRepository().getDirectory().toURI().toString()).call().getRepository().close();
    }
    Dictionary<String,Object> initParams=new Hashtable<String,Object>();
    initParams.put("base-path",SERVLET_BASE_PATH);
    initParams.put("repository-root",SERVLET_BASE_PATH);
    initParams.put("export-all","true");
    httpService.get().registerServlet("/git",gitServlet,initParams,secure);
  }
 catch (  Throwable t) {
    throw FabricException.launderThrowable(t);
  }
}
