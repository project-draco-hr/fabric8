{
  Configuration configuration=new Configuration();
  try {
    configuration.masterUrl=getStringProperty(KUBERNETES_MASTER,map,DEFAULT_KUBERNETES_MASTER);
    configuration.environmentInitEnabled=getBooleanProperty(ENVIRONMENT_INIT_ENABLED,map,true);
    configuration.environmentConfigUrl=getKubernetesConfigurationUrl(map);
    configuration.environmentDependencies=Strings.splitAndTrimAsList(getStringProperty(ENVIRONMENT_DEPENDENCIES,map,"")," ");
    configuration.namespaceLazyCreateEnabled=getBooleanProperty(NAMESPACE_LAZY_CREATE_ENABLED,map,DEFAULT_NAMESPACE_LAZY_CREATE_ENABLED);
    configuration.namespaceToUse=getStringProperty(NAMESPACE_TO_USE,map,null);
    configuration.namespaceCleanupEnabled=getBooleanProperty(NAMESPACE_CLEANUP_ENABLED,map,Strings.isNullOrBlank(configuration.namespaceToUse));
    configuration.namespaceCleanupConfirmationEnabled=getBooleanProperty(NAMESPACE_CLEANUP_CONFIRM,map,false);
    configuration.namespaceCleanupTimeout=getLongProperty(NAMESPACE_CLEANUP_TIMEOUT,map,DEFAULT_NAMESPACE_CLEANUP_TIMEOUT);
    configuration.waitTimeout=getLongProperty(WAIT_TIMEOUT,map,DEFAULT_WAIT_TIMEOUT);
    configuration.waitPollInterval=getLongProperty(WAIT_POLL_INTERVAL,map,DEFAULT_WAIT_POLL_INTERVAL);
    configuration.waitForServiceList=Strings.splitAndTrimAsList(getStringProperty(WAIT_FOR_SERVICE_LIST,map,"")," ");
    configuration.waitForServiceConnectionEnabled=getBooleanProperty(WAIT_FOR_SERVICE_CONNECTION_ENABLED,map,DEFAULT_WAIT_FOR_SERVICE_CONNECTION_ENABLED);
    configuration.waitForServiceConnectionTimeout=getLongProperty(WAIT_FOR_SERVICE_CONNECTION_TIMEOUT,map,DEFAULT_NAMESPACE_CLEANUP_TIMEOUT);
    configuration.ansiLoggerEnabled=getBooleanProperty(ANSI_LOGGER_ENABLED,map,true);
    configuration.kubernetesDomain=getStringProperty(KUBERNETES_DOMAIN,map,"vagrant.f8");
    configuration.gofabric8Enabled=getBooleanProperty(GOFABRIC8_ENABLED,map,false);
    configuration.properties=map;
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
  return configuration;
}
