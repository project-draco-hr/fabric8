{
  Version version=fabricService.getVersion(versionId);
  String parentProfileName=null;
  if (configs != null && configs.containsKey("parent")) {
    parentProfileName=configs.remove("parent");
  }
  if (Strings.isNullOrBlank(parentProfileName)) {
    parentProfileName=replicated ? MQ_PROFILE_REPLICATED : MQ_PROFILE_BASE;
  }
  Profile parentProfile=version.getProfile(parentProfileName);
  String pidName=getBrokerPID(brokerName);
  Profile result=parentProfile;
  if (brokerName != null && profile != null) {
    Map config=null;
    if (!version.hasProfile(profile)) {
      result=version.createProfile(profile);
      result.setParents(new Profile[]{parentProfile});
    }
 else {
      result=version.getProfile(profile);
      config=result.getConfiguration(pidName);
    }
    Map<String,String> parentProfileConfig=parentProfile.getConfiguration(MQ_PID_TEMPLATE);
    if (config == null) {
      config=parentProfileConfig;
    }
    if ("true".equals(configs.get("ssl"))) {
      byte[] keystore=fabricService.getDataStore().getFileConfiguration(versionId,profile,"keystore.jks");
      if (keystore == null) {
        try {
          String host=configs.get("keystore.cn");
          if (host == null) {
            host=configs.get(GROUP);
            if (host == null) {
              host="localhost";
            }
            configs.put("keystore.cn",host);
          }
          String password=configs.get("keystore.password");
          if (password == null) {
            password=generatePassword(8);
            configs.put("keystore.password",password);
          }
          File keystoreFile=Files.createTempFile();
          keystoreFile.delete();
          LOG.info("Generating ssl keystore...");
          int rc=system("keytool","-genkey","-storetype","JKS","-storepass",password,"-keystore",keystoreFile.getCanonicalPath(),"-keypass",password,"-alias",host,"-keyalg","RSA","-keysize","4096","-dname",String.format("cn=%s",host),"-validity","3650");
          if (rc != 0) {
            throw new IOException("keytool failed with exit code: " + rc);
          }
          keystore=Files.readBytes(keystoreFile);
          keystoreFile.delete();
          LOG.info("Keystore generated");
          fabricService.getDataStore().setFileConfiguration(versionId,profile,"keystore.jks",keystore);
          configs.put("keystore.file","profile:keystore.jks");
        }
 catch (        IOException e) {
          LOG.info("Failed to generate keystore.jks: " + e,e);
        }
      }
      byte[] truststore=fabricService.getDataStore().getFileConfiguration(versionId,profile,"truststore.jks");
      if (truststore == null) {
        try {
          String password=configs.get("truststore.password");
          if (password == null) {
            password=configs.get("keystore.password");
            configs.put("truststore.password",password);
          }
          File keystoreFile=Files.createTempFile();
          Files.writeToFile(keystoreFile,keystore);
          File certFile=Files.createTempFile();
          certFile.delete();
          LOG.info("Exporting broker certificate to create truststore.jks");
          int rc=system("keytool","-exportcert","-rfc","-keystore",keystoreFile.getCanonicalPath(),"-storepass",configs.get("keystore.password"),"-alias",configs.get("keystore.cn"),"--file",certFile.getCanonicalPath());
          keystoreFile.delete();
          if (rc != 0) {
            throw new IOException("keytool failed with exit code: " + rc);
          }
          LOG.info("Creating truststore.jks");
          File truststoreFile=Files.createTempFile();
          truststoreFile.delete();
          rc=system("keytool","-importcert","-noprompt","-keystore",truststoreFile.getCanonicalPath(),"-storepass",password,"--file",certFile.getCanonicalPath());
          certFile.delete();
          if (rc != 0) {
            throw new IOException("keytool failed with exit code: " + rc);
          }
          truststore=Files.readBytes(truststoreFile);
          truststoreFile.delete();
          fabricService.getDataStore().setFileConfiguration(versionId,profile,"truststore.jks",truststore);
          configs.put("truststore.file","profile:truststore.jks");
        }
 catch (        IOException e) {
          LOG.info("Failed to generate truststore.jks: " + e,e);
        }
      }
    }
    config.put("broker-name",brokerName);
    if (configs != null) {
      config.putAll(configs);
    }
    String[] propertiesToDefault={CONFIG_URL,STANDBY_POOL,CONNECTORS};
    for (    String key : propertiesToDefault) {
      if (config.get(key) == null) {
        String defaultValue=parentProfileConfig.get(key);
        if (Strings.isNotBlank(defaultValue)) {
          config.put(key,defaultValue);
        }
      }
    }
    result.setConfiguration(pidName,config);
  }
  return result;
}
