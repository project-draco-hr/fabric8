{
  FlightConnectionInfo flightConnectionInfo=exchange.getIn().getHeader("flightConnectionInfo",FlightConnectionInfo.class);
  PassengerInfo passengerInfo=exchange.getIn().getHeader("passengerInfo",PassengerInfo.class);
  Structure flightTripCreateResponse=exchange.getIn().getBody(Structure.class);
  if (flightTripCreateResponse == null) {
    throw new Exception("No Flight Trip Create Response");
  }
  @SuppressWarnings("unchecked") Table<Structure> bapiReturn=flightTripCreateResponse.get("RETURN",Table.class);
  Structure bapiReturnEntry=bapiReturn.get(0);
  if (!bapiReturnEntry.get("TYPE",String.class).equals("S")) {
    String message=bapiReturnEntry.get("MESSAGE",String.class);
    throw new Exception("BAPI call failed: " + message);
  }
  BookFlightResponse response=new BookFlightResponse();
  String tripNumber=flightTripCreateResponse.get("TRIPNUMBER",String.class);
  if (tripNumber != null) {
    response.setTripNumber(tripNumber);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Added TRIPNUMBER = '{}' to request",tripNumber);
    }
  }
 else {
    throw new Exception("No Flight Booking Trip Number");
  }
  Structure ticketPrice=flightTripCreateResponse.get("TICKET_PRICE",Structure.class);
  if (ticketPrice != null) {
    BigDecimal tripPrice=ticketPrice.get("TRIPPRICE",BigDecimal.class);
    response.setTicketPrice(tripPrice);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Added TICKET_PRICE = '{}' to request",tripPrice);
    }
    BigDecimal tripTax=ticketPrice.get("TRIPTAX",BigDecimal.class);
    response.setTicketTax(tripTax);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Added TICKET_TAX = '{}' to request",tripTax);
    }
    String currency=ticketPrice.get("CURR",String.class);
    response.setCurrency(currency);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Added CURRENCY = '{}' to request",currency);
    }
  }
 else {
    throw new Exception("No Flight Booking Ticket Price");
  }
  response.setPassengerFormOfAddress(passengerInfo.getFormOfAddress());
  response.setPassengerName(passengerInfo.getName());
  response.setPassengerDateOfBirth(passengerInfo.getDateOfBirth());
  FlightInfo flightInfo=new FlightInfo();
  flightInfo.setFlightTime(flightConnectionInfo.getFlightTime());
  flightInfo.setCityFrom(flightConnectionInfo.getDepartureCity());
  flightInfo.setDepartureDate(flightConnectionInfo.getDepartureDate());
  flightInfo.setDepartureTime(flightConnectionInfo.getDepartureTime());
  flightInfo.setCityTo(flightConnectionInfo.getArrivalCity());
  flightInfo.setArrivalDate(flightConnectionInfo.getArrivalDate());
  flightInfo.setArrivalTime(flightConnectionInfo.getArrivalTime());
  response.setFlightInfo(flightInfo);
  ConnectionInfoTable connectionInfoTable=new ConnectionInfoTable();
  List<ConnectionInfo> rows=new ArrayList<ConnectionInfo>();
  for (  FlightHop flightHop : flightConnectionInfo.getFlightHopList()) {
    ConnectionInfo connection=new ConnectionInfo();
    connection.setConnectionId(flightHop.getHopNumber());
    connection.setAirline(flightHop.getAirlineName());
    connection.setPlaneType(flightHop.getAircraftType());
    connection.setCityFrom(flightHop.getDepatureCity());
    connection.setDepartureDate(flightHop.getDepatureDate());
    connection.setDepartureTime(flightHop.getDepatureTime());
    connection.setCityTo(flightHop.getArrivalCity());
    connection.setArrivalDate(flightHop.getArrivalDate());
    connection.setArrivalTime(flightHop.getArrivalTime());
    rows.add(connection);
  }
  connectionInfoTable.setRows(rows);
  response.setConnectionInfo(connectionInfoTable);
  exchange.getIn().setBody(response);
}
