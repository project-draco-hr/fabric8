{
  String serviceName=null;
  String providerValue=EnvHelper.getComputeProvider(provider);
  String apiValue=EnvHelper.getBlobStoreApi(api);
  String endpointValue=EnvHelper.getComputeEndpoint(endpoint);
  String identityValue=EnvHelper.getComputeIdentity(identity);
  String credentialValue=EnvHelper.getComputeCredential(credential);
  Map<String,String> props=CloudUtils.parseProviderOptions(options);
  if (options != null && options.length > 1) {
    for (    String option : options) {
      if (option.contains("=")) {
        String key=option.substring(0,option.indexOf("="));
        String value=option.substring(option.lastIndexOf("=") + 1);
        props.put(key,value);
      }
    }
  }
  if (!Strings.isNullOrEmpty(owner)) {
    props.put("owner",owner);
  }
  if (Strings.isNullOrEmpty(providerValue) && Strings.isNullOrEmpty(apiValue)) {
    System.out.println("Need to specify at least a provider or an api as an option (--provider or --api) or as an environmental variable.");
    System.out.println("Supported environmental variables for provider and api are JCLOUDS_COMPUTE_PROVIDER JCLOUDS_COMPUTE_API respectively.");
    return null;
  }
 else   if (Strings.isNullOrEmpty(providerValue) && !Strings.isNullOrEmpty(apiValue) && Strings.isNullOrEmpty(endpointValue)) {
    System.out.println("You specified an api but no endpoint is found. To use an api, you need an endpoint as option or as environmental variable");
    return null;
  }
 else   if (!Strings.isNullOrEmpty(providerValue) && (Strings.isNullOrEmpty(apiValue) || Strings.isNullOrEmpty(endpointValue))) {
    serviceName=providerValue;
    CloudUtils.registerProvider(getZooKeeper(),configurationAdmin,providerValue,identityValue,credentialValue,props);
  }
 else   if (Strings.isNullOrEmpty(providerValue) && (!Strings.isNullOrEmpty(apiValue) && !Strings.isNullOrEmpty(endpointValue))) {
    serviceName=apiValue;
    CloudUtils.registerApi(getZooKeeper(),configurationAdmin,apiValue,endpointValue,identityValue,credentialValue,props);
  }
 else   if (Strings.isNullOrEmpty(api)) {
    serviceName=apiValue;
    CloudUtils.registerApi(getZooKeeper(),configurationAdmin,apiValue,endpointValue,identityValue,credentialValue,props);
  }
 else {
    serviceName=providerValue;
    CloudUtils.registerProvider(getZooKeeper(),configurationAdmin,providerValue,identityValue,credentialValue,props);
  }
  if (!registerAsync) {
    System.out.println("Waiting for " + serviceName + " service to initialize.");
    CloudUtils.waitForComputeService(bundleContext,provider);
  }
  return null;
}
