{
  String zkUser=null;
  String zkPassword=null;
  if (fabricService != null) {
    zkUser=fabricService.getZooKeeperUser();
    zkPassword=fabricService.getZookeeperPassword();
  }
  Set<Map.Entry<String,String>> envEntries=environmentVariables.entrySet();
  for (  String key : map.keySet()) {
    String text=map.get(key);
    String oldText=text;
    if (Strings.isNotBlank(text)) {
      for (      Map.Entry<String,String> envEntry : envEntries) {
        String envKey=envEntry.getKey();
        String envValue=envEntry.getValue();
        if (Strings.isNotBlank(envKey) && Strings.isNotBlank(envValue)) {
          text=text.replace("${env:" + envKey + "}",envValue);
        }
      }
      if (Strings.isNotBlank(zkUser)) {
        text=text.replace("${zookeeper.user}",zkUser);
      }
      if (Strings.isNotBlank(zkPassword)) {
        text=text.replace("${zookeeper.password}",zkPassword);
      }
      if (curator != null) {
        InterpolationHelper.SubstitutionCallback substitutionCallback=new InterpolationHelper.SubstitutionCallback(){
          @Override public String getValue(          String key){
            if (key.startsWith("zk:")) {
              try {
                return new String(ZkPath.loadURL(curator,key),"UTF-8");
              }
 catch (              Exception e) {
              }
            }
 else             if (key.startsWith("groovy:")) {
              try {
                return GroovyPlaceholderResolver.resolveValue(curator,key);
              }
 catch (              Exception e) {
              }
            }
            return null;
          }
        }
;
        if (preserveUnresolved) {
          text=InterpolationHelper.substVarsPreserveUnresolved(text,"dummy",null,Collections.EMPTY_MAP,substitutionCallback);
        }
 else {
          text=InterpolationHelper.substVars(text,"dummy",null,Collections.EMPTY_MAP,substitutionCallback);
        }
      }
      if (!Objects.equal(oldText,text)) {
        map.put(key,text);
      }
    }
  }
}
