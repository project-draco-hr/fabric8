{
  String answer=text;
  if (environmentVariables != null && Strings.isNotBlank(answer)) {
    String envExprPrefix="${env:";
    int startIdx=0;
    while (true) {
      int idx=answer.indexOf(envExprPrefix,startIdx);
      if (idx < 0) {
        break;
      }
      startIdx=idx + envExprPrefix.length();
      int endIdx=answer.indexOf("}",startIdx);
      if (endIdx < 0) {
        break;
      }
      String expression=answer.substring(startIdx,endIdx);
      String value=EnvPlaceholderResolver.resolveExpression(expression,environmentVariables,preserveUnresolved);
      if (!Objects.equal(expression,value)) {
        answer=answer.substring(0,idx) + value + answer.substring(endIdx + 1);
      }
    }
  }
  if (Strings.isNullOrBlank(answer)) {
    return answer;
  }
  String zkUser=null;
  String zkPassword=null;
  if (fabricService != null) {
    zkUser=fabricService.getZooKeeperUser();
    zkPassword=fabricService.getZookeeperPassword();
  }
  if (Strings.isNotBlank(zkUser)) {
    answer=answer.replace("${zookeeper.user}",zkUser);
  }
  if (Strings.isNotBlank(zkPassword)) {
    answer=answer.replace("${zookeeper.password}",zkPassword);
  }
  if (curator != null) {
    InterpolationHelper.SubstitutionCallback substitutionCallback=new InterpolationHelper.SubstitutionCallback(){
      @Override public String getValue(      String key){
        if (key.startsWith("zk:")) {
          try {
            return new String(ZkPath.loadURL(curator,key),"UTF-8");
          }
 catch (          Exception e) {
          }
        }
 else         if (key.startsWith("groovy:")) {
          try {
            return GroovyPlaceholderResolver.resolveValue(curator,key);
          }
 catch (          Exception e) {
          }
        }
        return null;
      }
    }
;
    if (preserveUnresolved) {
      answer=InterpolationHelper.substVarsPreserveUnresolved(answer,"dummy",null,Collections.EMPTY_MAP,substitutionCallback);
    }
 else {
      answer=InterpolationHelper.substVars(answer,"dummy",null,Collections.EMPTY_MAP,substitutionCallback);
    }
  }
  return answer;
}
