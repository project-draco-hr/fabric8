{
  List<String> newZkContainerPaths=new ArrayList<>();
  String jolokiaUrl=container.getJolokiaUrl();
  if (Strings.isNullOrBlank(jolokiaUrl)) {
    return newZkContainerPaths;
  }
  String containerName=container.getId();
  boolean debugLog=LOG.isDebugEnabled();
  if (debugLog) {
    LOG.debug("Performing keep alive jolokia check on " + containerName + " URL: "+ jolokiaUrl);
  }
  String user=fabric.getZooKeeperUser();
  String password=fabric.getZookeeperPassword();
  String url=jolokiaUrl;
  int idx=jolokiaUrl.indexOf("://");
  if (idx > 0) {
    url="http://" + user + ":"+ password+ "@"+ jolokiaUrl.substring(idx + 3);
  }
  if (!url.endsWith("/")) {
    url+="/";
  }
  String listUrl=url + "list/?maxDepth=1";
  List<String> jmxDomains=new ArrayList<String>();
  boolean valid=false;
  try {
    URL theUrl=new URL(listUrl);
    JsonNode jsonNode=jolokiaMapper.readTree(theUrl);
    if (jsonNode != null) {
      JsonNode value=jsonNode.get("value");
      if (value != null) {
        Iterator<String> iter=value.fieldNames();
        while (iter.hasNext()) {
          jmxDomains.add(iter.next());
        }
        if (debugLog) {
          LOG.debug("Container " + containerName + " has JMX Domains: "+ jmxDomains);
        }
        valid=jmxDomains.size() > 0;
      }
    }
  }
 catch (  IOException e) {
    LOG.warn("Failed to query: " + listUrl + ". "+ e,e);
  }
  String provisionResult=container.getProvisionResult();
  if (debugLog) {
    LOG.debug("Current provision result: " + provisionResult + " valid: "+ valid);
  }
  valid=valid && performExtraJolokiaChecks(zkMasterCache,fabric,container,jmxDomains,url,envVars,newZkContainerPaths);
  if (valid) {
    if (!Objects.equal(Container.PROVISION_SUCCESS,provisionResult) || !container.isAlive()) {
      container.setProvisionResult(Container.PROVISION_SUCCESS);
      container.setProvisionException(null);
      container.setAlive(true);
      JavaContainers.registerJolokiaUrl(container,jolokiaUrl);
    }
    if (!Objects.equal(jmxDomains,container.getJmxDomains())) {
      container.setJmxDomains(jmxDomains);
    }
  }
 else {
    if (container.isAlive()) {
      container.setAlive(true);
    }
    if (!Objects.equal(Container.PROVISION_FAILED,provisionResult)) {
      container.setProvisionResult(Container.PROVISION_FAILED);
    }
  }
  return newZkContainerPaths;
}
