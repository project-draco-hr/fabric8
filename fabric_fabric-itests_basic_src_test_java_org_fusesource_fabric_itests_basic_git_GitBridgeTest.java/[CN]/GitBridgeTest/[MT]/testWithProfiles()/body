{
  String testProfileNameBase="mytestprofile-";
  System.err.println(executeCommand("fabric:create -n"));
  Set<Container> containers=ContainerBuilder.create(1,1).withName("child").assertProvisioningResult().build();
  String gitRepoUrl=GitUtils.getMasterUrl(getCurator());
  GitUtils.waitForBranchUpdate(getCurator(),"1.0");
  Git.cloneRepository().setURI(gitRepoUrl).setCloneAllBranches(true).setDirectory(testrepo).setCredentialsProvider(getCredentialsProvider()).call();
  Git git=Git.open(testrepo);
  GitUtils.configureBranch(git,"origin",gitRepoUrl,"1.0");
  git.fetch().setCredentialsProvider(getCredentialsProvider());
  GitUtils.checkoutBranch(git,"origin","1.0");
  assertTrue(new File(testrepo,"default").exists());
  for (int i=1; i <= 3; i++) {
    String testProfileName=testProfileNameBase + i;
    System.err.println("Create test profile:" + testProfileName + " in zookeeper");
    getFabricService().getVersion("1.0").createProfile(testProfileName);
    GitUtils.waitForBranchUpdate(getCurator(),"1.0");
    git.pull().setRebase(true).setCredentialsProvider(getCredentialsProvider()).call();
    assertTrue(new File(testrepo,testProfileName).exists());
    System.err.println("Delete test profile:" + testProfileName + " in git.");
    git.rm().addFilepattern(testProfileName).call();
    git.commit().setMessage("Delete " + testProfileName).call();
    git.push().setCredentialsProvider(getCredentialsProvider()).setRemote("origin").call();
    GitUtils.waitForBranchUpdate(getCurator(),"1.0");
    Thread.sleep(5000);
    assertFalse(new File(testrepo,testProfileName).exists());
    assertNull(getCurator().checkExists().forPath(ZkPath.CONFIG_VERSIONS_PROFILE.getPath("1.0",testProfileName)));
    System.err.println("Create test profile:" + testProfileName + " in git.");
    File testProfileDir=new File(testrepo,testProfileName);
    testProfileDir.mkdirs();
    File testProfileConfig=new File(testProfileDir,"org.fusesource.fabric.agent.properties");
    testProfileConfig.createNewFile();
    Files.writeToFile(testProfileConfig,"",Charset.defaultCharset());
    git.add().addFilepattern(testProfileName).call();
    RevCommit commit=git.commit().setMessage("Create " + testProfileName).call();
    FileTreeIterator fileTreeItr=new FileTreeIterator(git.getRepository());
    IndexDiff indexDiff=new IndexDiff(git.getRepository(),commit.getId(),fileTreeItr);
    System.out.println(indexDiff.getChanged());
    System.out.println(indexDiff.getAdded());
    git.push().setCredentialsProvider(getCredentialsProvider()).setRemote("origin").call();
    GitUtils.waitForBranchUpdate(getCurator(),"1.0");
    Thread.sleep(15000);
    assertNotNull(getCurator().checkExists().forPath(ZkPath.CONFIG_VERSIONS_PROFILE.getPath("1.0",testProfileName)));
  }
}
