{
  LOG.info("Creating the fabric8.yml file");
  String fileName=ProjectConfigs.FILE_NAME;
  Project project=getSelectedProject(context);
  File configFile=getProjectConfigFile(project);
  if (configFile == null) {
    return Results.fail("This command requires a project");
  }
  ProjectConfig config=null;
  boolean hasFile=false;
  if (configFile.exists()) {
    config=ProjectConfigs.parseProjectConfig(configFile);
    hasFile=true;
  }
  if (config == null) {
    config=new ProjectConfig();
  }
  CommandHelpers.putComponentValuesInAttributeMap(context,inputComponents);
  updateConfiguration(context,config);
  System.out.println("Result: " + config);
  String message;
  if (config.isEmpty() && !hasFile) {
    message="No " + fileName + " need be generated as there is no configuration";
    return Results.success(message);
  }
 else {
    String operation="Updated";
    if (!configFile.exists()) {
      operation="Created";
    }
    ProjectConfigs.saveConfig(config,configFile);
    message=operation + " " + fileName;
  }
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  String gitUrl=null;
  Object object=attributeMap.get(Project.class);
  String user=getStringAttribute(attributeMap,"gitUser");
  String named=null;
  if (object instanceof Project) {
    Project newProject=(Project)object;
    MetadataFacet facet=newProject.getFacet(MetadataFacet.class);
    if (facet != null) {
      named=facet.getProjectName();
      String email=getStringAttribute(attributeMap,"gitAuthorEmail");
      String address=getStringAttribute(attributeMap,"gitAddress");
      String htmlUrl=address + user + "/"+ named;
      String fullName=user + "/" + named;
      gitUrl=address + user + "/"+ named+ ".git";
    }
 else {
      LOG.error("No MetadataFacet for newly created project " + newProject);
    }
  }
 else {
    File basedir=CommandHelpers.getBaseDir(project);
    gitUrl=GitHelpers.extractGitUrl(basedir);
    if (basedir != null) {
      named=basedir.getName();
    }
  }
  final DevOpsConnector connector=new DevOpsConnector();
  connector.setProjectConfig(config);
  connector.setTryLoadConfigFileFromRemoteGit(false);
  connector.setUsername(user);
  connector.setPassword(getStringAttribute(attributeMap,"gitPassword"));
  connector.setBranch(getStringAttribute(attributeMap,"gitBranch","master"));
  connector.setBasedir(CommandHelpers.getBaseDir(project));
  connector.setGitUrl(gitUrl);
  connector.setRepoName(named);
  connector.setRegisterWebHooks(false);
  LOG.info("Using connector: " + connector);
  attributeMap.put("registerWebHooks",new Runnable(){
    @Override public void run(){
      LOG.info("Now registering webhooks!");
      connector.registerWebHooks();
    }
  }
);
  try {
    connector.execute();
  }
 catch (  Exception e) {
    LOG.error("Failed to update DevOps resources: " + e,e);
  }
  return Results.success(message);
}
