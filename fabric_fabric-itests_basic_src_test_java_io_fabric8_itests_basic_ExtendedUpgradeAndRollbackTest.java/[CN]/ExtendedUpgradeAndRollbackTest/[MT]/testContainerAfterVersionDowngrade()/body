{
  System.out.println(executeCommand("fabric:create -n"));
  System.out.println(executeCommand("shell:info"));
  System.out.println(executeCommand("fabric:info"));
  System.out.println(executeCommand("fabric:profile-list"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    waitForFabricCommands();
    System.out.println(executeCommand("fabric:version-create --parent 1.0 1.1"));
    System.out.println(executeCommand("fabric:container-upgrade --all 1.1"));
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy).withName("camel").withProfiles("feature-camel").assertProvisioningResult().build();
    try {
      System.out.println(executeCommand("fabric:container-rollback --all 1.0"));
      Provision.provisioningSuccess(containers,PROVISION_TIMEOUT);
      for (      Container container : containers) {
        Assert.assertEquals("Container should have version 1.0","1.0",container.getVersion().getId());
        Assert.assertNotNull(ZooKeeperUtils.exists(ServiceLocator.awaitService(bundleContext,CuratorFramework.class),"/fabric/configs/versions/1.0/containers/" + container.getId()));
      }
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
