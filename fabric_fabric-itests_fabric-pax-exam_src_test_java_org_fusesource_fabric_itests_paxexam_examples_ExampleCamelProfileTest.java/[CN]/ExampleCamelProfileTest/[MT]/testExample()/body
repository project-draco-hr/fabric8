{
  System.err.println(executeCommand("fabric:create -n"));
  CuratorFramework curator=getCurator();
  Set<Container> containers=ContainerBuilder.create(2).withName("cnt").withProfiles("default").assertProvisioningResult().build();
  Container brokerContainer=containers.iterator().next();
  containers.remove(brokerContainer);
  setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(brokerContainer.getId()),"changing");
  System.err.println(executeCommand("fabric:container-change-profile " + brokerContainer.getId() + " mq"));
  Provision.provisioningSuccess(Arrays.asList(new Container[]{brokerContainer}),PROVISION_TIMEOUT);
  System.err.println(executeCommand("fabric:cluster-list"));
  for (  Container c : containers) {
    setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(c.getId()),"changing");
    System.err.println(executeCommand("fabric:container-change-profile " + c.getId() + " example-camel"));
  }
  Provision.provisioningSuccess(containers,PROVISION_TIMEOUT);
  int completedCount=0;
  Thread.sleep(5000);
  for (  Container c : containers) {
    System.err.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " osgi:list"));
    System.err.println(executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-list"));
    String completed=executeCommand("fabric:container-connect -u admin -p admin " + c.getId() + " camel:route-info route2 | grep \"Exchanges Completed\"");
    System.err.println(completed);
    if (completed.contains("Exchanges Completed") && !completed.contains("Exchanges Completed: 0")) {
      completedCount++;
    }
  }
  Assert.assertTrue("Expected at least 1 completed exchange. Found: " + completedCount,completedCount > 0);
}
