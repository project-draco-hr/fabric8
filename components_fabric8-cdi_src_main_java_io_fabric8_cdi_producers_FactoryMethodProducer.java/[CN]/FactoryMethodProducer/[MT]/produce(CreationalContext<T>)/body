{
  List<Object> arguments=new ArrayList<>();
  for (  AnnotatedParameter<X> parameter : factoryMethod.getParameters()) {
    try {
      Type type=parameter.getBaseType();
      ServiceName serviceName=parameter.getAnnotation(ServiceName.class);
      Protocol protocol=parameter.getAnnotation(Protocol.class);
      Configuration configuration=parameter.getAnnotation(Configuration.class);
      String actualProtocol=(protocol != null && Strings.isNotBlank(protocol.value())) ? protocol.value() : serviceProtocol;
      if (serviceName != null && String.class.equals(type)) {
        String serviceUrl=getServiceUrl(serviceId,actualProtocol,servicePort,ctx);
        arguments.add(serviceUrl);
      }
 else       if (serviceName != null && !String.class.equals(type)) {
        Object serviceBean=getServiceBean(serviceId,actualProtocol,servicePort,(Class<Object>)type,ctx);
        arguments.add(serviceBean);
      }
 else       if (configuration != null) {
        Object config=getConfiguration(serviceId,(Class<Object>)type,ctx);
        arguments.add(config);
      }
 else {
        Object other=BeanProvider.getContextualReferences((Class)type,true);
        arguments.add(other);
      }
    }
 catch (    Throwable t) {
      throw new RuntimeException(String.format(PARAMETER_ERROR_FORMAT,factoryMethod.getJavaMember().getName(),factoryMethod.getJavaMember().getDeclaringClass().getName(),parameter.getPosition()));
    }
  }
  try {
    return (T)factoryMethod.getJavaMember().invoke(bean.create(ctx),arguments.toArray());
  }
 catch (  Throwable t) {
    throw new RuntimeException(String.format(INVOCATION_ERROR_FORMAT,factoryMethod.getJavaMember().getName(),factoryMethod.getJavaMember().getDeclaringClass().getName(),arguments));
  }
}
