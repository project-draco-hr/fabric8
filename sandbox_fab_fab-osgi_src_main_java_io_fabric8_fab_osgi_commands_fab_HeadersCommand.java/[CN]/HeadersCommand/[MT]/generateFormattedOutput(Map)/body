{
  StringBuilder output=new StringBuilder();
  Map<String,Object> otherAttribs=new HashMap<String,Object>();
  Map<String,Object> bundleAttribs=new HashMap<String,Object>();
  Map<String,Object> serviceAttribs=new HashMap<String,Object>();
  Map<String,Object> packagesAttribs=new HashMap<String,Object>();
  Set<Object> keys=attributes.keySet();
  for (  Object key : keys) {
    String k=key.toString();
    Object v=attributes.get(key);
    if (k.startsWith(BUNDLE_PREFIX)) {
      bundleAttribs.put(k,v);
    }
 else     if (k.endsWith(SERVICE_SUFFIX)) {
      serviceAttribs.put(k,v);
    }
 else     if (k.endsWith(PACKAGE_SUFFFIX)) {
      packagesAttribs.put(k,v);
    }
 else     if (k.endsWith(REQUIRE_BUNDLE_ATTRIB)) {
      packagesAttribs.put(k,v);
    }
 else {
      otherAttribs.put(k,v);
    }
  }
  Iterator<Map.Entry<String,Object>> it=otherAttribs.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> e=it.next();
    output.append(String.format("%s = %s\n",e.getKey(),Strings.toString(e.getValue())));
  }
  if (otherAttribs.size() > 0) {
    output.append('\n');
  }
  it=bundleAttribs.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> e=it.next();
    output.append(String.format("%s = %s\n",e.getKey(),Strings.toString(e.getValue())));
  }
  if (bundleAttribs.size() > 0) {
    output.append('\n');
  }
  it=serviceAttribs.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> e=it.next();
    output.append(e.getKey());
    output.append(" = \n");
    formatHeader(Strings.toString(e.getValue()),null,output,indent);
    output.append("\n");
  }
  if (serviceAttribs.size() > 0) {
    output.append('\n');
  }
  Map<String,ClauseFormatter> formatters=new HashMap<String,ClauseFormatter>();
  formatters.put(ServiceConstants.INSTR_REQUIRE_BUNDLE,new ClauseFormatter(){
    public void pre(    Clause clause,    StringBuilder output){
      boolean isSatisfied=checkBundle(clause.getName(),clause.getAttribute("version"));
      Ansi.ansi(output).fg(isSatisfied ? Ansi.Color.DEFAULT : Ansi.Color.RED).a("");
    }
    public void post(    Clause clause,    StringBuilder output){
      Ansi.ansi(output).reset().a("");
    }
  }
);
  formatters.put(ServiceConstants.INSTR_IMPORT_PACKAGE,new ClauseFormatter(){
    public void pre(    Clause clause,    StringBuilder output){
      boolean isSatisfied=checkPackage(clause.getName(),clause.getAttribute("version"));
      boolean isOptional="optional".equals(clause.getDirective("resolution"));
      Ansi.ansi(output).fg(isSatisfied ? Ansi.Color.DEFAULT : Ansi.Color.RED).a(isSatisfied || isOptional ? Ansi.Attribute.INTENSITY_BOLD_OFF : Ansi.Attribute.INTENSITY_BOLD).a("");
    }
    public void post(    Clause clause,    StringBuilder output){
      Ansi.ansi(output).reset().a("");
    }
  }
);
  it=packagesAttribs.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> e=it.next();
    output.append(e.getKey());
    output.append(" = \n");
    formatHeader(Strings.toString(e.getValue()),formatters.get(e.getKey()),output,indent);
    output.append("\n");
  }
  if (packagesAttribs.size() > 0) {
    output.append('\n');
  }
  return output.toString();
}
