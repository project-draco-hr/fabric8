{
  int count=request.getDelta();
  String profile=request.getProfile();
  String version=request.getVersion();
  FabricService fabricService=request.getFabricService();
  if (fabricService != null) {
    Container[] containers=fabricService.getContainers();
    FabricRequirements requirements=request.getFabricRequirements();
    List<? extends HostConfiguration> hostConfigurations=requirements.getDockerHosts();
    HostProfileCounter hostProfileCounter=new HostProfileCounter();
    AutoScalers.createHostToProfileScaleMap(hostProfileCounter,hostConfigurations,containers);
    for (int i=0; i < count; i++) {
      CreateDockerContainerOptions.Builder builder=createAutoScaleOptions(request,fabricService,hostProfileCounter);
      NameValidator nameValidator=Containers.createNameValidator(fabricService.getContainers());
      String name=Containers.createContainerName(containers,profile,containerProvider.getScheme(),nameValidator);
      CreateDockerContainerOptions options=builder.name(name).build();
      LOG.info("Creating container name " + name + " version "+ version+ " profile "+ profile+ " "+ count+ " container(s)");
      fabricService.createContainers(options);
    }
  }
 else {
    LOG.warn("Could not create version " + version + " profile "+ profile+ " due to missing FabricService");
  }
}
