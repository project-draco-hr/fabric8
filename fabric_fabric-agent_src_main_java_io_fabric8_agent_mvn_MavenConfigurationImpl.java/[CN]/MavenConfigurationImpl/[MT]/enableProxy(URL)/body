{
  final String proxySupport=m_propertyResolver.get(m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT);
  if ("false".equalsIgnoreCase(proxySupport)) {
    return;
  }
  final String protocol=url.getProtocol();
  if (protocol == null || protocol.equals(get(m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT))) {
    return;
  }
  Map<String,String> proxyDetails=m_settings.getProxySettings().get(protocol);
  if (proxyDetails != null) {
    LOGGER.trace("Enabling proxy [" + proxyDetails + "]");
    final String user=proxyDetails.get("user");
    final String pass=proxyDetails.get("pass");
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(user,pass.toCharArray());
      }
    }
);
    System.setProperty(protocol + ".proxyHost",proxyDetails.get("host"));
    System.setProperty(protocol + ".proxyPort",proxyDetails.get("port"));
    System.setProperty(protocol + ".nonProxyHosts",proxyDetails.get("nonProxyHosts"));
    set(m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT,protocol);
  }
}
