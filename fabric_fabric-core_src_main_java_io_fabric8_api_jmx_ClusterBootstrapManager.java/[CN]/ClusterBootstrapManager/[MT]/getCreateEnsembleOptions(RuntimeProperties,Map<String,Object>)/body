{
  String username=(String)options.remove("username");
  String password=(String)options.remove("password");
  String role=(String)options.remove("role");
  if (username == null || password == null || role == null) {
    throw new FabricException("Must specify an administrator username, password and administrative role when creating a fabric");
  }
  Object profileObject=options.remove("profiles");
  ObjectMapper mapper=new ObjectMapper();
  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
  mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,true);
  CreateEnsembleOptions.Builder builder=mapper.convertValue(options,CreateEnsembleOptions.Builder.class);
  if (profileObject != null) {
    List profiles=mapper.convertValue(profileObject,List.class);
    builder.profiles(profiles);
  }
  org.apache.felix.utils.properties.Properties userProps=null;
  try {
    userProps=new org.apache.felix.utils.properties.Properties(new File(sysprops.getProperty("karaf.home") + "/etc/users.properties"));
  }
 catch (  IOException e) {
    userProps=new org.apache.felix.utils.properties.Properties();
  }
  if (userProps.get(username) == null) {
    userProps.put(username,password + "," + role);
  }
  CreateEnsembleOptions answer=builder.users(userProps).withUser(username,password,role).build();
  LOG.debug("Creating ensemble with options: {}",answer);
  sysprops.setProperty(ZkDefs.GLOBAL_RESOLVER_PROPERTY,answer.getGlobalResolver());
  sysprops.setProperty(ZkDefs.LOCAL_RESOLVER_PROPERTY,answer.getResolver());
  sysprops.setProperty(ZkDefs.MANUAL_IP,answer.getManualIp());
  sysprops.setProperty(ZkDefs.BIND_ADDRESS,answer.getBindAddress());
  sysprops.setProperty(ZkDefs.MINIMUM_PORT,"" + answer.getMinimumPort());
  sysprops.setProperty(ZkDefs.MAXIMUM_PORT,"" + answer.getMaximumPort());
  return answer;
}
