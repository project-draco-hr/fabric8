{
  System.err.println(executeCommand("fabric:create -n"));
  executeCommand("mq-create --no-ssl --group us-east --networks us-west --jmx-user admin --jmx-password admin --networks-username admin --networks-password admin --minimumInstances 1 us-east");
  executeCommand("mq-create --no-ssl --group us-west --networks us-east --jmx-user admin --jmx-password admin --networks-username admin --networks-password admin --minimumInstances 1 us-west");
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy,4).withName("child").withProfiles("default").assertProvisioningResult().build();
    try {
      LinkedList<Container> containerList=new LinkedList<Container>(containers);
      Container eastBroker=containerList.removeLast();
      Container westBroker=containerList.removeLast();
      Profile eastBrokerProfile=eastBroker.getVersion().getProfile("mq-broker-us-east.us-east");
      eastBroker.setProfiles(new Profile[]{eastBrokerProfile});
      Profile westBrokerProfile=eastBroker.getVersion().getProfile("mq-broker-us-west.us-west");
      westBroker.setProfiles(new Profile[]{westBrokerProfile});
      Provision.provisioningSuccess(Arrays.asList(westBroker,eastBroker),PROVISION_TIMEOUT);
      waitForBroker("us-east");
      waitForBroker("us-west");
      final BrokerViewMBean brokerEast=(BrokerViewMBean)Provision.getMBean(eastBroker,new ObjectName("org.apache.activemq:type=Broker,brokerName=us-east"),BrokerViewMBean.class,120000);
      final BrokerViewMBean brokerWest=(BrokerViewMBean)Provision.getMBean(westBroker,new ObjectName("org.apache.activemq:type=Broker,brokerName=us-west"),BrokerViewMBean.class,120000);
      Container eastProducer=containerList.removeLast();
      executeCommand("container-add-profile " + eastProducer.getId() + " example-mq-producer mq-client-us-east");
      Container westConsumer=containerList.removeLast();
      executeCommand("container-add-profile " + westConsumer.getId() + " example-mq-consumer mq-client-us-west");
      Provision.provisioningSuccess(Arrays.asList(eastProducer,westConsumer),PROVISION_TIMEOUT);
      System.out.println(executeCommand("fabric:container-list"));
      Provision.waitForCondition(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          while (brokerEast.getTotalEnqueueCount() == 0 || brokerWest.getTotalDequeueCount() == 0) {
            Thread.sleep(1000);
          }
          return true;
        }
      }
,120000L);
      System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + eastBroker.getId() + " bstat"));
      System.out.println(executeCommand("fabric:container-connect -u admin -p admin " + westBroker.getId() + " bstat"));
      Assert.assertFalse("Messages not sent",brokerEast.getTotalEnqueueCount() == 0);
      Assert.assertFalse("Messages not received",brokerWest.getTotalDequeueCount() == 0);
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
