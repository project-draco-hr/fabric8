{
  Map<String,Object> properties=endpoint.getProperties();
  StringWriter writer=new StringWriter();
  XMLStreamWriter xml=XMLOutputFactory.newInstance().createXMLStreamWriter(writer);
  xml.writeStartDocument();
  xml.setDefaultNamespace(REMOTE_SERVICES_ADMIN_NS);
  xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,ENDPOINT_DESCRIPTIONS);
  xml.writeNamespace("",REMOTE_SERVICES_ADMIN_NS);
  xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,ENDPOINT_DESCRIPTION);
  for (  Map.Entry<String,Object> entry : properties.entrySet()) {
    String key=entry.getKey();
    Object val=entry.getValue();
    xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,PROPERTY);
    xml.writeAttribute(NAME,key);
    if (val.getClass().isArray()) {
      setValueType(xml,val.getClass().getComponentType().getName());
      xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,ARRAY);
      for (int i=0, l=Array.getLength(val); i < l; i++) {
        xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,VALUE);
        xml.writeCharacters(Array.get(val,i).toString());
        xml.writeEndElement();
      }
      xml.writeEndElement();
    }
 else     if (val instanceof List) {
      xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,LIST);
      handleCollectionValue(xml,(Collection)val);
      xml.writeEndElement();
    }
 else     if (val instanceof Set) {
      xml.writeStartElement(REMOTE_SERVICES_ADMIN_NS,SET);
      handleCollectionValue(xml,(Collection)val);
      xml.writeEndElement();
    }
 else {
      xml.writeAttribute(VALUE,val.toString());
      setValueType(xml,val.getClass().getName());
    }
    xml.writeEndElement();
  }
  xml.writeEndElement();
  xml.writeEndElement();
  xml.writeEndDocument();
  xml.close();
  return writer.toString();
}
