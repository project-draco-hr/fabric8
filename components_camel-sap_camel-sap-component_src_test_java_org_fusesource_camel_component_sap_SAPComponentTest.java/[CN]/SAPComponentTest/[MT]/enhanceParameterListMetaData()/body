{
  when(mockChangingParameterListMetaData.getName(0)).thenReturn(PARAM_LIST_CHAR_PARAM);
  when(mockChangingParameterListMetaData.getType(0)).thenReturn(JCoMetaData.TYPE_CHAR);
  when(mockChangingParameterListMetaData.getClassNameOfField(0)).thenReturn(String.class.getName());
  when(mockChangingParameterListMetaData.isOptional(0)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(0)).thenReturn("CHAR");
  when(mockChangingParameterListMetaData.getRecordTypeName(0)).thenReturn("ZCHAR");
  when(mockChangingParameterListMetaData.getLength(0)).thenReturn(10);
  when(mockChangingParameterListMetaData.getByteLength(0)).thenReturn(10);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(0)).thenReturn(20);
  when(mockChangingParameterListMetaData.getDecimals(0)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(0)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(0)).thenReturn(PARAM_LIST_CHAR_PARAM);
  when(mockChangingParameterListMetaData.getName(1)).thenReturn(PARAM_LIST_NUM_PARAM);
  when(mockChangingParameterListMetaData.getType(1)).thenReturn(JCoMetaData.TYPE_NUM);
  when(mockChangingParameterListMetaData.getClassNameOfField(1)).thenReturn(String.class.getName());
  when(mockChangingParameterListMetaData.isOptional(1)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(1)).thenReturn("NUM");
  when(mockChangingParameterListMetaData.getRecordTypeName(1)).thenReturn("ZNUM");
  when(mockChangingParameterListMetaData.getLength(1)).thenReturn(10);
  when(mockChangingParameterListMetaData.getByteLength(1)).thenReturn(10);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(1)).thenReturn(20);
  when(mockChangingParameterListMetaData.getDecimals(1)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(1)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(1)).thenReturn(PARAM_LIST_NUM_PARAM);
  when(mockChangingParameterListMetaData.getName(2)).thenReturn(PARAM_LIST_INT_PARAM);
  when(mockChangingParameterListMetaData.getType(2)).thenReturn(JCoMetaData.TYPE_INT);
  when(mockChangingParameterListMetaData.getClassNameOfField(2)).thenReturn(Integer.class.getName());
  when(mockChangingParameterListMetaData.isOptional(2)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(2)).thenReturn("INT");
  when(mockChangingParameterListMetaData.getRecordTypeName(2)).thenReturn("ZINT");
  when(mockChangingParameterListMetaData.getLength(2)).thenReturn(4);
  when(mockChangingParameterListMetaData.getByteLength(2)).thenReturn(4);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(2)).thenReturn(4);
  when(mockChangingParameterListMetaData.getDecimals(2)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(2)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(2)).thenReturn(PARAM_LIST_INT_PARAM);
  when(mockChangingParameterListMetaData.getName(3)).thenReturn(PARAM_LIST_FLOAT_PARAM);
  when(mockChangingParameterListMetaData.getType(3)).thenReturn(JCoMetaData.TYPE_FLOAT);
  when(mockChangingParameterListMetaData.getClassNameOfField(3)).thenReturn(Double.class.getName());
  when(mockChangingParameterListMetaData.isOptional(3)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(3)).thenReturn("FLOAT");
  when(mockChangingParameterListMetaData.getRecordTypeName(3)).thenReturn("F");
  when(mockChangingParameterListMetaData.getLength(3)).thenReturn(8);
  when(mockChangingParameterListMetaData.getByteLength(3)).thenReturn(8);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(3)).thenReturn(8);
  when(mockChangingParameterListMetaData.getDecimals(3)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(3)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(3)).thenReturn(PARAM_LIST_FLOAT_PARAM);
  when(mockChangingParameterListMetaData.getName(4)).thenReturn(PARAM_LIST_BCD_PARAM);
  when(mockChangingParameterListMetaData.getType(4)).thenReturn(JCoMetaData.TYPE_BCD);
  when(mockChangingParameterListMetaData.getClassNameOfField(4)).thenReturn(BigDecimal.class.getName());
  when(mockChangingParameterListMetaData.isOptional(4)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(4)).thenReturn("BCD");
  when(mockChangingParameterListMetaData.getRecordTypeName(4)).thenReturn("ZBCD");
  when(mockChangingParameterListMetaData.getLength(4)).thenReturn(9);
  when(mockChangingParameterListMetaData.getByteLength(4)).thenReturn(9);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(4)).thenReturn(9);
  when(mockChangingParameterListMetaData.getDecimals(4)).thenReturn(14);
  when(mockChangingParameterListMetaData.isChanging(4)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(4)).thenReturn(PARAM_LIST_BCD_PARAM);
  when(mockChangingParameterListMetaData.getName(5)).thenReturn(PARAM_LIST_BINARY_PARAM);
  when(mockChangingParameterListMetaData.getType(5)).thenReturn(JCoMetaData.TYPE_BYTE);
  when(mockChangingParameterListMetaData.getClassNameOfField(5)).thenReturn(byte[].class.getName());
  when(mockChangingParameterListMetaData.isOptional(5)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(5)).thenReturn("BYTE");
  when(mockChangingParameterListMetaData.getRecordTypeName(5)).thenReturn("ZBYTE");
  when(mockChangingParameterListMetaData.getLength(5)).thenReturn(1);
  when(mockChangingParameterListMetaData.getByteLength(5)).thenReturn(1);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(5)).thenReturn(1);
  when(mockChangingParameterListMetaData.getDecimals(5)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(5)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(5)).thenReturn(PARAM_LIST_BINARY_PARAM);
  when(mockChangingParameterListMetaData.getName(6)).thenReturn(PARAM_LIST_BINARY_ARRAY_PARAM);
  when(mockChangingParameterListMetaData.getType(6)).thenReturn(JCoMetaData.TYPE_BYTE);
  when(mockChangingParameterListMetaData.getClassNameOfField(6)).thenReturn(byte[].class.getName());
  when(mockChangingParameterListMetaData.isOptional(6)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(6)).thenReturn("BYTE");
  when(mockChangingParameterListMetaData.getRecordTypeName(6)).thenReturn("ZBYTE");
  when(mockChangingParameterListMetaData.getLength(6)).thenReturn(10);
  when(mockChangingParameterListMetaData.getByteLength(6)).thenReturn(10);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(6)).thenReturn(10);
  when(mockChangingParameterListMetaData.getDecimals(6)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(6)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(6)).thenReturn(PARAM_LIST_BINARY_ARRAY_PARAM);
  when(mockChangingParameterListMetaData.getName(7)).thenReturn(PARAM_LIST_DATE_PARAM);
  when(mockChangingParameterListMetaData.getType(7)).thenReturn(JCoMetaData.TYPE_DATE);
  when(mockChangingParameterListMetaData.getClassNameOfField(7)).thenReturn(Date.class.getName());
  when(mockChangingParameterListMetaData.isOptional(7)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(7)).thenReturn("DATE");
  when(mockChangingParameterListMetaData.getRecordTypeName(7)).thenReturn("D");
  when(mockChangingParameterListMetaData.getLength(7)).thenReturn(8);
  when(mockChangingParameterListMetaData.getByteLength(7)).thenReturn(8);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(7)).thenReturn(16);
  when(mockChangingParameterListMetaData.getDecimals(7)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(7)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(7)).thenReturn(PARAM_LIST_DATE_PARAM);
  when(mockChangingParameterListMetaData.getName(8)).thenReturn(PARAM_LIST_TIME_PARAM);
  when(mockChangingParameterListMetaData.getType(8)).thenReturn(JCoMetaData.TYPE_TIME);
  when(mockChangingParameterListMetaData.getClassNameOfField(8)).thenReturn(Date.class.getName());
  when(mockChangingParameterListMetaData.isOptional(8)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(8)).thenReturn("TIME");
  when(mockChangingParameterListMetaData.getRecordTypeName(8)).thenReturn("T");
  when(mockChangingParameterListMetaData.getLength(8)).thenReturn(6);
  when(mockChangingParameterListMetaData.getByteLength(8)).thenReturn(6);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(8)).thenReturn(12);
  when(mockChangingParameterListMetaData.getDecimals(8)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(8)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(8)).thenReturn(PARAM_LIST_TIME_PARAM);
  when(mockChangingParameterListMetaData.getName(9)).thenReturn(PARAM_LIST_STRING_PARAM);
  when(mockChangingParameterListMetaData.getType(9)).thenReturn(JCoMetaData.TYPE_STRING);
  when(mockChangingParameterListMetaData.getClassNameOfField(9)).thenReturn(String.class.getName());
  when(mockChangingParameterListMetaData.isOptional(9)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(9)).thenReturn("STRING");
  when(mockChangingParameterListMetaData.getRecordTypeName(9)).thenReturn("STRING");
  when(mockChangingParameterListMetaData.getLength(9)).thenReturn(0);
  when(mockChangingParameterListMetaData.getByteLength(9)).thenReturn(8);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(9)).thenReturn(8);
  when(mockChangingParameterListMetaData.getDecimals(9)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(9)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(9)).thenReturn(PARAM_LIST_STRING_PARAM);
  when(mockChangingParameterListMetaData.getName(10)).thenReturn(PARAM_LIST_STRUCTURE_PARAM);
  when(mockChangingParameterListMetaData.isStructure(10)).thenReturn(true);
  when(mockChangingParameterListMetaData.getRecordMetaData(10)).thenReturn(mockStructureMetaData);
  when(mockChangingParameterListMetaData.isOptional(10)).thenReturn(false);
  when(mockChangingParameterListMetaData.getTypeAsString(10)).thenReturn("STRUCTURE");
  when(mockChangingParameterListMetaData.getRecordTypeName(10)).thenReturn(STRUCTURE_TYPE_NAME);
  when(mockChangingParameterListMetaData.getLength(10)).thenReturn(0);
  when(mockChangingParameterListMetaData.getByteLength(10)).thenReturn(80);
  when(mockChangingParameterListMetaData.getUnicodeByteLength(10)).thenReturn(112);
  when(mockChangingParameterListMetaData.getDecimals(10)).thenReturn(0);
  when(mockChangingParameterListMetaData.isChanging(10)).thenReturn(true);
  when(mockChangingParameterListMetaData.getDescription(10)).thenReturn(PARAM_LIST_STRUCTURE_PARAM);
  when(mockChangingParameterListMetaData.getFieldCount()).thenReturn(11);
  when(mockTableParameterListMetaData.getName(0)).thenReturn(PARAM_LIST_TABLE_PARAM);
  when(mockTableParameterListMetaData.isTable(0)).thenReturn(true);
  when(mockTableParameterListMetaData.getRecordMetaData(0)).thenReturn(mockStructureMetaData);
  when(mockTableParameterListMetaData.isOptional(0)).thenReturn(false);
  when(mockTableParameterListMetaData.getTypeAsString(0)).thenReturn("TABLE");
  when(mockTableParameterListMetaData.getRecordTypeName(0)).thenReturn(STRUCTURE_TYPE_NAME);
  when(mockTableParameterListMetaData.getLength(0)).thenReturn(0);
  when(mockTableParameterListMetaData.getByteLength(0)).thenReturn(72);
  when(mockTableParameterListMetaData.getUnicodeByteLength(0)).thenReturn(104);
  when(mockTableParameterListMetaData.getDecimals(0)).thenReturn(0);
  when(mockTableParameterListMetaData.isChanging(0)).thenReturn(true);
  when(mockTableParameterListMetaData.getDescription(0)).thenReturn(PARAM_LIST_TABLE_PARAM);
  when(mockTableParameterListMetaData.getFieldCount()).thenReturn(1);
  when(mockStructureMetaData.getName(0)).thenReturn(CHAR_PARAM);
  when(mockStructureMetaData.getType(0)).thenReturn(JCoMetaData.TYPE_CHAR);
  when(mockStructureMetaData.getClassNameOfField(0)).thenReturn(String.class.getName());
  when(mockStructureMetaData.getTypeAsString(0)).thenReturn("CHAR");
  when(mockStructureMetaData.getRecordTypeName(0)).thenReturn("ZCHAR");
  when(mockStructureMetaData.getLength(0)).thenReturn(10);
  when(mockStructureMetaData.getByteLength(0)).thenReturn(10);
  when(mockStructureMetaData.getUnicodeByteLength(0)).thenReturn(20);
  when(mockStructureMetaData.getDecimals(0)).thenReturn(0);
  when(mockStructureMetaData.getDescription(0)).thenReturn(CHAR_PARAM);
  when(mockStructureMetaData.getName(1)).thenReturn(NUM_PARAM);
  when(mockStructureMetaData.getType(1)).thenReturn(JCoMetaData.TYPE_NUM);
  when(mockStructureMetaData.getClassNameOfField(1)).thenReturn(String.class.getName());
  when(mockStructureMetaData.getTypeAsString(1)).thenReturn("NUM");
  when(mockStructureMetaData.getRecordTypeName(1)).thenReturn("ZNUM");
  when(mockStructureMetaData.getLength(1)).thenReturn(10);
  when(mockStructureMetaData.getByteLength(1)).thenReturn(10);
  when(mockStructureMetaData.getUnicodeByteLength(1)).thenReturn(20);
  when(mockStructureMetaData.getDecimals(1)).thenReturn(0);
  when(mockStructureMetaData.getDescription(1)).thenReturn(NUM_PARAM);
  when(mockStructureMetaData.getName(2)).thenReturn(INT_PARAM);
  when(mockStructureMetaData.getType(2)).thenReturn(JCoMetaData.TYPE_INT);
  when(mockStructureMetaData.getClassNameOfField(2)).thenReturn(Integer.class.getName());
  when(mockStructureMetaData.getTypeAsString(2)).thenReturn("INT");
  when(mockStructureMetaData.getRecordTypeName(2)).thenReturn("ZINT");
  when(mockStructureMetaData.getLength(2)).thenReturn(4);
  when(mockStructureMetaData.getByteLength(2)).thenReturn(4);
  when(mockStructureMetaData.getUnicodeByteLength(2)).thenReturn(4);
  when(mockStructureMetaData.getDecimals(2)).thenReturn(0);
  when(mockStructureMetaData.getDescription(2)).thenReturn(INT_PARAM);
  when(mockStructureMetaData.getName(3)).thenReturn(FLOAT_PARAM);
  when(mockStructureMetaData.getType(3)).thenReturn(JCoMetaData.TYPE_FLOAT);
  when(mockStructureMetaData.getClassNameOfField(3)).thenReturn(Double.class.getName());
  when(mockStructureMetaData.getTypeAsString(3)).thenReturn("FLOAT");
  when(mockStructureMetaData.getRecordTypeName(3)).thenReturn("F");
  when(mockStructureMetaData.getLength(3)).thenReturn(8);
  when(mockStructureMetaData.getByteLength(3)).thenReturn(8);
  when(mockStructureMetaData.getUnicodeByteLength(3)).thenReturn(8);
  when(mockStructureMetaData.getDecimals(3)).thenReturn(0);
  when(mockStructureMetaData.getDescription(3)).thenReturn(FLOAT_PARAM);
  when(mockStructureMetaData.getName(4)).thenReturn(BCD_PARAM);
  when(mockStructureMetaData.getType(4)).thenReturn(JCoMetaData.TYPE_BCD);
  when(mockStructureMetaData.getClassNameOfField(4)).thenReturn(BigDecimal.class.getName());
  when(mockStructureMetaData.getTypeAsString(4)).thenReturn("BCD");
  when(mockStructureMetaData.getRecordTypeName(4)).thenReturn("ZBCD");
  when(mockStructureMetaData.getLength(4)).thenReturn(9);
  when(mockStructureMetaData.getByteLength(4)).thenReturn(9);
  when(mockStructureMetaData.getUnicodeByteLength(4)).thenReturn(9);
  when(mockStructureMetaData.getDecimals(4)).thenReturn(14);
  when(mockStructureMetaData.getDescription(4)).thenReturn(BCD_PARAM);
  when(mockStructureMetaData.getName(5)).thenReturn(BINARY_PARAM);
  when(mockStructureMetaData.getType(5)).thenReturn(JCoMetaData.TYPE_BYTE);
  when(mockStructureMetaData.getClassNameOfField(5)).thenReturn(byte[].class.getName());
  when(mockStructureMetaData.getTypeAsString(5)).thenReturn("BYTE");
  when(mockStructureMetaData.getRecordTypeName(5)).thenReturn("ZBYTE");
  when(mockStructureMetaData.getLength(5)).thenReturn(1);
  when(mockStructureMetaData.getByteLength(5)).thenReturn(1);
  when(mockStructureMetaData.getUnicodeByteLength(5)).thenReturn(1);
  when(mockStructureMetaData.getDecimals(5)).thenReturn(0);
  when(mockStructureMetaData.getDescription(5)).thenReturn(BINARY_PARAM);
  when(mockStructureMetaData.getName(6)).thenReturn(BINARY_ARRAY_PARAM);
  when(mockStructureMetaData.getType(6)).thenReturn(JCoMetaData.TYPE_BYTE);
  when(mockStructureMetaData.getClassNameOfField(6)).thenReturn(byte[].class.getName());
  when(mockStructureMetaData.getTypeAsString(6)).thenReturn("BYTE");
  when(mockStructureMetaData.getRecordTypeName(6)).thenReturn("ZBYTE");
  when(mockStructureMetaData.getLength(6)).thenReturn(10);
  when(mockStructureMetaData.getByteLength(6)).thenReturn(10);
  when(mockStructureMetaData.getUnicodeByteLength(6)).thenReturn(10);
  when(mockStructureMetaData.getDecimals(6)).thenReturn(0);
  when(mockStructureMetaData.getDescription(6)).thenReturn(BINARY_ARRAY_PARAM);
  when(mockStructureMetaData.getName(7)).thenReturn(DATE_PARAM);
  when(mockStructureMetaData.getType(7)).thenReturn(JCoMetaData.TYPE_DATE);
  when(mockStructureMetaData.getClassNameOfField(7)).thenReturn(Date.class.getName());
  when(mockStructureMetaData.getTypeAsString(7)).thenReturn("DATE");
  when(mockStructureMetaData.getRecordTypeName(7)).thenReturn("D");
  when(mockStructureMetaData.getLength(7)).thenReturn(8);
  when(mockStructureMetaData.getByteLength(7)).thenReturn(8);
  when(mockStructureMetaData.getUnicodeByteLength(7)).thenReturn(16);
  when(mockStructureMetaData.getDecimals(7)).thenReturn(0);
  when(mockStructureMetaData.getDescription(7)).thenReturn(DATE_PARAM);
  when(mockStructureMetaData.getName(8)).thenReturn(TIME_PARAM);
  when(mockStructureMetaData.getType(8)).thenReturn(JCoMetaData.TYPE_TIME);
  when(mockStructureMetaData.getClassNameOfField(8)).thenReturn(Date.class.getName());
  when(mockStructureMetaData.getTypeAsString(8)).thenReturn("TIME");
  when(mockStructureMetaData.getRecordTypeName(8)).thenReturn("T");
  when(mockStructureMetaData.getLength(8)).thenReturn(6);
  when(mockStructureMetaData.getByteLength(8)).thenReturn(6);
  when(mockStructureMetaData.getUnicodeByteLength(8)).thenReturn(12);
  when(mockStructureMetaData.getDecimals(8)).thenReturn(0);
  when(mockStructureMetaData.getDescription(8)).thenReturn(TIME_PARAM);
  when(mockStructureMetaData.getName(9)).thenReturn(STRING_PARAM);
  when(mockStructureMetaData.getType(9)).thenReturn(JCoMetaData.TYPE_STRING);
  when(mockStructureMetaData.getClassNameOfField(9)).thenReturn(String.class.getName());
  when(mockStructureMetaData.getTypeAsString(9)).thenReturn("STRING");
  when(mockStructureMetaData.getRecordTypeName(9)).thenReturn("STRING");
  when(mockStructureMetaData.getLength(9)).thenReturn(0);
  when(mockStructureMetaData.getByteLength(9)).thenReturn(8);
  when(mockStructureMetaData.getUnicodeByteLength(9)).thenReturn(8);
  when(mockStructureMetaData.getDecimals(9)).thenReturn(0);
  when(mockStructureMetaData.getDescription(9)).thenReturn(STRING_PARAM);
  when(mockStructureMetaData.getFieldCount()).thenReturn(10);
}
