{
  enhanceParameterListMetaData();
  Structure request=RfcUtil.getRequest(mockRepository,FUNCTION_MODULE_NAME);
  RfcUtil.setValue(request,PARAM_LIST_CHAR_PARAM,CHAR_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_NUM_PARAM,NUM_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_INT_PARAM,INT_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_FLOAT_PARAM,FLOAT_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_BCD_PARAM,BCD_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_BINARY_PARAM,BINARY_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_BINARY_ARRAY_PARAM,BINARY_ARRAY_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_DATE_PARAM,DATE_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_TIME_PARAM,TIME_PARAM_IN_VAL);
  RfcUtil.setValue(request,PARAM_LIST_STRING_PARAM,STRING_PARAM_IN_VAL);
  Structure structure=(Structure)RfcUtil.getValue(request,PARAM_LIST_STRUCTURE_PARAM);
  RfcUtil.setValue(structure,CHAR_PARAM,CHAR_PARAM_IN_VAL);
  RfcUtil.setValue(structure,NUM_PARAM,NUM_PARAM_IN_VAL);
  RfcUtil.setValue(structure,INT_PARAM,INT_PARAM_IN_VAL);
  RfcUtil.setValue(structure,FLOAT_PARAM,FLOAT_PARAM_IN_VAL);
  RfcUtil.setValue(structure,BCD_PARAM,BCD_PARAM_IN_VAL);
  RfcUtil.setValue(structure,BINARY_PARAM,BINARY_PARAM_IN_VAL);
  RfcUtil.setValue(structure,BINARY_ARRAY_PARAM,BINARY_ARRAY_PARAM_IN_VAL);
  RfcUtil.setValue(structure,DATE_PARAM,DATE_PARAM_IN_VAL);
  RfcUtil.setValue(structure,TIME_PARAM,TIME_PARAM_IN_VAL);
  RfcUtil.setValue(structure,STRING_PARAM,STRING_PARAM_IN_VAL);
  @SuppressWarnings("unchecked") Table<? extends Structure> table=(Table<? extends Structure>)RfcUtil.getValue(request,PARAM_LIST_TABLE_PARAM);
  Structure row=RfcUtil.addTableRow(table);
  RfcUtil.setValue(row,CHAR_PARAM,CHAR_PARAM_IN_VAL);
  RfcUtil.setValue(row,NUM_PARAM,NUM_PARAM_IN_VAL);
  RfcUtil.setValue(row,INT_PARAM,INT_PARAM_IN_VAL);
  RfcUtil.setValue(row,FLOAT_PARAM,FLOAT_PARAM_IN_VAL);
  RfcUtil.setValue(row,BCD_PARAM,BCD_PARAM_IN_VAL);
  RfcUtil.setValue(row,BINARY_PARAM,BINARY_PARAM_IN_VAL);
  RfcUtil.setValue(row,BINARY_ARRAY_PARAM,BINARY_ARRAY_PARAM_IN_VAL);
  RfcUtil.setValue(row,DATE_PARAM,DATE_PARAM_IN_VAL);
  RfcUtil.setValue(row,TIME_PARAM,TIME_PARAM_IN_VAL);
  RfcUtil.setValue(row,STRING_PARAM,STRING_PARAM_IN_VAL);
  RfcUtil.fillJCoParameterListsFromRequest(request,mockFunction);
  assertThat("RfcUtil.getRequest(mockRepository, FUNCTION_MODULE_NAME) returned unexpected value",request,notNullValue());
  verify(mockParameterListCharField,times(1)).setValue((Object)CHAR_PARAM_IN_VAL);
  verify(mockCharField,times(2)).setValue((Object)CHAR_PARAM_IN_VAL);
  verify(mockParameterListNumField,times(1)).setValue((Object)NUM_PARAM_IN_VAL);
  verify(mockNumField,times(2)).setValue((Object)NUM_PARAM_IN_VAL);
  verify(mockParameterListIntField,times(1)).setValue((Object)INT_PARAM_IN_VAL);
  verify(mockIntField,times(2)).setValue((Object)INT_PARAM_IN_VAL);
  verify(mockParameterListFloatField,times(1)).setValue((Object)FLOAT_PARAM_IN_VAL);
  verify(mockFloatField,times(2)).setValue((Object)FLOAT_PARAM_IN_VAL);
  verify(mockParameterListBCDField,times(1)).setValue((Object)BCD_PARAM_IN_VAL);
  verify(mockBCDField,times(2)).setValue((Object)BCD_PARAM_IN_VAL);
  verify(mockParameterListBinaryField,times(1)).setValue((Object)BINARY_PARAM_IN_VAL);
  verify(mockBinaryField,times(2)).setValue((Object)BINARY_PARAM_IN_VAL);
  verify(mockParameterListBinaryArrayField,times(1)).setValue((Object)BINARY_ARRAY_PARAM_IN_VAL);
  verify(mockBinaryArrayField,times(2)).setValue((Object)BINARY_ARRAY_PARAM_IN_VAL);
  verify(mockParameterListDateField,times(1)).setValue((Object)DATE_PARAM_IN_VAL);
  verify(mockDateField,times(2)).setValue((Object)DATE_PARAM_IN_VAL);
  verify(mockParameterListTimeField,times(1)).setValue((Object)TIME_PARAM_IN_VAL);
  verify(mockTimeField,times(2)).setValue((Object)TIME_PARAM_IN_VAL);
  verify(mockParameterListStringField,times(1)).setValue((Object)STRING_PARAM_IN_VAL);
  verify(mockStringField,times(2)).setValue((Object)STRING_PARAM_IN_VAL);
  verify(mockParameterListStructureField,times(1)).isStructure();
  verify(mockParameterListStructureField,times(1)).getStructure();
  verify(mockParameterListTableField,times(1)).isTable();
  verify(mockParameterListTableField,times(1)).getTable();
}
