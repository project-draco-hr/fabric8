{
  HashMap<String,SerializationStrategy> map=new HashMap<String,SerializationStrategy>();
  map.put("protobuf",new ProtobufSerializationStrategy());
  DispatchQueue queue=Dispatch.createQueue();
  ServerInvokerImpl server=new ServerInvokerImpl("tcp://localhost:0",queue,map);
  server.start();
  ClientInvokerImpl client=new ClientInvokerImpl(queue,map);
  client.start();
  try {
    final HelloImpl helloImpl=new HelloImpl();
    server.registerService("service-id",new ServerInvoker.ServiceFactory(){
      public Object get(){
        return helloImpl;
      }
      public void unget(){
      }
    }
,HelloImpl.class.getClassLoader());
    InvocationHandler handler=client.getProxy(server.getConnectAddress(),"service-id",HelloImpl.class.getClassLoader());
    final Hello hello=(Hello)Proxy.newProxyInstance(HelloImpl.class.getClassLoader(),new Class[]{Hello.class},handler);
    final AtomicInteger requests=new AtomicInteger(0);
    final AtomicInteger failures=new AtomicInteger(0);
    final long latencies[]=new long[BENCHMARK_CLIENTS * BENCHMARK_INVOCATIONS_PER_CLIENT];
    final long start=System.nanoTime();
    AsyncClient[] threads=new AsyncClient[BENCHMARK_CLIENTS];
    for (int t=0; t < BENCHMARK_CLIENTS; t++) {
      threads[t]=new AsyncClient(t,BENCHMARK_INVOCATIONS_PER_CLIENT,hello,failures,requests,latencies);
      threads[t].start();
    }
    for (int t=0; t < BENCHMARK_CLIENTS; t++) {
      threads[t].join();
    }
    final long end=System.nanoTime();
    long latency_sum=0;
    for (int t=0; t < latencies.length; t++) {
      if (latencies[t] != -1) {
        latency_sum+=latencies[t];
      }
    }
    double latency_avg=((latency_sum * 1.0d) / requests.get()) / MILLIS_IN_A_NANO;
    double request_rate=((requests.get() * 1.0d) / (end - start)) * SECONDS_IN_A_NANO;
    System.err.println(String.format("Requests/Second: %,.2f",request_rate));
    System.err.println(String.format("Average request latency: %,.2f ms",latency_avg));
    System.err.println("Error Ratio: " + failures.get() + " / "+ requests.get());
  }
  finally {
    server.stop();
    client.stop();
  }
}
