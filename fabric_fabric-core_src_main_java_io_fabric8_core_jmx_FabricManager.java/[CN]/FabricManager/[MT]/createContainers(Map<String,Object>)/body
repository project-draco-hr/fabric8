{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Creating containers from JSON data: " + options);
  }
  String providerType=(String)options.get("providerType");
  if (providerType == null) {
    throw new RuntimeException("No providerType provided");
  }
  CreateContainerBasicOptions.Builder builder=null;
  Class clazz=fabricService.getProviders().get(providerType).getOptionsType();
  try {
    builder=(CreateContainerBasicOptions.Builder)clazz.getMethod("builder").invoke(null);
  }
 catch (  Exception e) {
    LOG.warn("Failed to find builder type",e);
  }
  if (builder == null) {
    throw new RuntimeException("Unknown provider type : " + providerType);
  }
  ObjectMapper mapper=getObjectMapper();
  builder=mapper.convertValue(options,builder.getClass());
  builder.zookeeperPassword(fabricService.getZookeeperPassword());
  builder.zookeeperUrl(fabricService.getZookeeperUrl());
  Object profileObject=options.get("profiles");
  if (profileObject != null) {
    List profiles=mapper.convertValue(profileObject,List.class);
    builder.profiles(profiles);
  }
  CreateContainerOptions build=builder.build();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Created container options: " + build + " with profiles "+ build.getProfiles());
  }
  CreateContainerMetadata<?> metadatas[]=fabricService.createContainers(build);
  Map<String,String> rc=new LinkedHashMap<String,String>();
  for (  CreateContainerMetadata<?> metadata : metadatas) {
    if (!metadata.isSuccess()) {
      LOG.error("Failed to create container {}: ",metadata.getContainerName(),metadata.getFailure());
      rc.put(metadata.getContainerName(),metadata.getFailure().getMessage());
    }
  }
  return rc;
}
