{
  InputStream is=null;
  BufferedInputStream bis=null;
  File artifactFile=null;
  ArtifactDownloadFuture masterFuture=null;
  try {
    String path=req.getPathInfo();
    if (path != null && path.startsWith("/")) {
      path=path.substring(1);
    }
    try {
      ArtifactDownloadFuture future=new ArtifactDownloadFuture(path);
      masterFuture=requestMap.putIfAbsent(path,future);
      if (masterFuture == null) {
        masterFuture=future;
        executorService.submit(future);
        artifactFile=masterFuture.get();
      }
 else {
        artifactFile=masterFuture.get();
      }
      requestMap.remove(path);
      if (artifactFile == null) {
        resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
        return;
      }
      is=new FileInputStream(artifactFile);
      LOGGER.log(Level.INFO,String.format("Writing response for file : %s",path));
      resp.setStatus(HttpServletResponse.SC_OK);
      resp.setContentType("application/octet-stream");
      resp.setDateHeader("Date",System.currentTimeMillis());
      resp.setHeader("Connection","close");
      resp.setContentLength(is.available());
      resp.setHeader("Server","MavenProxy Proxy/" + FabricConstants.FABRIC_VERSION);
      byte buffer[]=new byte[8192];
      int length;
      while ((length=is.read(buffer)) != -1) {
        resp.getOutputStream().write(buffer,0,length);
      }
      resp.getOutputStream().flush();
    }
  finally {
      Closeables.closeQuitely(is);
      if (masterFuture != null) {
        masterFuture.release(artifactFile);
      }
    }
  }
 catch (  Exception ex) {
    resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
}
