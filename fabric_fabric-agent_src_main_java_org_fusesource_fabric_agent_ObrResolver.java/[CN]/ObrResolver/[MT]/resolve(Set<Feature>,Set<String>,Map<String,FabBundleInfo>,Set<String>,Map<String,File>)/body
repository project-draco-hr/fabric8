{
  List<Requirement> reqs=new ArrayList<Requirement>();
  List<Resource> ress=new ArrayList<Resource>();
  List<Resource> deploy=new ArrayList<Resource>();
  Map<Object,BundleInfo> infos=new HashMap<Object,BundleInfo>();
  for (  Feature feature : features) {
    for (    BundleInfo bundleInfo : feature.getBundles()) {
      try {
        if (!bundleInfo.getLocation().startsWith(FAB_PROTOCOL)) {
          Resource res=createResource(bundleInfo.getLocation(),downloads,fabs);
          if (res == null) {
            throw new IllegalArgumentException("Unable to build OBR representation for bundle " + bundleInfo.getLocation());
          }
          ress.add(res);
          infos.put(res,bundleInfo);
        }
      }
 catch (      MalformedURLException e) {
        Requirement req=parseRequirement(bundleInfo.getLocation());
        reqs.add(req);
        infos.put(req,bundleInfo);
      }
    }
  }
  for (  String bundle : bundles) {
    Resource res=createResource(bundle,downloads,fabs);
    if (res == null) {
      throw new IllegalArgumentException("Unable to build OBR representation for bundle " + bundle);
    }
    ress.add(res);
    infos.put(res,new SimpleBundleInfo(bundle,false));
  }
  for (  FabBundleInfo fab : fabs.values()) {
    Resource res=repositoryAdmin.getHelper().createResource(fab.getManifest());
    if (res == null) {
      throw new IllegalArgumentException("Unable to build OBR representation for fab " + fab.getUrl());
    }
    ((ResourceImpl)res).put(Resource.URI,FAB_PROTOCOL + fab.getUrl(),Property.URI);
    ress.add(res);
    infos.put(res,new SimpleBundleInfo(fab.getUrl(),false));
    for (    DependencyTree dep : fab.getBundles()) {
      if (dep.isBundle()) {
        URL url=new URL(dep.getUrl());
        Resource resDep=createResource(dep.getUrl(),downloads,fabs);
        if (resDep == null) {
          throw new IllegalArgumentException("Unable to build OBR representation for fab dependency " + url);
        }
        ress.add(resDep);
        infos.put(resDep,new SimpleBundleInfo(dep.getUrl(),true));
      }
    }
  }
  for (  String override : overrides) {
    Resource over=null;
    try {
      over=createResource(override,downloads,fabs);
    }
 catch (    Exception e) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.info("Ignoring patched resource: {}: {}",new Object[]{override,e.getMessage()},e);
      }
 else {
        LOGGER.info("Ignoring patched resource: {}: {}",override,e.getMessage());
      }
    }
    if (over == null) {
      continue;
    }
    boolean add=false;
    boolean dependency=true;
    for (    Resource res : new ArrayList<Resource>(ress)) {
      if (res.getSymbolicName().equals(over.getSymbolicName())) {
        Version v1=res.getVersion();
        Version v2=new Version(v1.getMajor(),v1.getMinor() + 1,0);
        if (compareFuseVersions(v1,over.getVersion()) < 0 && compareFuseVersions(over.getVersion(),v2) < 0) {
          ress.remove(res);
          dependency&=infos.remove(res).isDependency();
          add=true;
        }
      }
    }
    if (add) {
      ress.add(over);
      infos.put(over,new SimpleBundleInfo(override,dependency));
    }
  }
  Repository repository=repositoryAdmin.getHelper().repository(ress.toArray(new Resource[ress.size()]));
  List<Repository> repos=new ArrayList<Repository>();
  repos.add(repositoryAdmin.getSystemRepository());
  repos.add(repository);
  repos.addAll(Arrays.asList(repositoryAdmin.listRepositories()));
  org.apache.felix.bundlerepository.Resolver resolver=repositoryAdmin.resolver(repos.toArray(new Repository[repos.size()]));
  for (  Resource res : ress) {
    if (!infos.get(res).isDependency()) {
      resolver.add(res);
    }
  }
  for (  Requirement req : reqs) {
    resolver.add(req);
  }
  if (!doResolve(resolver)) {
    StringWriter w=new StringWriter();
    PrintWriter out=new PrintWriter(w);
    Reason[] failedReqs=resolver.getUnsatisfiedRequirements();
    if ((failedReqs != null) && (failedReqs.length > 0)) {
      out.println("Unsatisfied requirement(s):");
      printUnderline(out,27);
      for (      Reason r : failedReqs) {
        out.println("   " + r.getRequirement().getName() + ":"+ r.getRequirement().getFilter());
        out.println("      " + r.getResource().getPresentationName());
      }
    }
 else {
      out.println("Could not resolve targets.");
    }
    out.flush();
    throw new Exception("Can not resolve feature:\n" + w.toString());
  }
  Collections.addAll(deploy,resolver.getAddedResources());
  Collections.addAll(deploy,resolver.getRequiredResources());
  if (resolveOptionalImports) {
    Collections.addAll(deploy,resolver.getOptionalResources());
  }
  return deploy;
}
