{
  ProjectRequirements requirements=new ProjectRequirements();
  DependencyDTO rootDependency=null;
  if (!"pom".equals(project.getPackaging()) && isIncludeArtifact()) {
    rootDependency=loadRootDependency();
    requirements.setRootDependency(rootDependency);
  }
  configureRequirements(requirements);
  if (isIncludeArtifact()) {
    addProjectArtifactBundle(requirements);
  }
  File profileBuildDir=createProfileBuildDir(requirements.getProfileId());
  boolean hasConfigDir=profileConfigDir.isDirectory();
  if (hasConfigDir) {
    copyProfileConfigFiles(profileBuildDir,profileConfigDir);
  }
 else {
    getLog().info("The profile configuration files directory " + profileConfigDir + " doesn't exist, so not copying any additional project documentation or configuration files");
  }
  if (hasConfigDir || rootDependency != null || notEmpty(requirements.getBundles()) || notEmpty(requirements.getFeatures()) || notEmpty(requirements.getFeatureRepositories())) {
    if (includeRootReadMe) {
      copyReadMe(project.getFile().getParentFile(),profileBuildDir);
    }
    if (isIncludeArtifact()) {
      writeProfileRequirements(requirements,profileBuildDir);
    }
    generateFabricAgentProperties(requirements,new File(profileBuildDir,"io.fabric8.agent.properties"));
    Zips.createZipFile(getLog(),buildDir,outputFile);
    projectHelper.attachArtifact(project,artifactType,artifactClassifier,outputFile);
    String relativePath=Files.getRelativePath(project.getBasedir(),outputFile);
    while (relativePath.startsWith("/")) {
      relativePath=relativePath.substring(1);
    }
    getLog().info("Created profile zip file: " + relativePath);
  }
}
