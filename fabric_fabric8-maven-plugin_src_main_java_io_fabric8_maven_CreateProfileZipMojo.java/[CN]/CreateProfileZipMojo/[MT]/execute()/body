{
  try {
    if (isIgnoreProject())     return;
    if (reactorProjects != null) {
      List<MavenProject> pomZipProjects=new ArrayList<>();
      List<MavenProject> projectsWithZip=new ArrayList<>();
      for (      MavenProject reactorProject : reactorProjects) {
        if ("pom".equals(reactorProject.getPackaging())) {
          pomZipProjects.add(reactorProject);
        }
        List<Plugin> buildPlugins=reactorProject.getBuildPlugins();
        for (        Plugin buildPlugin : buildPlugins) {
          String artifactId=buildPlugin.getArtifactId();
          if ("fabric8-maven-plugin".equals(artifactId)) {
            Object goals=buildPlugin.getGoals();
            boolean hasZipGoal=goals != null && goals.toString().contains("zip");
            List<PluginExecution> executions=buildPlugin.getExecutions();
            for (            PluginExecution execution : executions) {
              List<String> execGoals=execution.getGoals();
              if (execGoals.contains("zip")) {
                hasZipGoal=true;
              }
            }
            getLog().debug("project " + reactorProject.getArtifactId() + " has zip goal: "+ hasZipGoal);
            projectsWithZip.add(reactorProject);
          }
        }
      }
      if (reactorProjects.size() > 1 && reactorProjects.get(0) == project) {
        getLog().info("Choosing root project " + project.getArtifactId() + " for generation of aggregated zip");
        generateAggregatedZip(project,projectsWithZip,pomZipProjects);
        return;
      }
    }
    generateZip();
  }
 catch (  MojoExecutionException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MojoExecutionException("Error executing",e);
  }
}
