{
  File projectBaseDir=rootProject.getBasedir();
  File projectOutputFile=new File(projectBaseDir,"target/profile.zip");
  getLog().info("Generating " + projectOutputFile.getAbsolutePath() + " from root project "+ rootProject.getArtifactId());
  File projectBuildDir=new File(projectBaseDir,reactorProjectOutputPath);
  createAggregatedZip(reactorProjects,projectBaseDir,projectBuildDir,reactorProjectOutputPath,projectOutputFile,includeReadMe,pomZipProjects);
  if (rootProject.getAttachedArtifacts() != null) {
    Artifact found=null;
    for (    Artifact artifact : rootProject.getAttachedArtifacts()) {
      if (artifactClassifier != null && artifact.hasClassifier() && artifact.getClassifier().equals(artifactClassifier)) {
        found=artifact;
        break;
      }
    }
    if (found != null) {
      rootProject.getAttachedArtifacts().remove(found);
    }
  }
  getLog().info("Installing aggregated zip " + projectOutputFile);
  InvocationRequest request=new DefaultInvocationRequest();
  request.setBaseDirectory(rootProject.getBasedir());
  request.setPomFile(new File("./pom.xml"));
  request.setGoals(Collections.singletonList("install:install-file"));
  request.setRecursive(false);
  request.setInteractive(false);
  String opts=String.format("-Dfile=target/profile.zip -DgroupId=%s -DartifactId=%s -Dversion=%s -Dclassifier=profile -Dpackaging=zip",rootProject.getGroupId(),rootProject.getArtifactId(),rootProject.getVersion());
  request.setMavenOpts(opts);
  getLog().info("Installing aggregated zip using: mvn install:install-file " + opts);
  Invoker invoker=new DefaultInvoker();
  try {
    InvocationResult result=invoker.execute(request);
    if (result.getExitCode() != 0) {
      throw new IllegalStateException("Error invoking Maven goal install:install-file");
    }
  }
 catch (  MavenInvocationException e) {
    throw new MojoExecutionException("Error invoking Maven goal install:install-file",e);
  }
}
