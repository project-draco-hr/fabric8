{
  List<EndpointOptionByGroup> answer=new ArrayList<>();
  if (camelComponentName == null && uri != null) {
    camelComponentName=endpointComponentName(uri);
  }
  CamelCatalog catalog=new DefaultCamelCatalog();
  String json=catalog.componentJSonSchema(camelComponentName);
  if (json == null) {
    throw new IllegalArgumentException("Could not find catalog entry for component name: " + camelComponentName);
  }
  boolean componentConsumerOnly=CamelCatalogHelper.isComponentConsumerOnly(camelComponentName);
  boolean componentProducerOnly=CamelCatalogHelper.isComponentProducerOnly(camelComponentName);
  if (componentConsumerOnly || componentProducerOnly) {
    consumerOnly=false;
    producerOnly=false;
  }
  List<Map<String,String>> data=JSonSchemaHelper.parseJsonSchema("properties",json,true);
  Map<String,String> currentValues=uri != null ? catalog.endpointProperties(uri) : Collections.EMPTY_MAP;
  if (data != null) {
    List<InputComponent> inputs=new ArrayList<>();
    EndpointOptionByGroup current=new EndpointOptionByGroup();
    current.setGroup(null);
    current.setInputs(inputs);
    Set<String> namesAdded=new HashSet<>();
    for (    Map<String,String> propertyMap : data) {
      String name=propertyMap.get("name");
      String kind=propertyMap.get("kind");
      String group=propertyMap.get("group");
      String label=propertyMap.get("label");
      String type=propertyMap.get("type");
      String javaType=propertyMap.get("javaType");
      String deprecated=propertyMap.get("deprecated");
      String required=propertyMap.get("required");
      String currentValue=currentValues.get(name);
      String defaultValue=propertyMap.get("defaultValue");
      String description=propertyMap.get("description");
      String enums=propertyMap.get("enum");
      if (current.getGroup() == null) {
        current.setGroup(group);
      }
      if (group != null && !group.equals(current.getGroup())) {
        if (!current.getInputs().isEmpty()) {
          answer.add(current);
        }
        inputs=new ArrayList<>();
        current=new EndpointOptionByGroup();
        current.setGroup(group);
        current.setInputs(inputs);
      }
      if (consumerOnly && label != null) {
        if (!label.contains("consumer")) {
          continue;
        }
      }
      if (producerOnly && label != null) {
        if (!label.contains("producer")) {
          continue;
        }
      }
      if (!Strings.isNullOrEmpty(name)) {
        Class<Object> inputClazz=CamelCommandsHelper.loadValidInputTypes(javaType,type);
        if (inputClazz != null) {
          if (namesAdded.add(name)) {
            boolean gui=ui.getProvider().isGUI();
            if (!gui) {
              description="";
            }
            if (enums != null && required == null || "false".equals(required)) {
              if (defaultValue == null || defaultValue.isEmpty()) {
                defaultValue="none";
              }
              if (!enums.startsWith("none,")) {
                enums="none," + enums;
              }
            }
            InputComponent input=createUIInput(componentFactory,converterFactory,name,inputClazz,required,currentValue,defaultValue,enums,description);
            if (input != null) {
              inputs.add(input);
              if (inputs.size() == maxOptionsPerPage) {
                if (!current.getInputs().isEmpty()) {
                  answer.add(current);
                }
                inputs=new ArrayList<>();
                current=new EndpointOptionByGroup();
                current.setGroup(group);
                current.setInputs(inputs);
              }
            }
          }
        }
      }
    }
    if (!inputs.isEmpty()) {
      answer.add(current);
    }
  }
  return answer;
}
