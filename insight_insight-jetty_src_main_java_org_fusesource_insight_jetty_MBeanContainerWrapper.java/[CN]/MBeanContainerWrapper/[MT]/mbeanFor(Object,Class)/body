{
  ClassLoader tccl=Thread.currentThread().getContextClassLoader();
  try {
    Class oClass=clazz;
    Object mbean=null;
    while (mbean == null && oClass != null) {
      Thread.currentThread().setContextClassLoader(oClass.getClassLoader());
      String pName=oClass.getPackage().getName();
      String cName=oClass.getName().substring(pName.length() + 1);
      String mName=pName + ".jmx." + cName+ "MBean";
      try {
        Class mClass=(Object.class.equals(oClass)) ? oClass=ObjectMBean.class : Loader.loadClass(oClass,mName,true);
        if (LOG.isDebugEnabled())         LOG.debug("mbeanFor " + o + " mClass="+ mClass);
        try {
          Constructor constructor=mClass.getConstructor(OBJ_ARG);
          mbean=constructor.newInstance(new Object[]{o});
        }
 catch (        Exception e) {
          LOG.ignore(e);
          if (ModelMBean.class.isAssignableFrom(mClass)) {
            mbean=mClass.newInstance();
            ((ModelMBean)mbean).setManagedResource(o,"objectReference");
          }
        }
        if (mbean instanceof DynamicMBean) {
          ((DynamicMBean)mbean).getMBeanInfo();
        }
        if (LOG.isDebugEnabled())         LOG.debug("mbeanFor " + o + " is "+ mbean);
        return mbean;
      }
 catch (      ClassNotFoundException e) {
        if (e.getMessage().contains(mName))         LOG.ignore(e);
 else         LOG.warn(e);
      }
catch (      Error e) {
        LOG.warn(e);
        mbean=null;
      }
catch (      Exception e) {
        LOG.warn(e);
        mbean=null;
      }
      oClass=oClass.getSuperclass();
    }
  }
 catch (  Exception e) {
    LOG.ignore(e);
  }
  return null;
}
