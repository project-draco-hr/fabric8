{
  String loadBalancerType=LoadBalancers.STICKY_LOAD_BALANCER;
  int stickyLoadBalancerCacheSize=LoadBalancers.STICKY_LOAD_BALANCER_DEFAULT_CACHE_SIZE;
  LoadBalancer serviceLoadBalancer=LoadBalancers.createLoadBalancer(loadBalancerType,stickyLoadBalancerCacheSize);
  ArrayList<Protocol> protocols=new ArrayList<Protocol>();
  protocols.add(new StompProtocol());
  protocols.add(new MqttProtocol());
  protocols.add(new AmqpProtocol());
  protocols.add(new OpenwireProtocol());
  protocols.add(new HttpProtocol());
  protocols.add(new SslProtocol());
  DetectingGateway gateway=new DetectingGateway();
  gateway.setPort(0);
  gateway.setVertx(vertx);
  SslConfig sslConfig=new SslConfig(new File(basedir(),"src/test/resources/server.ks"),"password");
  sslConfig.setKeyPassword("password");
  gateway.setSslConfig(sslConfig);
  gateway.setServiceMap(serviceMap);
  gateway.setProtocols(protocols);
  gateway.setServiceLoadBalancer(serviceLoadBalancer);
  gateway.setDefaultVirtualHost("broker1");
  gateway.setConnectionTimeout(5000);
  if (httpGatewayServer != null) {
    gateway.setHttpGateway(new InetSocketAddress("localhost",httpGatewayServer.getPort()));
  }
  gateway.init();
  gateways.add(gateway);
  return gateway;
}
