{
  initWriteMethods();
  JSwitch writeBodySwitchBlock=staticWriteBody.body().block()._switch(ref("formatCode"));
  staticRead().body().decl(cm.BYTE,"formatCode",ref("in").invoke("readByte"));
  JSwitch staticReadSwitchBlock=staticRead().body().block()._switch(ref("formatCode"));
  staticReadSwitchBlock._case(generator.registry().cls().staticRef("NULL_FORMAT_CODE")).body()._return(cast(cm._ref(getJavaType()),generator.registry().cls().staticInvoke("instance").invoke("encoder").invoke("readNull").arg(ref("in"))));
  JSwitch readSwitchBlock=read().body()._switch(ref("formatCode"));
  writeBodySwitchBlock._case(generator.registry().cls().staticRef("NULL_FORMAT_CODE")).body().add(generator.registry().cls().staticInvoke("instance").invoke("encoder").invoke("writeNull").arg(ref("out")))._break();
  int highestWidth=0;
  for (  Object obj : type.getEncodingOrDescriptorOrFieldOrChoiceOrDoc()) {
    if (obj instanceof Encoding) {
      Encoding encoding=(Encoding)obj;
      String fieldName=type.getName();
      if (encoding.getName() != null) {
        fieldName+="_" + encoding.getName();
      }
      Log.info("encoding name %s",fieldName);
      String staticCodeFieldName=toStaticName(fieldName + "_CODE");
      cls().field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,cm.BYTE,staticCodeFieldName,direct("(byte)" + encoding.getCode()));
      cls().init().add(generator.registry().cls().staticInvoke("instance").invoke("getPrimitiveFormatCodeMap").invoke("put").arg(ref(staticCodeFieldName)).arg(cls().dotclass()));
      int width=Integer.parseInt(encoding.getWidth());
      if (width > highestWidth) {
        highestWidth=width;
        highestWidthField=staticCodeFieldName;
      }
      cls().field(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,cm.INT,toStaticName(fieldName + "_WIDTH"),lit(width));
      readSwitchBlock._case(ref(staticCodeFieldName)).body().assign(_this().ref("value"),generator.registry().cls().staticInvoke("instance").invoke("encoder").invoke("read" + toJavaClassName(fieldName)).arg(ref("in")))._break();
      staticReadSwitchBlock._case(ref(staticCodeFieldName)).body()._return(generator.registry().cls().staticInvoke("instance").invoke("encoder").invoke("read" + toJavaClassName(fieldName)).arg(ref("in")));
      writeBodySwitchBlock._case(ref(staticCodeFieldName)).body().add(generator.registry().cls().staticInvoke("instance").invoke("encoder").invoke("write" + toJavaClassName(fieldName)).arg(ref("value")).arg(ref("out")))._break();
    }
  }
  readSwitchBlock._default().body()._throw(_new(cm.ref(Exception.class)).arg(lit("Unknown format code for " + type.getName() + " : 0x").plus(cm.ref("java.lang.String").staticInvoke("format").arg("%x").arg(ref("formatCode")))));
  staticReadSwitchBlock._default().body()._throw(_new(cm.ref(Exception.class)).arg(lit("Unknown format code for " + type.getName() + " : 0x").plus(cm.ref("java.lang.String").staticInvoke("format").arg("%x").arg(ref("formatCode")))));
  writeBodySwitchBlock._default().body()._throw(_new(cm.ref(Exception.class)).arg(lit("Unknown format code for " + type.getName() + " : 0x").plus(cm.ref("java.lang.String").staticInvoke("format").arg("%x").arg(ref("formatCode")))));
}
