{
  ZKServerFactoryBean zkServerFactoryBean=null;
  try {
    int zooKeeperPort=getFreePort();
    int serverPort=getFreePort();
    zkServerFactoryBean=new ZKServerFactoryBean();
    zkServerFactoryBean.setPurge(true);
    zkServerFactoryBean.setClientPortAddress(new InetSocketAddress("localhost",zooKeeperPort));
    zkServerFactoryBean.afterPropertiesSet();
    ZKClient zooKeeper=new ZKClient("localhost:" + zooKeeperPort,Timespan.ONE_MINUTE,null);
    final AtomicBoolean connected=new AtomicBoolean(false);
    zooKeeper.registerListener(new LifecycleListener(){
      public void onConnected(){
synchronized (connected) {
          connected.set(true);
          connected.notifyAll();
        }
      }
      public void onDisconnected(){
synchronized (connected) {
          connected.set(false);
          connected.notifyAll();
        }
      }
    }
);
    zooKeeper.start();
synchronized (connected) {
      while (!zooKeeper.isConnected()) {
        connected.wait();
      }
    }
    BundleContext bundleContext=createMock(BundleContext.class);
    ServiceRegistration registration=createMock(ServiceRegistration.class);
    Manager manager=new Manager(bundleContext,zooKeeper,"tcp://localhost:" + serverPort,"localhost");
    bundleContext.addServiceListener(manager,"(service.exported.interfaces=*)");
    expect(bundleContext.getProperty("org.osgi.framework.uuid")).andReturn("the-framework-uuid");
    expect(bundleContext.registerService(EasyMock.<String[]>anyObject(),same(manager),EasyMock.<Dictionary>same(null))).andReturn(registration);
    expect(bundleContext.getServiceReferences(null,"(service.exported.interfaces=*)")).andReturn(null);
    replay(bundleContext,registration);
    manager.init();
    verify(bundleContext,registration);
    reset(bundleContext,registration);
    BundleContext expBundleContext=createMock(BundleContext.class);
    Bundle expBundle=createMock(Bundle.class);
    ServiceReference reference=createMock(ServiceReference.class);
    final Properties props=new Properties();
    props.put(Constants.OBJECTCLASS,new String[]{ConfigurationAdmin.class.getName()});
    expect(reference.getProperty(EasyMock.<String>anyObject())).andAnswer(new IAnswer<Object>(){
      public Object answer() throws Throwable {
        return props.get(EasyMock.getCurrentArguments()[0]);
      }
    }
).anyTimes();
    expect(reference.getPropertyKeys()).andReturn(props.keySet().toArray(new String[0]));
    expect(reference.getBundle()).andReturn(expBundle).anyTimes();
    expect(expBundle.getBundleContext()).andReturn(expBundleContext).anyTimes();
    expect(expBundle.getState()).andReturn(Bundle.ACTIVE).anyTimes();
    replay(bundleContext,registration,reference,expBundleContext,expBundle);
    manager.serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED,reference));
    Thread.sleep(1000);
    verify(bundleContext,registration,reference,expBundleContext,expBundle);
  }
  finally {
    try {
      zkServerFactoryBean.destroy();
    }
 catch (    Throwable t) {
    }
  }
}
