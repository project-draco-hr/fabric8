{
  if (Strings.isNullOrBlank(jsonTemplate)) {
    throw new MojoExecutionException("No fabric8.jsonTemplate specified so cannot generate the Kubernetes JSON file!");
  }
 else {
    GenerateTemplateDTO config=new GenerateTemplateDTO();
    config.setTemplate(jsonTemplate);
    MavenProject project=getProject();
    Properties properties=project.getProperties();
    Map<String,Object> variables=new HashMap<>();
    Set<Map.Entry<Object,Object>> entries=properties.entrySet();
    for (    Map.Entry<Object,Object> entry : entries) {
      Object key=entry.getKey();
      Object value=entry.getValue();
      if (key instanceof String) {
        String keyText=key.toString();
        keyText=keyText.replace('.','_');
        variables.put(keyText,value);
      }
    }
    Map<String,String> labelMap=getLabels();
    String name=getKubernetesName();
    if (labelMap.isEmpty() && Strings.isNotBlank(name)) {
      labelMap.put("component",name);
    }
    config.setLabels(labelMap);
    config.setTemplateVariables(variables);
    config.setPorts(getPorts());
    config.setName(name);
    config.setContainerName(getKubernetesContainerName());
    config.setReplicaCount(replicaCount);
    config.setEnvironmentVariables(getEnvironmentVariables());
    config.setServiceName(serviceName);
    config.setServicePort(servicePort);
    config.setServiceContainerPort(serviceContainerPort);
    String pullPolicy=getImagePullPolicy();
    config.setImagePullPolicy(pullPolicy);
    List<ClassLoader> classLoaders=Lists.newArrayList(Thread.currentThread().getContextClassLoader(),getTestClassLoader(),getClass().getClassLoader(),TemplateGenerator.class.getClassLoader());
    TemplateGenerator generator=new TemplateGenerator(config,classLoaders);
    generator.generate(kubernetesJson);
  }
}
