{
  MavenProject project=getProject();
  Properties properties=project.getProperties();
  Map<String,Object> variables=new HashMap<>();
  Set<Map.Entry<Object,Object>> entries=properties.entrySet();
  for (  Map.Entry<Object,Object> entry : entries) {
    Object key=entry.getKey();
    Object value=entry.getValue();
    if (key instanceof String) {
      String keyText=key.toString();
      keyText=keyText.replace('.','_');
      variables.put(keyText,value);
    }
  }
  Map<String,String> labelMap=getLabels();
  String name=getKubernetesName();
  if (labelMap.isEmpty() && Strings.isNotBlank(name)) {
    labelMap.put("component",name);
  }
  KubernetesListBuilder builder=new KubernetesListBuilder().withId(name).addNewReplicationController().withId(KubernetesHelper.validateKubernetesId(replicationControllerName,"fabric8.replicationController.name")).withLabels(labels).withNewDesiredState().withReplicas(replicaCount).withReplicaSelector(labelMap).withNewPodTemplate().withLabels(labelMap).withNewDesiredState().withNewManifest().addNewContainer().withName(getKubernetesContainerName()).withImage(getDockerImage()).withImagePullPolicy(getImagePullPolicy()).withEnv(getEnvironmentVariables()).withPorts(getContainerPorts()).withVolumeMounts(getVolumeMounts()).endContainer().withVolumes(getVolumes()).endManifest().endDesiredState().endPodTemplate().endDesiredState().endReplicationController();
  if (serviceName != null) {
    ServiceBuilder serviceBuilder=new ServiceBuilder().withId(serviceName).withSelector(labelMap).withLabels(labelMap);
    List<ServicePort> servicePorts=getServicePorts();
    boolean hasPorts=servicePorts != null & !servicePorts.isEmpty();
    if (hasPorts) {
      serviceBuilder.withPorts(servicePorts);
    }
 else {
      serviceBuilder.withPortalIP("None");
    }
    if (headlessServices || hasPorts) {
      builder=builder.addToServices(serviceBuilder.build());
    }
  }
  Template template=getTemplate();
  if (!template.getParameters().isEmpty()) {
    builder=builder.addToTemplates(template);
  }
  KubernetesList kubernetesList=builder.build();
  Object result=Templates.combineTemplates(kubernetesList);
  try {
    ObjectMapper mapper=new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
    String generated=mapper.writeValueAsString(result);
    Files.writeToFile(kubernetesJson,generated,Charset.defaultCharset());
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Failed to generate Kubernetes JSON.",e);
  }
}
