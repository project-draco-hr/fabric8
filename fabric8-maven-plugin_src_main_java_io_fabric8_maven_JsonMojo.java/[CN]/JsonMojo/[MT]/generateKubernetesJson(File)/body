{
  GenerateDTO config=new GenerateDTO();
  MavenProject project=getProject();
  Properties properties=project.getProperties();
  Map<String,Object> variables=new HashMap<>();
  Set<Map.Entry<Object,Object>> entries=properties.entrySet();
  for (  Map.Entry<Object,Object> entry : entries) {
    Object key=entry.getKey();
    Object value=entry.getValue();
    if (key instanceof String) {
      String keyText=key.toString();
      keyText=keyText.replace('.','_');
      variables.put(keyText,value);
    }
  }
  Map<String,String> labelMap=getLabels();
  String name=getKubernetesName();
  if (labelMap.isEmpty() && Strings.isNotBlank(name)) {
    labelMap.put("component",name);
  }
  config.setLabels(labelMap);
  config.setPorts(getPorts());
  config.setName(name);
  config.setContainerName(getKubernetesContainerName());
  config.setEnvironmentVariables(getEnvironmentVariables());
  String pullPolicy=getImagePullPolicy();
  config.setDockerImage(project.getProperties().getProperty("docker.image"));
  config.setImagePullPolicy(pullPolicy);
  config.setReplicaCount(replicaCount);
  config.setReplicationControllerName(KubernetesHelper.validateKubernetesId(replicationControllerName,"fabric8.replicationController.name"));
  config.setServiceName(KubernetesHelper.validateKubernetesId(serviceName,"fabric8.service.name"));
  config.setServicePort(servicePort);
  IntOrString actualServiceContainerPort=new IntOrString();
  try {
    actualServiceContainerPort.setIntVal(Integer.valueOf(serviceContainerPort));
  }
 catch (  NumberFormatException e) {
    actualServiceContainerPort.setStrVal(serviceContainerPort);
  }
  config.setServiceContainerPort(actualServiceContainerPort);
  TemplateGenerator generator=new TemplateGenerator(config);
  generator.generate(kubernetesJson);
}
