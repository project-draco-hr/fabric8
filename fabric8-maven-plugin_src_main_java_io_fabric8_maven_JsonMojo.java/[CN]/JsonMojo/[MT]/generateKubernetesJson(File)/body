{
  MavenProject project=getProject();
  Map<String,String> labelMap=getLabels();
  String name=getProjectName();
  String group=getGroupName();
  if (!labelMap.containsKey("version")) {
    labelMap.put("version",project.getVersion());
  }
  if (!labelMap.containsKey("project") && Strings.isNotBlank(name)) {
    labelMap.put("project",name);
  }
  if (!labelMap.containsKey("group") && Strings.isNotBlank(group)) {
    labelMap.put("group",group);
  }
  if (!labelMap.containsKey("provider") && Strings.isNotBlank(provider)) {
    labelMap.put("provider",provider);
  }
  Map<String,String> podSpecAnnotations=getPodSpecAnnotations();
  Map<String,String> rcAnnotations=getRCAnnotations();
  KubernetesListBuilder builder=new KubernetesListBuilder();
  boolean addedServiceAcount=addServiceAccountIfIUsingSecretAnnotations(builder,podSpecAnnotations);
  List<Volume> volumes=getVolumes();
  List<VolumeMount> volumeMounts=getVolumeMounts();
  Boolean containerPrivileged=getContainerPrivileged();
  if (addedServiceAcount) {
    addServiceConstraints(builder,volumes,containerPrivileged != null && containerPrivileged.booleanValue());
  }
  builder.addNewReplicationControllerItem().withNewMetadata().withName(KubernetesHelper.validateKubernetesId(replicationControllerName,"fabric8.replicationController.name")).withLabels(labelMap).withAnnotations(rcAnnotations).endMetadata().withNewSpec().withReplicas(replicaCount).withSelector(labelMap).withNewTemplate().withNewMetadata().withLabels(labelMap).withAnnotations(podSpecAnnotations).endMetadata().withNewSpec().withServiceAccountName(serviceAccount).addNewContainer().withName(getKubernetesContainerName()).withImage(getDockerImage()).withImagePullPolicy(getImagePullPolicy()).withEnv(getEnvironmentVariables()).withNewSecurityContext().withPrivileged(containerPrivileged).endSecurityContext().withPorts(getContainerPorts()).withVolumeMounts(volumeMounts).withLivenessProbe(getLivenessProbe()).withReadinessProbe(getReadinessProbe()).endContainer().withVolumes(volumes).endSpec().endTemplate().endSpec().endReplicationControllerItem();
  addPersistentVolumeClaims(builder,volumes);
  addServices(builder,labelMap);
  Template template=getTemplate();
  String iconUrl=getIconUrl();
  if (!template.getParameters().isEmpty() || Strings.isNotBlank(iconUrl)) {
    configureTemplateDescriptionAndIcon(template,iconUrl);
    builder=builder.addToTemplateItems(template);
  }
  KubernetesList kubernetesList=builder.build();
  Object result=Templates.combineTemplates(kubernetesList);
  if (result instanceof Template) {
    Template resultTemplate=(Template)result;
    configureTemplateDescriptionAndIcon(resultTemplate,iconUrl);
    if (pureKubernetes) {
      try {
        result=applyTemplates(resultTemplate);
      }
 catch (      IOException e) {
        throw new MojoExecutionException("Failed to process template locally " + e,e);
      }
    }
  }
  try {
    if (pureKubernetes) {
      result=filterPureKubernetes(result);
    }
    ObjectMapper mapper=new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
    String generated=mapper.writeValueAsString(result);
    Files.writeToFile(kubernetesJson,generated,Charset.defaultCharset());
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Failed to generate Kubernetes JSON.",e);
  }
}
