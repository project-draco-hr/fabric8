{
  if (Strings.isNullOrBlank(zipTemplate)) {
    throw new MojoExecutionException("No fabric8.zipTemplate specified so cannot generate the Kubernetes JSON file!");
  }
 else {
    InputStream in=loadPluginResource(zipTemplate);
    if (in == null) {
      throw new MojoExecutionException("Could not find template: " + zipTemplate + " on the ClassPath when trying to generate the Kubernetes JSON!");
    }
    ParserContext parserContext=new ParserContext();
    Map<String,Object> variables=new HashMap<>();
    MavenProject project=getProject();
    Properties properties=project.getProperties();
    Set<Map.Entry<Object,Object>> entries=properties.entrySet();
    for (    Map.Entry<Object,Object> entry : entries) {
      Object key=entry.getKey();
      Object value=entry.getValue();
      if (key instanceof String) {
        String keyText=key.toString();
        keyText=keyText.replace('.','_');
        variables.put(keyText,value);
      }
    }
    addIfNotDefined(variables,"fabric8_kubernetes_id",kubernetesId);
    addIfNotDefined(variables,"fabric8_kubernetes_name",getKubernetesName());
    Map<String,String> labels=getLabels();
    Map<String,String> ports=getPorts();
    variables.put("project",project);
    variables.put("labels",labels);
    variables.put("ports",ports);
    try {
      CompiledTemplate compiledTemplate=TemplateCompiler.compileTemplate(in,parserContext);
      String answer=TemplateRuntime.execute(compiledTemplate,parserContext,variables).toString();
      Files.writeToFile(kubernetesJson,answer,Charset.defaultCharset());
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Failed to generate Kubernetes JSON from template " + zipTemplate + ". "+ e,e);
    }
  }
}
