{
  MavenProject project=getProject();
  Map<String,String> labelMap=getLabels();
  String name=getKubernetesName();
  if (labelMap.isEmpty() && Strings.isNotBlank(name)) {
    labelMap.put("component",name);
  }
  if (!labelMap.containsKey("provider") && Strings.isNotBlank(provider)) {
    labelMap.put("provider",provider);
  }
  KubernetesListBuilder builder=new KubernetesListBuilder().addNewReplicationControllerItem().withNewMetadata().withName(KubernetesHelper.validateKubernetesId(replicationControllerName,"fabric8.replicationController.name")).withLabels(labelMap).endMetadata().withNewSpec().withReplicas(replicaCount).withSelector(labelMap).withNewTemplate().withNewMetadata().withLabels(labelMap).endMetadata().withNewSpec().withServiceAccount(serviceAccount).addNewContainer().withName(getKubernetesContainerName()).withImage(getDockerImage()).withImagePullPolicy(getImagePullPolicy()).withEnv(getEnvironmentVariables()).withNewSecurityContext().withPrivileged(getContainerPrivileged()).endSecurityContext().withPorts(getContainerPorts()).withVolumeMounts(getVolumeMounts()).withLivenessProbe(getLivenessProbe()).withReadinessProbe(getReadinessProbe()).endContainer().withVolumes(getVolumes()).endSpec().endTemplate().endSpec().endReplicationControllerItem();
  if (serviceName != null) {
    ServiceBuilder serviceBuilder=new ServiceBuilder().withNewMetadata().withName(serviceName).withLabels(labelMap).endMetadata();
    ServiceFluent<ServiceBuilder>.SpecNested<ServiceBuilder> serviceSpecBuilder=serviceBuilder.withNewSpec().withSelector(labelMap);
    List<ServicePort> servicePorts=getServicePorts();
    System.out.println("Generated ports: " + servicePorts);
    boolean hasPorts=servicePorts != null & !servicePorts.isEmpty();
    if (hasPorts) {
      serviceSpecBuilder.withPorts(servicePorts);
    }
 else {
      serviceSpecBuilder.withPortalIP("None");
    }
    serviceSpecBuilder.endSpec();
    if (headlessServices || hasPorts) {
      builder=builder.addToServiceItems(serviceBuilder.build());
    }
  }
  Template template=getTemplate();
  String iconUrl=getIconUrl();
  if (!template.getParameters().isEmpty() || Strings.isNotBlank(iconUrl)) {
    configureTemplateDescriptionAndIcon(template,iconUrl);
    builder=builder.addToTemplateItems(template);
  }
  KubernetesList kubernetesList=builder.build();
  Object result=Templates.combineTemplates(kubernetesList);
  if (result instanceof Template) {
    Template resultTemplate=(Template)result;
    configureTemplateDescriptionAndIcon(resultTemplate,iconUrl);
  }
  try {
    ObjectMapper mapper=new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
    String generated=mapper.writeValueAsString(result);
    Files.writeToFile(kubernetesJson,generated,Charset.defaultCharset());
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Failed to generate Kubernetes JSON.",e);
  }
}
