{
  DeploymentConfigBuilder builder=new DeploymentConfigBuilder();
  String name=getName(replicationController);
  if (Strings.isNotBlank(name)) {
    name=Strings.stripSuffix(name,"-controller");
  }
  if (Strings.isNullOrBlank(name)) {
    name=getProject().getArtifactId();
  }
  String deploymentName=name;
  String imageStream=name;
  Map<String,String> labels=KubernetesHelper.getLabels(replicationController);
  builder=builder.withNewMetadata().withName(deploymentName).withLabels(labels).endMetadata();
  ReplicationControllerSpec spec=replicationController.getSpec();
  if (spec != null) {
    List<String> containerNames=new ArrayList<>();
    PodTemplateSpec podTemplateSpec=spec.getTemplate();
    if (podTemplateSpec != null) {
      PodSpec podSpec=podTemplateSpec.getSpec();
      if (podSpec != null) {
        List<Container> containers=podSpec.getContainers();
        if (containers != null) {
          for (          Container container : containers) {
            String containerName=container.getName();
            if (Strings.isNotBlank(containerName)) {
              containerNames.add(containerName);
            }
          }
        }
      }
    }
    getOrAddImageStream(list,imageStream,labels);
    builder=builder.withNewSpec().withTemplate(podTemplateSpec).withReplicas(spec.getReplicas()).withSelector(spec.getSelector()).withNewStrategy().withType(deploymentStrategy).endStrategy().addNewTrigger().withType("ImageChange").withNewImageChangeParams().withAutomatic(true).withContainerNames(containerNames).withNewFrom().withName(imageStream + ":" + lastTriggeredImageTag).endFrom().withLastTriggeredImage(lastTriggeredImageTag).endImageChangeParams().endTrigger().endSpec();
  }
  DeploymentConfig config=builder.build();
  list.add(config);
}
