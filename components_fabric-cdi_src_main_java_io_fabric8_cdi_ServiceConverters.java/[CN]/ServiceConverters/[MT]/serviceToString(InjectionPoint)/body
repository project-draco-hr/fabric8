{
  Annotated annotated=injectionPoint.getAnnotated();
  Service service=annotated.getAnnotation(Service.class);
  io.fabric8.kubernetes.api.model.Service srv=null;
  String id=service.value();
  String namespace=Systems.getEnvVarOrSystemProperty(KUBERNETES_NAMESPACE,(String)null);
  String serviceHost=hostOfService(id);
  String servicePort=portOfService(id);
  String serviceProtocol=protocolOfService(id,servicePort);
  if (Strings.isNotBlank(serviceHost) && Strings.isNotBlank(servicePort) && Strings.isNotBlank(serviceProtocol)) {
    return serviceProtocol + "://" + serviceHost+ ":"+ servicePort;
  }
 else   if (Strings.isNotBlank(namespace)) {
    srv=KUBERNETES.getService(service.value(),namespace);
  }
 else {
    for (    io.fabric8.kubernetes.api.model.Service s : KUBERNETES.getServices().getItems()) {
      if (s.getId().equals(service.value())) {
        srv=s;
        break;
      }
    }
  }
  return (srv.getProtocol() + "://" + srv.getPortalIP()+ ":"+ srv.getPort()).toLowerCase();
}
