{
  MavenPluginBuilder plugin=MavenPluginBuilder.create().setCoordinate(createCoordinate("org.jolokia","docker-maven-plugin",VersionHelper.dockerVersion()));
  ConfigurationElement cfgName=ConfigurationElementBuilder.create().setName("name").setText("${docker.image}");
  ConfigurationElement cfgFrom=ConfigurationElementBuilder.create().setName("from").setText("${docker.from}");
  ConfigurationElement cfgDescriptorRef=ConfigurationElementBuilder.create().setName("descriptorRef").setText("${docker.assemblyDescriptorRef}");
  ConfigurationElement cfgAssembly=ConfigurationElementBuilder.create().setName("assembly");
  cfgAssembly.getChildren().add(cfgDescriptorRef);
  ConfigurationElement cfgBuild=ConfigurationElementBuilder.create().setName("build");
  cfgBuild.getChildren().add(cfgFrom);
  cfgBuild.getChildren().add(cfgAssembly);
  Map<String,String> envs=new LinkedHashMap<>();
  boolean springBoot=hasSpringBootMavenPlugin(project);
  String packaging=getProjectPackaging(project);
  boolean war=packaging != null && packaging.equals("war");
  boolean bundle=packaging != null && packaging.equals("bundle");
  boolean jar=packaging != null && packaging.equals("jar");
  if (springBoot) {
    envs.put("JAR","${project.artifactId}-${project.version}.war");
    envs.put("JAVA_OPTIONS","-Djava.security.egd=/dev/./urandom");
  }
 else   if (war) {
    envs.put("CATALINA_OPTS","-javaagent:/opt/tomcat/jolokia-agent.jar=host=0.0.0.0,port=8778,policyLocation=jar:file:///maven/ROOT.war!/WEB-INF/classes/jolokia-access.xml");
  }
 else   if (jar && main != null) {
    envs.put("MAIN",main);
  }
  if (!envs.isEmpty()) {
    ConfigurationElement cfgEnv=ConfigurationElementBuilder.create().setName("env");
    cfgBuild.getChildren().add(cfgEnv);
    for (    Map.Entry<String,String> env : envs.entrySet()) {
      ConfigurationElement cfg=ConfigurationElementBuilder.create().setName(env.getKey()).setText(env.getValue());
      cfgEnv.getChildren().add(cfg);
    }
  }
  ConfigurationElement cfgImage=ConfigurationElementBuilder.create().setName("image");
  cfgImage.getChildren().add(cfgName);
  cfgImage.getChildren().add(cfgBuild);
  ConfigurationElement cfgImages=ConfigurationElementBuilder.create().setName("images");
  cfgImages.getChildren().add(cfgImage);
  setupDockerProperties(project,fromImage);
  MavenPluginFacet pluginFacet=project.getFacet(MavenPluginFacet.class);
  plugin.createConfiguration().addConfigurationElement(cfgImages);
  pluginFacet.addPlugin(plugin);
}
