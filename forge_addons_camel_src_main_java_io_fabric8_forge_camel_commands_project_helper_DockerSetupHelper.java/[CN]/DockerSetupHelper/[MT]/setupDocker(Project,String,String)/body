{
  MavenPluginBuilder plugin=MavenPluginBuilder.create().setCoordinate(createCoordinate("org.jolokia","docker-maven-plugin",VersionHelper.dockerVersion()));
  ConfigurationElement cfgName=ConfigurationElementBuilder.create().setName("name").setText("${docker.image}");
  ConfigurationElement cfgFrom=ConfigurationElementBuilder.create().setName("from").setText("${docker.from}");
  ConfigurationElement cfgDescriptorRef=ConfigurationElementBuilder.create().setName("descriptorRef").setText("${docker.assemblyDescriptorRef}");
  ConfigurationElement cfgAssembly=ConfigurationElementBuilder.create().setName("assembly");
  cfgAssembly.getChildren().add(cfgDescriptorRef);
  ConfigurationElement cfgBuild=ConfigurationElementBuilder.create().setName("build");
  cfgBuild.getChildren().add(cfgFrom);
  cfgBuild.getChildren().add(cfgAssembly);
  if (isJarImage(fromImage) && main != null) {
    ConfigurationElement cfgMain=ConfigurationElementBuilder.create().setName("MAIN").setText("${docker.env.MAIN}");
    ConfigurationElement cfgEnv=ConfigurationElementBuilder.create().setName("env");
    cfgEnv.getChildren().add(cfgMain);
    cfgBuild.getChildren().add(cfgMain);
  }
  ConfigurationElement cfgImage=ConfigurationElementBuilder.create().setName("image");
  cfgImage.getChildren().add(cfgName);
  cfgImage.getChildren().add(cfgBuild);
  ConfigurationElement cfgImages=ConfigurationElementBuilder.create().setName("images");
  cfgImages.getChildren().add(cfgImage);
  setupDockerProperties(project,fromImage,main);
  MavenPluginFacet pluginFacet=project.getFacet(MavenPluginFacet.class);
  plugin.createConfiguration().addConfigurationElement(cfgImages);
  pluginFacet.addPlugin(plugin);
}
