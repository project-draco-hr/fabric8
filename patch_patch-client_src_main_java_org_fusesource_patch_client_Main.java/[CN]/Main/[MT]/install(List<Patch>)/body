{
  boolean finished=true;
  for (  Patch patch : patches) {
    finished&=patch.patchFile.isDone();
  }
  if (!finished) {
    System.out.println("Waiting for downloads to finish ...");
    for (    Patch patch : patches) {
      patch.patchFile.get();
    }
  }
  System.out.println("Connecting to the local instance:");
  String host="localhost";
  String port=readLine("Port","8101");
  String user=readLine("User","admin");
  String pass=readLine("Password","admin",true);
  StringBuilder sb=new StringBuilder();
  sb.append("Installing patches on local instance (port ").append(port).append("): ");
  boolean first=true;
  for (  Patch p : patches) {
    if (first) {
      first=false;
    }
 else {
      sb.append(", ");
    }
    sb.append(p.metadata.getProperty("id"));
  }
  audit(sb.toString());
  String version=getVersion();
  String osgiVersion=VersionCleaner.clean(version);
  String script="# Helper methods\n" + "or = { _v = false ; each ( \"$args\" split \" \" ) { if { new java.lang.Boolean \"$it\" } { _v = true } } ; $_v }\n" + "and = { _v = true ; each ( \"$args\" split \" \" ) { if { new java.lang.Boolean \"$it\" } { } { _v = false } } ; $_v }\n"+ "not = { _v1 = $1 ; if { $_v1 } { false } { true } }\n"+ "lesser = { if { (($1 compareTo $2) compareTo (new java.lang.Integer 0)) equals (new java.lang.Integer -1) } { true } { false } }\n"+ "# Check if the patch-core bundle is installed\n"+ "bundle = null\n"+ "found = false\n"+ "each  ($.context bundles) { \n"+ "  if  { ($it symbolicName) equals org.fusesource.patch.patch-core } { \n"+ "    bundle = $it\n"+ "    found = true \n"+ "  }\n"+ "}\n"+ "# Install patch-core bundle if not already available\n"+ "if { $found } {\n"+ "  v1 = ($bundle version)\n"+ "  v2 = (new org.osgi.framework.Version " + osgiVersion + ")\n"+ "  if { or ( lesser ($v1 major) ($v2 major) ) "+ "          ( lesser ($v1 minor) ($v2 minor) ) "+ "          ( lesser ($v1 micro) ($v2 micro) ) "+ "          ( ($v2 qualifier) endsWith \"SNAPSHOT\" ) } {\n"+ "    echo 'An older patch-core bundle has been found, installing a newer one.'\n"+ "    $bundle uninstall \n"+ "    bundle = ($.context installBundle mvn:org.fusesource.patch/patch-core/"+ version+ ")\n"+ "    $bundle start\n"+ "  } {\n"+ "    echo 'Found an up-to-date patch-core bundle.'\n"+ "  }\n"+ "} {\n"+ "    echo 'Installing patch-core bundle.'\n"+ "  bundle = ($.context installBundle mvn:org.fusesource.patch/patch-core/"+ version+ ")\n"+ "  $bundle start\n"+ "}\n"+ "# Create patch service\n"+ "service = (new ($bundle loadClass org.fusesource.patch.impl.ServiceImpl) $.context)\n";
  for (  Patch patch : patches) {
    script+="$service download (new java.net.URL " + patch.patchFile.get().toURI().toURL().toExternalForm() + ")\n";
  }
  script+="echo 'Installing patches ...'\n";
  script+="$service cliInstall ";
  for (  Patch patch : patches) {
    script+=patch.metadata.getProperty("id") + " ";
  }
  SshClient client=null;
  try {
    client=SshClient.setUpDefaultClient();
    client.start();
    ConnectFuture future=client.connect(host,Integer.parseInt(port));
    ClientSession session=future.await().getSession();
    if (!session.authPassword(user,pass).await().isSuccess()) {
      System.err.println("Authentication failure, aborting.");
      return;
    }
    ClientChannel channel=session.createChannel("exec",script);
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    ByteArrayOutputStream err=new ByteArrayOutputStream();
    channel.setIn(new ByteArrayInputStream(new byte[0]));
    channel.setOut(out);
    channel.setErr(err);
    channel.open();
    channel.waitFor(ClientChannel.CLOSED,0);
    System.out.println(out.toString());
    System.err.println(err.toString());
  }
  finally {
    try {
      client.stop();
    }
 catch (    Throwable t) {
    }
  }
}
