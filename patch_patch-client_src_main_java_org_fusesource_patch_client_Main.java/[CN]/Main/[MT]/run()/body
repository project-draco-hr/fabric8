{
  ConsoleReader reader=new ConsoleReader(System.in,System.out);
  System.out.println("Checking repositories ...");
  final List<Patch> patches=getPossiblePatches();
  System.out.println("Downloading patch metadatas ...");
  downloadPatchMetadata(patches,cache);
  System.out.println("Downloading missing patches in the background ...");
  downloadPatches(patches,cache);
  while (true) {
    System.out.println();
    System.out.println("Available patches:");
    printPatches(patches);
    System.out.println("Which patches do you want to apply?");
    System.out.println("  Specify one or more patch or wildcard expressions separated by spaces.");
    System.out.println("  Full syntax for a patch is [artifact]/[version]");
    System.out.println("  Enter 'exit' to abort.");
    String line;
    do {
      line=console.readLine("> ");
    }
 while (line == null || line.isEmpty());
    if (line.trim().toLowerCase().equals("exit")) {
      return;
    }
    List<Patch> toInstall=new ArrayList<Patch>();
    List<Pattern> patterns=new ArrayList<Pattern>();
    for (    String wildcard : line.split(" ")) {
      patterns.add(Pattern.compile(wildcardToRegex(wildcard)));
    }
    for (    Patch patch : patches) {
      if (patch.metadata != null) {
        String id=patch.artifact + "/" + patch.version;
        for (        Pattern pattern : patterns) {
          if (pattern.matcher(id).matches()) {
            toInstall.add(patch);
            break;
          }
        }
      }
    }
    if (toInstall.isEmpty()) {
      System.out.println("No matching patches");
    }
 else {
      System.out.println("List of patches to install:");
      printPatches(toInstall);
      line=console.readLine("Do you want to install these patches (yes/no): ");
      if (line == null || !line.trim().toLowerCase().equals("yes")) {
        System.out.println("Aborting ...");
      }
 else {
        System.out.println("Installing patches ...");
        install(toInstall);
      }
    }
  }
}
