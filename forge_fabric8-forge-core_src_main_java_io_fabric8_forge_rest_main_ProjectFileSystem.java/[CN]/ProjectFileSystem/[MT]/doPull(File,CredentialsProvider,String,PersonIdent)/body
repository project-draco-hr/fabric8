{
  try {
    FileRepositoryBuilder builder=new FileRepositoryBuilder();
    Repository repository=builder.setGitDir(gitFolder).readEnvironment().findGitDir().build();
    Git git=new Git(repository);
    File projectFolder=repository.getDirectory();
    StoredConfig config=repository.getConfig();
    String url=config.getString("remote",remote,"url");
    if (Strings.isNullOrBlank(url)) {
      LOG.warn("No remote repository url for " + branch + " defined for the git repository at "+ projectFolder.getCanonicalPath()+ " so cannot pull");
    }
    String mergeUrl=config.getString("branch",branch,"merge");
    if (Strings.isNullOrBlank(mergeUrl)) {
      LOG.warn("No merge spec for branch." + branch + ".merge in the git repository at "+ projectFolder.getCanonicalPath()+ " so not doing a pull");
    }
    LOG.info("Stashing local changes to the repo");
    boolean hasHead=true;
    try {
      git.log().all().call();
      hasHead=git.getRepository().getAllRefs().containsKey("HEAD");
    }
 catch (    NoHeadException e) {
      hasHead=false;
    }
    if (hasHead) {
      try {
        git.stashCreate().setPerson(personIdent).setWorkingDirectoryMessage("Stash before a write").setRef("HEAD").call();
      }
 catch (      Throwable e) {
        LOG.error("Failed to stash changes: " + e,e);
        Throwable cause=e.getCause();
        if (cause != null && cause != e) {
          LOG.error("Cause: " + cause,cause);
        }
      }
    }
    LOG.info("Performing a pull in git repository " + projectFolder.getCanonicalPath() + " on remote URL: "+ url);
    git.pull().setCredentialsProvider(cp).setRebase(true).call();
  }
 catch (  Throwable e) {
    LOG.error("Failed to pull from the remote git repo with credentials " + cp + " due: "+ e.getMessage()+ ". This exception is ignored.",e);
  }
}
