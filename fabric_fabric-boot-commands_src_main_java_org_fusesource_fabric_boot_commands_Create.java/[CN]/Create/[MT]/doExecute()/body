{
  if (containers == null || containers.isEmpty()) {
    containers=Arrays.asList(System.getProperty("karaf.name"));
  }
  if (clean) {
    service.clean();
  }
  if (!noImport && importDir != null) {
    System.setProperty(ZooKeeperClusterService.PROFILES_AUTOIMPORT_PATH,importDir);
  }
  if (globalResolver != null) {
    System.setProperty(ZkDefs.GLOBAL_RESOLVER_PROPERTY,globalResolver);
  }
  if (resolver != null) {
    System.setProperty(ZkDefs.LOCAL_RESOLVER_PROPERTY,resolver);
  }
  if (manualIp != null) {
    System.setProperty(ZkDefs.MANUAL_IP,manualIp);
  }
  if (profile != null) {
    System.setProperty(ZooKeeperClusterService.PROFILE,profile);
  }
  if (nonManaged) {
    System.setProperty(ZooKeeperClusterService.AGENT_AUTOSTART,"false");
  }
 else {
    System.setProperty(ZooKeeperClusterService.AGENT_AUTOSTART,"true");
  }
  System.setProperty(ZkDefs.MINIMUM_PORT,String.valueOf(minimumPort));
  System.setProperty(ZkDefs.MAXIMUM_PORT,String.valueOf(maximumPort));
  newUser=newUser != null ? newUser : ShellUtils.retrieveFabricUser(session);
  newUserPassword=newUserPassword != null ? newUserPassword : ShellUtils.retrieveFabricUserPassword(session);
  Properties userProps=new Properties(new File(System.getProperty("karaf.home") + "/etc/users.properties"));
  if (userProps.isEmpty()) {
    String[] credentials=promptForNewUser(newUser,newUserPassword);
    newUser=credentials[0];
    newUserPassword=credentials[1];
  }
 else   if (newUser == null || newUserPassword == null) {
    newUser=(String)userProps.keySet().iterator().next();
    newUserPassword=(String)userProps.get(newUser);
    if (newUserPassword.contains(ROLE_DELIMITER)) {
      newUserPassword=newUserPassword.substring(0,newUserPassword.indexOf(ROLE_DELIMITER));
    }
  }
  StringBuilder sb=new StringBuilder();
  ShellUtils.storeFabricCredentials(session,newUser,newUserPassword);
  if (zookeeperPassword == null && !generateZookeeperPassword) {
    sb.append("Zookeeper password not specified or generated.\n");
    sb.append("You can use the --zookeeper-password option to specify one.\n");
    sb.append("Or you can use the --generate-zookeeper-password to have fabric generate one for you.\n");
    sb.append("Reusing users ").append(newUser).append(" password:");
    zookeeperPassword=newUserPassword;
  }
 else   if (generateZookeeperPassword) {
    sb.append("Generated zookeeper password:");
  }
 else {
    sb.append("Using specified zookeeper password:");
  }
  CreateEnsembleOptions options=CreateEnsembleOptions.build().zookeeperPassword(zookeeperPassword).user(newUser,newUserPassword + ROLE_DELIMITER + newUserRole);
  options.getUsers().putAll(userProps);
  if (containers != null && !containers.isEmpty()) {
    service.createCluster(containers,options);
  }
  sb.append(options.getZookeeperPassword()).append("\n");
  sb.append("You can retrieve the zookeeper password at any time using the fabric:ensemble-password command.");
  System.out.println(sb.toString());
  return null;
}
