{
  StringBuilder jvmOptsBuilder=new StringBuilder();
  String zkPasswordEncode=System.getProperty("zookeeper.password.encode","true");
  jvmOptsBuilder.append("-server -Dcom.sun.management.jmxremote -Dorg.jboss.gravia.repository.storage.dir=data/repository").append(options.getZookeeperUrl() != null ? " -Dzookeeper.url=\"" + options.getZookeeperUrl() + "\"" : "").append(zkPasswordEncode != null ? " -Dzookeeper.password.encode=\"" + zkPasswordEncode + "\"" : "").append(options.getZookeeperPassword() != null ? " -Dzookeeper.password=\"" + options.getZookeeperPassword() + "\"" : "");
  if (options.getJvmOpts() == null || !options.getJvmOpts().contains("-Xmx")) {
    jvmOptsBuilder.append(" -Xmx512m");
  }
  if (options.isEnsembleServer()) {
    jvmOptsBuilder.append(" ").append(CreateEnsembleOptions.ENSEMBLE_AUTOSTART + "=true");
  }
  if (options.getJvmOpts() != null && !options.getJvmOpts().isEmpty()) {
    jvmOptsBuilder.append(" ").append(options.getJvmOpts());
  }
  if (options.getJvmOpts() == null || !options.getJvmOpts().contains("-XX:+UnlockDiagnosticVMOptions -XX:+UnsyncloadClass")) {
    jvmOptsBuilder.append(" -XX:+UnlockDiagnosticVMOptions -XX:+UnsyncloadClass");
  }
  if (options.getBindAddress() != null && !options.getBindAddress().isEmpty()) {
    jvmOptsBuilder.append(" -D" + ZkDefs.BIND_ADDRESS + "="+ options.getBindAddress());
  }
  if (options.getResolver() != null && !options.getResolver().isEmpty()) {
    jvmOptsBuilder.append(" -D" + ZkDefs.LOCAL_RESOLVER_PROPERTY + "="+ options.getResolver());
  }
  if (options.getManualIp() != null && !options.getManualIp().isEmpty()) {
    jvmOptsBuilder.append(" -D" + ZkDefs.MANUAL_IP + "="+ options.getManualIp());
  }
  FabricService fservice=fabricService.get();
  Map<String,String> dataStoreProperties=new HashMap<String,String>(options.getDataStoreProperties());
  dataStoreProperties.put(DataStore.DATASTORE_TYPE_PROPERTY,fservice.getDataStore().getType());
  for (  Map.Entry<String,String> dataStoreEntries : options.getDataStoreProperties().entrySet()) {
    String key=dataStoreEntries.getKey();
    String value=dataStoreEntries.getValue();
    jvmOptsBuilder.append(" -D" + Constants.DATASTORE_TYPE_PID + "."+ key+ "="+ value);
  }
  Profile profile=parent.getVersion().getProfile("default");
  Profile defaultProfile=new ProfileOverlayImpl(profile,fservice.getEnvironment(),true,fservice);
  String featuresUrls=collectionAsString(defaultProfile.getRepositories());
  Set<String> features=new LinkedHashSet<String>();
  features.add("fabric-agent");
  features.add("fabric-git");
  String containerName=options.getName();
  PortService portService=fservice.getPortService();
  Set<Integer> usedPorts=portService.findUsedPortByHost(parent);
  CreateChildContainerMetadata metadata=new CreateChildContainerMetadata();
  metadata.setCreateOptions(options);
  metadata.setContainerName(containerName);
  int minimumPort=parent.getMinimumPort();
  int maximumPort=parent.getMaximumPort();
  fservice.getDataStore().setContainerAttribute(containerName,DataStore.ContainerAttribute.PortMin,String.valueOf(minimumPort));
  fservice.getDataStore().setContainerAttribute(containerName,DataStore.ContainerAttribute.PortMax,String.valueOf(maximumPort));
  inheritAddresses(fservice,parent.getId(),containerName,options);
  Container child=new ContainerImpl(parent,containerName,fservice){
    @Override public String getIp(){
      return parent.getIp();
    }
  }
;
  int sshFrom=mapPortToRange(Ports.DEFAULT_KARAF_SSH_PORT,minimumPort,maximumPort);
  int sshTo=mapPortToRange(Ports.DEFAULT_KARAF_SSH_PORT + 100,minimumPort,maximumPort);
  int sshPort=portService.registerPort(child,"org.apache.karaf.shell","sshPort",sshFrom,sshTo,usedPorts);
  int httpFrom=mapPortToRange(Ports.DEFAULT_HTTP_PORT,minimumPort,maximumPort);
  int httpTo=mapPortToRange(Ports.DEFAULT_HTTP_PORT + 100,minimumPort,maximumPort);
  portService.registerPort(child,"org.ops4j.pax.web","org.osgi.service.http.port",httpFrom,httpTo,usedPorts);
  int rmiServerFrom=mapPortToRange(Ports.DEFAULT_RMI_SERVER_PORT,minimumPort,maximumPort);
  int rmiServerTo=mapPortToRange(Ports.DEFAULT_RMI_SERVER_PORT + 100,minimumPort,maximumPort);
  int rmiServerPort=portService.registerPort(child,"org.apache.karaf.management","rmiServerPort",rmiServerFrom,rmiServerTo,usedPorts);
  int rmiRegistryFrom=mapPortToRange(Ports.DEFAULT_RMI_REGISTRY_PORT,minimumPort,maximumPort);
  int rmiRegistryTo=mapPortToRange(Ports.DEFAULT_RMI_REGISTRY_PORT + 100,minimumPort,maximumPort);
  int rmiRegistryPort=portService.registerPort(child,"org.apache.karaf.management","rmiRegistryPort",rmiRegistryFrom,rmiRegistryTo,usedPorts);
  try {
    adminService.createInstance(containerName,sshPort,rmiRegistryPort,rmiServerPort,null,jvmOptsBuilder.toString(),collectionAsString(features),featuresUrls);
    adminService.startInstance(containerName,null);
  }
 catch (  Throwable t) {
    metadata.setFailure(t);
  }
  return metadata;
}
