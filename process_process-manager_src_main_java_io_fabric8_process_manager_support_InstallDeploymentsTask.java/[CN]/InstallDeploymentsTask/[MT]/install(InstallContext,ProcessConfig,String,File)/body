{
  File baseDir=ProcessUtils.findInstallDir(installDir);
  String sharedLibraryPath=config.getSharedLibraryPath();
  String deployPath=config.getDeployPath();
  File libraryDir=new File(baseDir,sharedLibraryPath);
  File deployDir=new File(baseDir,deployPath);
  libraryDir.mkdirs();
  deployDir.mkdirs();
  Map<File,Long> deployChecksums=ChecksumUtils.loadInstalledChecksumCache(deployDir);
  Map<File,Long> libraryChecksums=ChecksumUtils.loadInstalledChecksumCache(libraryDir);
  SortedSet<String> sharedLibraries=new TreeSet<String>();
  SortedSet<String> deployments=new TreeSet<String>();
  Set<File> installedFiles=new HashSet<File>();
  Set<Map.Entry<String,File>> entries=javaArtifacts.entrySet();
  Set<File> filesToDelete=new HashSet<File>();
  filesToDelete.addAll(deployChecksums.keySet());
  filesToDelete.addAll(libraryChecksums.keySet());
  for (int i=0; i < 2; i++) {
    boolean deletePass=i == 0;
    for (    Map.Entry<String,File> entry : entries) {
      String uri=entry.getKey();
      File file=entry.getValue();
      String fileName=file.getName();
      File destDir;
      Map<File,Long> checksums;
      if (fileName.endsWith(".jar")) {
        destDir=deployDir;
        checksums=deployChecksums;
      }
 else {
        checksums=libraryChecksums;
        destDir=libraryDir;
      }
      File destFile=new File(destDir,fileName);
      Long checksum=checksums.get(destFile);
      if (deletePass) {
        filesToDelete.remove(destFile);
        if (checksum == null) {
          checksum=ChecksumUtils.checksumFile(file);
          checksums.put(destFile,checksum);
        }
      }
 else {
        FileChangeInfo changeInfo=installContext.createChangeInfo(destFile);
        LOG.debug("Copying file " + fileName + " to :  "+ destFile.getCanonicalPath());
        org.codehaus.plexus.util.FileUtils.copyFile(file,destFile);
        installContext.onFileWrite(destFile,changeInfo);
      }
    }
    if (deletePass) {
      for (      File fileToDelete : filesToDelete) {
        LOG.info("Removing: " + fileToDelete);
        deployChecksums.remove(fileToDelete);
        libraryChecksums.remove(fileToDelete);
        installContext.addRestartReason(fileToDelete);
        fileToDelete.delete();
      }
      ChecksumUtils.saveInstalledChecksumCache(deployDir,deployChecksums);
      ChecksumUtils.saveInstalledChecksumCache(libraryDir,libraryChecksums);
    }
  }
  LOG.info("Deployed " + deployments.size() + " deployment(s)");
  for (  String deployment : deployments) {
    LOG.info("   deployed: " + deployment);
  }
  LOG.info("Installed " + sharedLibraries.size() + " shared jar(s)");
  for (  String sharedLib : sharedLibraries) {
    LOG.info("   jar: " + sharedLib);
  }
}
