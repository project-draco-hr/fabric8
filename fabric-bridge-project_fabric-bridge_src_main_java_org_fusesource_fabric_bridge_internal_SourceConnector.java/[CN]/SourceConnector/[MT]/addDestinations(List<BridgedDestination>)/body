{
synchronized (lifecycleMonitor) {
    final Set<String> outboundDestinationNames=getOutboundDestinationNames();
    final List<BridgedDestination> newDestinations=new ArrayList<BridgedDestination>();
    for (    BridgedDestination destination : destinations) {
      if (!outboundDestinationNames.contains(destination.getName())) {
        newDestinations.add(destination);
      }
 else {
        LOG.warn("Ignoring destination " + destination.getName() + " as it already exists as an outbound destination");
      }
    }
    if (!isInitialized()) {
      outboundDestinations.getDestinations().addAll(newDestinations);
    }
 else {
      Map<BridgedDestination,AbstractMessageListenerContainer> newListenerMap=new HashMap<BridgedDestination,AbstractMessageListenerContainer>();
      for (      BridgedDestination destination : newDestinations) {
        try {
          newListenerMap.put(destination,createListenerContainer(destination));
        }
 catch (        Exception e) {
          final String msg="Error creating listener for new destination: " + destination;
          LOG.error(msg,e);
          for (          Entry<BridgedDestination,AbstractMessageListenerContainer> entry : newListenerMap.entrySet()) {
            try {
              entry.getValue().destroy();
            }
 catch (            Exception ex) {
              LOG.warn("Error destorying listener for " + entry.getKey(),ex);
            }
          }
          newListenerMap.clear();
          newDestinations.clear();
          throw new IllegalStateException(msg,e);
        }
      }
      outboundDestinations.getDestinations().addAll(newDestinations);
      listenerMap.putAll(newListenerMap);
      if (isRunning()) {
        start();
      }
    }
  }
}
