{
  updateStatus("downloading",null);
  Map<String,File> fabDownloads=downloadBundles(manager,Collections.<Feature>emptySet(),fabs,Collections.<String>emptySet());
  updateStatus("resolving",null);
  Map<String,FabBundleInfo> infos=new HashMap<String,FabBundleInfo>();
  for (  Map.Entry<String,File> entry : fabDownloads.entrySet()) {
    FabResolver resolver=fabResolverFactory.getResolver(entry.getValue().toURI().toURL());
    FabBundleInfo info=resolver.getInfo();
    for (    String name : info.getFeatures()) {
      Feature feature=search(name,repositories.values());
      if (feature == null) {
        throw new IllegalArgumentException("Unable to find feature " + name);
      }
      features.add(feature);
    }
    LOGGER.info("Fab: " + info.getUrl());
    infos.put(FAB_PROTOCOL + info.getUrl(),info);
  }
  Set<Feature> allFeatures=addFeatures(features,repositories.values());
  Set<String> featureFabs=new LinkedHashSet<String>();
  for (  Feature feature : allFeatures) {
    for (    BundleInfo bundleInfo : feature.getBundles()) {
      if (bundleInfo.getLocation().startsWith(FAB_PROTOCOL)) {
        String normalizedLocation=bundleInfo.getLocation().substring(FAB_PROTOCOL.length());
        if (!fabs.contains(normalizedLocation)) {
          featureFabs.add(normalizedLocation);
        }
      }
    }
  }
  if (!featureFabs.isEmpty()) {
    fabs.addAll(featureFabs);
    updateDeployment(fabResolverFactory,repositories,features,bundles,fabs,overrides);
    return;
  }
  updateStatus("downloading",null);
  Map<String,File> downloads=downloadBundles(manager,allFeatures,bundles,overrides);
  updateStatus("resolving",null);
  StdResolver resolver=new StdResolver(resolveOptionalImports);
  Collection<Resource> allResources=resolver.resolve(allFeatures,bundles,infos,overrides,downloads);
  updateStatus("installing",null,allResources,true);
  Map<Resource,Bundle> resToBnd=new HashMap<Resource,Bundle>();
  StringBuilder sb=new StringBuilder();
  sb.append("Configuration changed.  New bundles list:\n");
  for (  Resource bundle : allResources) {
    sb.append("  ").append(getUri(bundle)).append("\n");
  }
  LOGGER.info(sb.toString());
  Map<String,String> newCheckums=new HashMap<String,String>();
  List<Resource> toDeploy=new ArrayList<Resource>(allResources);
  List<Resource> toInstall=new ArrayList<Resource>();
  List<Bundle> toDelete=new ArrayList<Bundle>();
  Map<Bundle,Resource> toUpdate=new HashMap<Bundle,Resource>();
  if (checksums == null) {
    File file=bundleContext.getDataFile("checksums.properties");
    checksums=new Properties(file);
  }
  for (  Bundle bundle : systemBundleContext.getBundles()) {
    if (bundle.getSymbolicName() != null && bundle.getBundleId() != 0) {
      Resource resource=null;
      boolean update=false;
      for (      Resource res : toDeploy) {
        if (bundle.getSymbolicName().equals(getSymbolicName(res))) {
          if (bundle.getVersion().equals(getVersion(res))) {
            if (isUpdateable(res)) {
              InputStream is=null;
              try {
                is=getBundleInputStream(res,downloads,infos);
                long newCrc=ChecksumUtils.checksum(is);
                long oldCrc=checksums.containsKey(bundle.getLocation()) ? Long.parseLong((String)checksums.get(bundle.getLocation())) : 0l;
                if (newCrc != oldCrc) {
                  LOGGER.debug("New snapshot available for " + bundle.getLocation());
                  update=true;
                  newCheckums.put(bundle.getLocation(),Long.toString(newCrc));
                }
              }
  finally {
                if (is != null) {
                  is.close();
                }
              }
            }
            resource=res;
            break;
          }
        }
      }
      if (resource != null) {
        toDeploy.remove(resource);
        resToBnd.put(resource,bundle);
        if (update) {
          toUpdate.put(bundle,resource);
        }
      }
 else {
        toDelete.add(bundle);
      }
    }
  }
  for (  Resource resource : toDeploy) {
    TreeMap<Version,Bundle> matching=new TreeMap<Version,Bundle>();
    VersionRange range=getMicroVersionRange(getVersion(resource));
    for (    Bundle bundle : toDelete) {
      if (bundle.getSymbolicName().equals(getSymbolicName(resource)) && range.contains(bundle.getVersion())) {
        matching.put(bundle.getVersion(),bundle);
      }
    }
    if (!matching.isEmpty()) {
      Bundle bundle=matching.lastEntry().getValue();
      toUpdate.put(bundle,resource);
      toDelete.remove(bundle);
      resToBnd.put(resource,bundle);
    }
 else {
      toInstall.add(resource);
    }
  }
  Resource agentResource=toUpdate.get(bundleContext.getBundle());
  if (agentResource != null) {
    LOGGER.info("Updating agent");
    LOGGER.info("  " + getUri(agentResource));
    InputStream is=getBundleInputStream(agentResource,downloads,infos);
    Bundle bundle=bundleContext.getBundle();
    if (newCheckums.containsKey(bundle.getLocation())) {
      checksums.put(bundle.getLocation(),newCheckums.get(bundle.getLocation()));
    }
    checksums.save();
    bundle.update(is);
    return;
  }
  LOGGER.info("Changes to perform:");
  LOGGER.info("  Bundles to uninstall:");
  for (  Bundle bundle : toDelete) {
    LOGGER.info("    " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
  }
  LOGGER.info("  Bundles to update:");
  for (  Map.Entry<Bundle,Resource> entry : toUpdate.entrySet()) {
    LOGGER.info("    " + entry.getKey().getSymbolicName() + " / "+ entry.getKey().getVersion()+ " with "+ getUri(entry.getValue()));
  }
  LOGGER.info("  Bundles to install:");
  for (  Resource resource : toInstall) {
    LOGGER.info("    " + getUri(resource));
  }
  Set<Bundle> toRefresh=new HashSet<Bundle>();
  LOGGER.info("Stopping bundles:");
  List<Bundle> toStop=new ArrayList<Bundle>();
  toStop.addAll(toUpdate.keySet());
  toStop.addAll(toDelete);
  while (!toStop.isEmpty()) {
    List<Bundle> bs=getBundlesToDestroy(toStop);
    for (    Bundle bundle : bs) {
      String hostHeader=(String)bundle.getHeaders().get(Constants.FRAGMENT_HOST);
      if (hostHeader == null && (bundle.getState() == Bundle.ACTIVE || bundle.getState() == Bundle.STARTING)) {
        LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
        bundle.stop(Bundle.STOP_TRANSIENT);
      }
      toStop.remove(bundle);
    }
  }
  LOGGER.info("Uninstalling bundles:");
  for (  Bundle bundle : toDelete) {
    LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
    bundle.uninstall();
    toRefresh.add(bundle);
  }
  LOGGER.info("Updating bundles:");
  for (  Map.Entry<Bundle,Resource> entry : toUpdate.entrySet()) {
    Bundle bundle=entry.getKey();
    Resource resource=entry.getValue();
    LOGGER.info("  " + getUri(resource));
    InputStream is=getBundleInputStream(resource,downloads,infos);
    bundle.update(is);
    toRefresh.add(bundle);
  }
  LOGGER.info("Installing bundles:");
  for (  Resource resource : toInstall) {
    LOGGER.info("  " + getUri(resource));
    InputStream is=getBundleInputStream(resource,downloads,infos);
    Bundle bundle=systemBundleContext.installBundle(getUri(resource),is);
    toRefresh.add(bundle);
    resToBnd.put(resource,bundle);
    if (bundle.getVersion().getQualifier().endsWith(SNAPSHOT) && !newCheckums.containsKey(bundle.getLocation())) {
      newCheckums.put(bundle.getLocation(),Long.toString(ChecksumUtils.checksum(getBundleInputStream(resource,downloads,infos))));
    }
  }
  if (!newCheckums.isEmpty()) {
    for (    String key : newCheckums.keySet()) {
      checksums.put(key,newCheckums.get(key));
    }
    checksums.save();
  }
  findBundlesWithOptionalPackagesToRefresh(toRefresh);
  findBundlesWithFragmentsToRefresh(toRefresh);
  updateStatus("finalizing",null);
  LOGGER.info("Refreshing bundles:");
  for (  Bundle bundle : toRefresh) {
    LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
  }
  if (!toRefresh.isEmpty()) {
    refreshPackages(toRefresh);
  }
  List<Throwable> exceptions=new ArrayList<Throwable>();
  LOGGER.info("Starting bundles:");
  for (  Resource resource : requirementSort.sort(allResources)) {
    Bundle bundle=resToBnd.get(resource);
    String hostHeader=(String)bundle.getHeaders().get(Constants.FRAGMENT_HOST);
    if (hostHeader == null && bundle.getState() != Bundle.ACTIVE) {
      LOGGER.info("  " + bundle.getSymbolicName() + " / "+ bundle.getVersion());
      try {
        bundle.start();
      }
 catch (      BundleException e) {
        exceptions.add(e);
      }
    }
  }
  if (!exceptions.isEmpty()) {
    throw new MultiException("Error updating agent",exceptions);
  }
  LOGGER.info("Done.");
}
