{
  Set<Bundle> bundles=new HashSet<Bundle>(Arrays.asList(bundleContext.getBundles()));
  bundles.removeAll(toRefresh);
  if (bundles.isEmpty()) {
    return;
  }
  Map<Bundle,List<Clause>> imports=new HashMap<Bundle,List<Clause>>();
  for (Iterator<Bundle> it=bundles.iterator(); it.hasNext(); ) {
    Bundle b=it.next();
    String importsStr=(String)b.getHeaders().get(Constants.IMPORT_PACKAGE);
    List<Clause> importsList=getOptionalImports(importsStr);
    if (importsList.isEmpty()) {
      it.remove();
    }
 else {
      imports.put(b,importsList);
    }
  }
  if (bundles.isEmpty()) {
    return;
  }
  List<Clause> exports=new ArrayList<Clause>();
  for (  Bundle b : toRefresh) {
    if (b.getState() != Bundle.UNINSTALLED) {
      String exportsStr=(String)b.getHeaders().get(Constants.EXPORT_PACKAGE);
      if (exportsStr != null) {
        Clause[] exportsList=Parser.parseHeader(exportsStr);
        exports.addAll(Arrays.asList(exportsList));
      }
    }
  }
  for (Iterator<Bundle> it=bundles.iterator(); it.hasNext(); ) {
    Bundle b=it.next();
    List<Clause> importsList=imports.get(b);
    for (Iterator<Clause> itpi=importsList.iterator(); itpi.hasNext(); ) {
      Clause pi=itpi.next();
      boolean matching=false;
      for (      Clause pe : exports) {
        if (pi.getName().equals(pe.getName())) {
          String evStr=pe.getAttribute(Constants.VERSION_ATTRIBUTE);
          String ivStr=pi.getAttribute(Constants.VERSION_ATTRIBUTE);
          Version exported=evStr != null ? Version.parseVersion(evStr) : Version.emptyVersion;
          VersionRange imported=ivStr != null ? VersionRange.parseVersionRange(ivStr) : VersionRange.ANY_VERSION;
          if (imported.contains(exported)) {
            matching=true;
            break;
          }
        }
      }
      if (!matching) {
        itpi.remove();
      }
    }
    if (importsList.isEmpty()) {
      it.remove();
    }
  }
  toRefresh.addAll(bundles);
}
