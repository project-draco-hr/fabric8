{
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
    curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
    Provision.containerAlive(Arrays.<Container>asList(new ContainerImpl(null,"root",fabricService)),PROVISION_TIMEOUT);
    Container[] containers=fabricService.getContainers();
    Assert.assertNotNull(containers);
    Assert.assertEquals("Expected to find 1 container",1,containers.length);
    Assert.assertEquals("Expected to find the root container","root",containers[0].getId());
  }
  finally {
    fabricProxy.close();
  }
  ConfigurationAdmin configurationAdmin=ServiceLocator.awaitService(bundleContext,ConfigurationAdmin.class);
  org.osgi.service.cm.Configuration configuration=configurationAdmin.getConfiguration(Constants.ZOOKEEPER_CLIENT_PID);
  Dictionary<String,Object> dictionary=configuration.getProperties();
  Assert.assertNotNull("Expected a generated zookeeper password",dictionary.get("zookeeper.password"));
  Assert.assertTrue(String.valueOf(dictionary.get("zookeeper.url")).endsWith("2182"));
  LoginContext loginContext=new LoginContext(REALM,new CallbackHandler(){
    @Override public void handle(    Callback[] callbacks) throws IOException, UnsupportedCallbackException {
      for (int i=0; i < callbacks.length; i++) {
        if (callbacks[i] instanceof NameCallback) {
          ((NameCallback)callbacks[i]).setName(USERNAME);
        }
 else         if (callbacks[i] instanceof PasswordCallback) {
          ((PasswordCallback)callbacks[i]).setPassword(PASSOWRD.toCharArray());
        }
 else {
          throw new UnsupportedCallbackException(callbacks[i]);
        }
      }
    }
  }
);
  loginContext.login();
}
