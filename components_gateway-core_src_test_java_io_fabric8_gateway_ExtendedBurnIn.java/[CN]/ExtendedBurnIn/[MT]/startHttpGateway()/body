{
  if (restEndpointServer != null) {
    LoadBalancer loadBalancer=new RoundRobinLoadBalancer();
    ServiceDTO serviceDetails=new ServiceDTO();
    serviceDetails.setContainer("local");
    serviceDetails.setVersion("1");
    mappedServices.put("/hello/world",new MappedServices("http://localhost:8181",serviceDetails,loadBalancer,false));
  }
  DetectingGatewayWebSocketHandler websocketHandler=new DetectingGatewayWebSocketHandler();
  final HttpGateway httpGateway=new HttpGateway(){
    @Override public void addMappingRuleConfiguration(    HttpMappingRule mappingRule){
    }
    @Override public void removeMappingRuleConfiguration(    HttpMappingRule mappingRule){
    }
    @Override public Map<String,IMappedServices> getMappedServices(){
      return mappedServices;
    }
    @Override public boolean isEnableIndex(){
      return true;
    }
    @Override public InetSocketAddress getLocalAddress(){
      return new InetSocketAddress("0.0.0.0",8080);
    }
    @Override public void addCallDetailRecord(    CallDetailRecord cdr){
    }
    @Override public ApiManager getApiManager(){
      return apiManager;
    }
    @Override public String getGatewayUrl(){
      return "http:/" + getLocalAddress();
    }
  }
;
  websocketHandler.setPathPrefix("");
  Handler<HttpServerRequest> requestHandler=null;
  if (apiManager.isApiManagerEnabled()) {
    requestHandler=((ApiManagerService)apiManager.getService()).createApiManagerHttpGatewayHandler();
  }
 else {
    requestHandler=new HttpGatewayHandler(vertx,httpGateway);
  }
  httpGatewayServer=new HttpGatewayServer(vertx,websocketHandler,8080,requestHandler);
  httpGatewayServer.setHost("localhost");
  httpGatewayServer.init();
  return httpGatewayServer;
}
