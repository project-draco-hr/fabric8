{
  try {
    super.start();
    this.threadPool=Executors.newSingleThreadScheduledExecutor();
    Map<String,String> properties=getDataStoreProperties();
    if (properties != null) {
      this.pullPeriod=PropertiesHelper.getLongValue(properties,GIT_PULL_PERIOD,this.pullPeriod);
      this.gitRemoteUrl=properties.get(GIT_REMOTE_URL);
    }
    if (gitRemoteUrl != null) {
      remoteChangeListener.onRemoteUrlChanged(gitRemoteUrl);
    }
 else     if (gitService != null) {
      gitService.addRemoteChangeListener(remoteChangeListener);
      gitRemoteUrl=gitService.getRemoteUrl();
      remoteChangeListener.onRemoteUrlChanged(gitRemoteUrl);
      pull();
    }
    LOG.info("starting to pull from remote repository every " + pullPeriod + " millis");
    getThreadPool().scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        LOG.debug("Performing timed pull");
        pull();
      }
    }
,pullPeriod,pullPeriod,TimeUnit.MILLISECONDS);
  }
 catch (  Exception ex) {
    throw new FabricException("Failed to start GitDataStore:",ex);
  }
}
