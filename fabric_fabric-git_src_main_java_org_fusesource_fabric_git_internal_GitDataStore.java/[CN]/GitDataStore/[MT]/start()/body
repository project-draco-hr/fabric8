{
  try {
    super.start();
    Map<String,String> properties=getDataStoreProperties();
    if (properties != null) {
      this.pullPeriod=PropertiesHelper.getLongValue(properties,GIT_PULL_PERIOD,this.pullPeriod);
      this.remoteUrl=properties.get(GIT_REMOTE_URL);
    }
    GitService optionalService=gitService.getOptional();
    if (remoteUrl != null) {
      remoteChangeListener.onRemoteUrlChanged(remoteUrl);
    }
 else     if (optionalService != null) {
      optionalService.addRemoteChangeListener(remoteChangeListener);
      remoteUrl=optionalService.getRemoteUrl();
      remoteChangeListener.onRemoteUrlChanged(remoteUrl);
      pull();
    }
    LOG.info("starting to pull from remote repository every " + pullPeriod + " millis");
    threadPool.scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        LOG.debug("Performing timed pull");
        pull();
      }
    }
,pullPeriod,pullPeriod,TimeUnit.MILLISECONDS);
  }
 catch (  Exception ex) {
    throw new FabricException("Failed to start GitDataStore:",ex);
  }
}
