{
  validateContainerName(container);
  if (!FabricCommand.doesContainerExist(fabricService,container)) {
    System.out.println("Container " + container + " does not exists!");
    return null;
  }
  Container containerInstance=FabricCommand.getContainerIfExists(fabricService,container);
  String type=containerInstance.getType();
  if (!"karaf".equals(type)) {
    System.out.println("Sorry, currently only \"karaf\" type container are supported");
    return null;
  }
  String jmxUrl=null;
  JMXConnector connector=null;
  MBeanServerConnection remote=null;
  HashMap<String,String[]> authenticationData=null;
  jmxUrl=containerInstance.getJmxUrl();
  authenticationData=prepareAuthenticationData();
  try {
    connector=connectOrRetry(authenticationData,jmxUrl);
  }
 catch (  Exception e) {
    username=null;
    password=null;
    System.out.println("Operation Failed. Check logs.");
    log.error("Unable to connect to JMX Server",e);
    return null;
  }
  remote=connector.getMBeanServerConnection();
  ObjectName objName=null;
  if (jvmOptions == null) {
    objName=new ObjectName(JAVA_LANG_OBJECT_NAME);
    try {
      String[] arguments=(String[])remote.getAttribute(objName,"InputArguments");
      String output=Arrays.toString(arguments);
      output=output.replaceAll(",","");
      output=output.substring(1,output.length() - 1);
      System.out.println(output);
    }
 catch (    Exception e) {
      System.out.println("Operation Failed. Check logs.");
      log.error("Unable to fetch child jvm opts",e);
    }
  }
 else {
    jvmOptions=stripSlashes(jvmOptions);
    String providerType=null;
    CreateContainerMetadata<?> metadata=containerInstance.getMetadata();
    if (metadata == null) {
      System.out.println("Modifying current container is not allowed. Please turn the instance off and manually edit env variables");
      return null;
    }
 else {
      providerType=metadata.getCreateOptions().getProviderType();
    }
switch (providerType) {
case "ssh":
      containerInstance=fabricService.getCurrentContainer();
    jmxUrl=containerInstance.getJmxUrl();
  authenticationData=prepareAuthenticationData();
connector=connectOrRetry(authenticationData,jmxUrl);
remote=connector.getMBeanServerConnection();
objName=new ObjectName(String.format(FABRIC_OBJECT_NAME,container));
try {
remote.invoke(objName,OPERATION_SSH,new Object[]{container,"jvmOpts",jvmOptions},new String[]{String.class.getName(),String.class.getName(),Object.class.getName()});
System.out.println("Operation succeeded. New JVM flags will be loaded at the next start of " + container + " container");
log.info("Updated JVM flags for container {}",container);
}
 catch (Exception e) {
System.out.println("Operation Failed. Check logs.");
log.error("Unable to set ssh jvm opts",e);
}
break;
case "child":
objName=new ObjectName(String.format(KARAF_ADMIN_OBJECT_NAME,container));
try {
remote.invoke(objName,OPERATION_CHILD,new Object[]{container,jvmOptions},new String[]{String.class.getName(),String.class.getName()});
System.out.println("Operation succeeded. New JVM flags will be loaded at the next start of " + container + " container");
log.info("Updated JVM flags for container {}",container);
}
 catch (Exception e) {
System.out.println("Operation Failed. Check logs.");
log.error("Unable to set child jvm opts",e);
}
break;
default :
System.out.println(String.format("Operation aborted. %s containers are not supported",providerType));
}
}
try {
connector.close();
}
 catch (IOException e) {
log.error("Errors closing remote MBean connection",e);
}
return null;
}
