{
  String mvnUrl=stripUrl(url);
  if (mvnUrl.startsWith("mvn:")) {
    MavenRepositoryURL inlined=null;
    final String inlinedMavenRepoUrl=stripInlinedMavenRepositoryUrl(mvnUrl);
    if (inlinedMavenRepoUrl != null) {
      inlined=new MavenRepositoryURL(inlinedMavenRepoUrl);
      mvnUrl=removeInlinedMavenRepositoryUrl(mvnUrl);
    }
    MavenDownloadTask task=new MavenDownloadTask(mvnUrl,cache,system,inlined,configuration,executor);
    executor.submit(task);
    if (!mvnUrl.equals(url)) {
      final DummyDownloadTask download=new DummyDownloadTask(url,executor);
      task.addListener(new FutureListener<DownloadFuture>(){
        @Override public void operationComplete(        DownloadFuture future){
          try {
            final String mvn=future.getUrl();
            String file=future.getFile().toURI().toURL().toString();
            String real=url.replace(mvn,file);
            if (inlinedMavenRepoUrl != null) {
              real=removeInlinedMavenRepositoryUrl(real);
            }
            SimpleDownloadTask task=new SimpleDownloadTask(real,executor,tmpPath);
            executor.submit(task);
            task.addListener(new FutureListener<DownloadFuture>(){
              @Override public void operationComplete(              DownloadFuture future){
                try {
                  download.setFile(future.getFile());
                }
 catch (                IOException e) {
                  download.setException(e);
                }
              }
            }
);
          }
 catch (          IOException e) {
            download.setException(e);
          }
        }
      }
);
      return download;
    }
 else {
      return task;
    }
  }
 else   if (mvnUrl.startsWith("profile:")) {
    if (!isDownloadFilesFromProfile()) {
      NoDownloadTask task=new NoDownloadTask(url,executor);
      executor.submit(task);
      return task;
    }
  }
  final SimpleDownloadTask download=new SimpleDownloadTask(url,executor,tmpPath);
  executor.submit(download);
  return download;
}
