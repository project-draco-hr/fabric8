{
  System.out.println("creating the cxf-server container.");
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy).withName("child").withProfiles("example-cxf-cxf.server").assertProvisioningResult().build();
    try {
      assertTrue("We should create the cxf-server container.",containers.size() == 1);
      System.out.println("created the cxf-server container.");
      Thread.sleep(2000);
      System.out.println(executeCommand("fabric:cluster-list"));
      Thread.sleep(2000);
      System.out.println("install the cxf client demo in root container");
      System.out.println(executeCommand("features:install fabric-cxf",600000,false));
      String projectVersion=System.getProperty("fabricitest.version");
      System.out.println(executeCommand("osgi:install -s mvn:io.fabric8.examples/fabric-cxf-demo-client/" + projectVersion));
      System.out.println(executeCommand("osgi:list"));
      System.out.println("invoking the web service");
      Hello proxy=ServiceLocator.awaitService(bundleContext,Hello.class);
      assertNotNull(proxy);
      String result1=proxy.sayHello();
      String result2=proxy.sayHello();
      assertNotSame("We should get the two different result",result1,result2);
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
