{
  String name=System.getProperty(SystemProperties.KARAF_NAME);
  logger.trace("onConnected");
  String nodeAlive=CONTAINER_ALIVE.getPath(name);
  try {
    Stat stat=ZooKeeperUtils.exists(zooKeeper,nodeAlive);
    if (stat != null) {
      if (stat.getEphemeralOwner() != zooKeeper.getSessionId()) {
        zooKeeper.delete(nodeAlive);
        zooKeeper.createWithParents(nodeAlive,CreateMode.EPHEMERAL);
      }
    }
 else {
      zooKeeper.createWithParents(nodeAlive,CreateMode.EPHEMERAL);
    }
    String domainsNode=CONTAINER_DOMAINS.getPath(name);
    stat=ZooKeeperUtils.exists(zooKeeper,domainsNode);
    if (stat != null) {
      zooKeeper.deleteWithChildren(domainsNode);
    }
    String jmxUrl=getJmxUrl();
    if (jmxUrl != null) {
      ZooKeeperUtils.set(zooKeeper,CONTAINER_JMX.getPath(name),getJmxUrl());
    }
    String sshUrl=getSshUrl();
    if (sshUrl != null) {
      ZooKeeperUtils.set(zooKeeper,CONTAINER_SSH.getPath(name),getSshUrl());
    }
    if (ZooKeeperUtils.exists(zooKeeper,CONTAINER_RESOLVER.getPath(name)) == null) {
      ZooKeeperUtils.set(zooKeeper,CONTAINER_RESOLVER.getPath(name),getContainerResolutionPolicy(zooKeeper,name));
    }
    ZooKeeperUtils.set(zooKeeper,CONTAINER_LOCAL_HOSTNAME.getPath(name),HostUtils.getLocalHostName());
    ZooKeeperUtils.set(zooKeeper,CONTAINER_LOCAL_IP.getPath(name),HostUtils.getLocalIp());
    ZooKeeperUtils.set(zooKeeper,CONTAINER_IP.getPath(name),getContainerPointer(zooKeeper,name));
    if (ZooKeeperUtils.exists(zooKeeper,CONTAINER_GEOLOCATION.getPath(name)) == null) {
      ZooKeeperUtils.set(zooKeeper,CONTAINER_GEOLOCATION.getPath(name),HostUtils.getGeoLocation());
    }
    for (    String resolver : ZkDefs.VALID_RESOLVERS) {
      String address=System.getProperty(resolver);
      if (address != null && !address.isEmpty() && ZooKeeperUtils.exists(zooKeeper,CONTAINER_ADDRESS.getPath(name,resolver)) == null) {
        ZooKeeperUtils.set(zooKeeper,CONTAINER_ADDRESS.getPath(name,resolver),address);
      }
    }
    String minimumPort=System.getProperty(ZkDefs.MINIMUM_PORT);
    String maximumPort=System.getProperty(ZkDefs.MAXIMUM_PORT);
    if (ZooKeeperUtils.exists(zooKeeper,CONTAINER_PORT_MIN.getPath(name)) == null) {
      ZooKeeperUtils.set(zooKeeper,CONTAINER_PORT_MIN.getPath(name),minimumPort);
    }
    if (ZooKeeperUtils.exists(zooKeeper,CONTAINER_PORT_MAX.getPath(name)) == null) {
      ZooKeeperUtils.set(zooKeeper,CONTAINER_PORT_MAX.getPath(name),maximumPort);
    }
    String version=System.getProperty("fabric.version",ZkDefs.DEFAULT_VERSION);
    String profiles=System.getProperty("fabric.profiles");
    if (profiles != null) {
      String versionNode=CONFIG_CONTAINER.getPath(name);
      String profileNode=CONFIG_VERSIONS_CONTAINER.getPath(version,name);
      if (ZooKeeperUtils.exists(zooKeeper,versionNode) == null) {
        ZooKeeperUtils.set(zooKeeper,versionNode,version);
      }
      if (ZooKeeperUtils.exists(zooKeeper,profileNode) == null) {
        ZooKeeperUtils.set(zooKeeper,profileNode,profiles);
      }
    }
    registerDomains();
  }
 catch (  Exception e) {
    logger.warn("Error updating Fabric Container information. This exception will be ignored.",e);
  }
}
