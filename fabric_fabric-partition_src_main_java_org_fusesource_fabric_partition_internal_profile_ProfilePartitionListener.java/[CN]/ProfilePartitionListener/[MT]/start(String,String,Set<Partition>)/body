{
  if (fabricService == null) {
    LOGGER.warn("Cannot start {}. Fabric Service is unavailable.",taskDefinition);
  }
  Container current=fabricService.getCurrentContainer();
  Version version=current.getVersion();
  Profile templateProfile=version.getProfile(taskDefinition);
  Iterable<String> fileTemplates=Iterables.filter(templateProfile.getFileConfigurations().keySet(),new MvelPredicate());
  for (  String fileTemplate : fileTemplates) {
    Key key=new Key(templateProfile.getId(),fileTemplate);
    CompiledTemplate template=templates.get(key);
    if (template == null) {
      template=TemplateCompiler.compileTemplate(new String(templateProfile.getFileConfigurations().get(fileTemplate)),parserContext);
      templates.put(key,template);
    }
  }
  for (  Partition partition : partitions) {
    Map<String,String> partitionData=partition.getData();
    if (!partitionData.containsKey(ID)) {
      partitionData.put(ID,ZKPaths.getNodeFromPath(partition.getId()));
    }
    String id=partitionData.get(ID);
    String profileId=taskDefinition + "-" + id;
    version.copyProfile(templateProfile.getId(),profileId,true);
    Profile targetProfile=version.getProfile(profileId);
    Map<String,byte[]> configs=templateProfile.getFileConfigurations();
    for (    String fileTemplate : fileTemplates) {
      String file=renderTemplateName(fileTemplate,partitionData);
      Key key=new Key(templateProfile.getId(),fileTemplate);
      String renderedTemplate=TemplateRuntime.execute(templates.get(key),parserContext,partitionData).toString();
      configs.put(file,renderedTemplate.getBytes());
      configs.remove(fileTemplate);
    }
    targetProfile.setFileConfigurations(configs);
    current.addProfiles(targetProfile);
    assignedPartitons.put(taskDefinition,partition);
  }
}
