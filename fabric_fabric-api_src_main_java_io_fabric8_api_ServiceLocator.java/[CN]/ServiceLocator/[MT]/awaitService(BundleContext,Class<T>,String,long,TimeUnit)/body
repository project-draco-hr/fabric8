{
  final Filter srvfilter;
  try {
    srvfilter=filterspec != null ? FrameworkUtil.createFilter(filterspec) : null;
  }
 catch (  InvalidSyntaxException ex) {
    throw new IllegalArgumentException("Invalid filter",ex);
  }
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<T> serviceRef=new AtomicReference<T>();
  ServiceTracker<T,T> tracker=new ServiceTracker<T,T>(bundleContext,type,null){
    @Override public T addingService(    ServiceReference<T> sref){
      T service=super.addingService(sref);
      if (srvfilter == null || srvfilter.match(sref)) {
        serviceRef.set(bundleContext.getService(sref));
        latch.countDown();
      }
      return service;
    }
  }
;
  tracker.open();
  try {
    if (!latch.await(timeout,unit)) {
      throw new RuntimeException("Cannot obtain service: " + srvfilter);
    }
    return serviceRef.get();
  }
 catch (  InterruptedException ex) {
    throw new IllegalStateException();
  }
 finally {
    tracker.close();
  }
}
