{
  System.out.println(executeCommand("fabric:create -n --wait-for-provisioning"));
  System.out.println(executeCommand("mq-create --no-ssl --jmx-user admin --jmx-password admin --minimumInstances 1 mq"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy,2).withName("child").withProfiles("default").assertProvisioningResult().build();
    try {
      LinkedList<Container> containerList=new LinkedList<Container>(containers);
      Container broker=containerList.removeLast();
      Profile brokerProfile=broker.getVersion().getRequiredProfile("mq-broker-default.mq");
      broker.setProfiles(new Profile[]{brokerProfile});
      Provision.provisioningSuccess(Arrays.asList(broker),PROVISION_TIMEOUT);
      waitForBroker("default");
      final BrokerViewMBean bean=(BrokerViewMBean)Provision.getMBean(broker,new ObjectName("org.apache.activemq:type=Broker,brokerName=mq"),BrokerViewMBean.class,120000);
      Assert.assertNotNull("Cannot get BrokerViewMBean from JMX",bean);
      System.out.println(executeCommand("container-list"));
      for (      Container c : containerList) {
        Profile exampleProfile=broker.getVersion().getRequiredProfile("example-mq");
        c.setProfiles(new Profile[]{exampleProfile});
      }
      Provision.provisioningSuccess(containers,PROVISION_TIMEOUT);
      Provision.waitForCondition(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          while (bean.getTotalProducerCount() == 0 || bean.getTotalConsumerCount() == 0) {
            Thread.sleep(1000);
          }
          return true;
        }
      }
,120000L);
      Assert.assertEquals("Producer not present",1,bean.getTotalProducerCount());
      Assert.assertEquals("Consumer not present",1,bean.getTotalConsumerCount());
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
