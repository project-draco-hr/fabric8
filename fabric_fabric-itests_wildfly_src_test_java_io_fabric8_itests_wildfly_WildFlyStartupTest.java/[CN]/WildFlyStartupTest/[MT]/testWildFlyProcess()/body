{
  executeCommand("fabric:create -n");
  Set<ContainerProxy> containers=null;
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    containers=ContainerBuilder.child(fabricProxy,1).withName("child").assertProvisioningResult().build();
    Container childContainer=containers.iterator().next();
    Assert.assertEquals("Expected to find the child container","child1",childContainer.getId());
    executeCommand("container-add-profile child1 controller-wildfly");
    Provision.containerStatus(containers,PROVISION_TIMEOUT);
    SimpleDateFormat df=new SimpleDateFormat("HH:mm:ss:SSS");
    File childHome=new File(System.getProperty("runtime.home") + "/instances/" + childContainer.getId());
    Assert.assertTrue("[" + df.format(new Date()) + "] Child home exists: "+ childHome,childHome.exists());
    File procHome=new File(childHome + "/processes/1");
    System.out.println("[" + df.format(new Date()) + "] Waiting for: "+ procHome);
    for (int i=0; !procHome.exists() && i < 30; i++) {
      Thread.sleep(1000);
    }
    Assert.assertTrue("Process home exists: " + procHome,procHome.exists());
    File wildflyHome=new File(procHome + "/wildfly-8.0.0.Alpha4");
    System.out.println("[" + df.format(new Date()) + "] Waiting for: "+ wildflyHome);
    for (int i=0; !wildflyHome.exists() && i < 30; i++) {
      Thread.sleep(1000);
    }
    Assert.assertTrue("WildFly home exists: " + wildflyHome,wildflyHome.exists());
    File pidFile=new File(wildflyHome + "/standalone/data/wildfly.pid");
    System.out.println("[" + df.format(new Date()) + "] Waiting for: "+ pidFile);
    for (int i=0; !pidFile.exists() && i < 30; i++) {
      Thread.sleep(1000);
    }
    Assert.assertTrue("PID file exists",pidFile.exists());
    BufferedReader pidr=new BufferedReader(new FileReader(pidFile));
    Long pid=new Long(pidr.readLine());
    Assert.assertNotNull("PID not null",pid);
    pidr.close();
    System.out.println("[" + df.format(new Date()) + "] WildFly PID: "+ pid);
    Runtime runtime=Runtime.getRuntime();
    runtime.exec("kill -9 " + pid);
    pidFile.delete();
  }
  finally {
    ContainerBuilder.destroy(containers);
    fabricProxy.close();
  }
}
