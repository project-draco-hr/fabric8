{
  LOG.debug("Added shared dependency: " + tree.getDependencyId());
  addPackages(tree);
  sharedDependencies.add(tree);
  boolean importExports=false;
  if (connection.isIncludeSharedResources()) {
    importExports=includeSharedResources(tree);
  }
  if (!importExports && importExportFilter.matches(tree)) {
    importExports=true;
  }
  if (importExports) {
    importAllExportedPackages(tree);
  }
  List<DependencyTree> list=tree.getChildren();
  for (  DependencyTree child : list) {
    if (excludeDependencyFilter.matches(child)) {
      LOG.debug("Excluded transitive dependency: " + child.getDependencyId());
      continue;
    }
 else     if (optionalDependencyFilter.matches(child)) {
      LOG.debug("Excluded optional transitive dependency: " + child.getDependencyId());
      continue;
    }
 else {
      addSharedDependency(child);
    }
    if (importExportFilter.matches(child)) {
      importAllExportedPackages(child);
    }
  }
  addInstallDependencies(tree);
}
