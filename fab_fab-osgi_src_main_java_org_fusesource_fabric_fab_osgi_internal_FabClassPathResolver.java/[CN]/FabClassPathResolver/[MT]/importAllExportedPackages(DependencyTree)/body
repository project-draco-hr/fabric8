{
  try {
    String text=dependencyTree.getManifestEntry(ServiceConstants.INSTR_EXPORT_PACKAGE);
    if (text != null && text.length() > 0) {
      Map<String,Map<String,String>> map=new Analyzer().parseHeader(text);
      for (      Map.Entry<String,Map<String,String>> entry : map.entrySet()) {
        String key=entry.getKey();
        Map<String,String> values=entry.getValue();
        Map<String,String> current=importPackages.get(key);
        if (current == null) {
          current=new HashMap<String,String>();
          importPackages.put(key,current);
        }
        Maps.putAll(current,values,ServiceConstants.IMPORT_PACKAGE_PARAMETERS);
        String specVersion=current.get("specification-version");
        if (specVersion != null) {
          current.remove("specification-version");
          String version=current.get("version");
          if (version == null) {
            current.put("version",connection.toVersionRange(specVersion));
          }
 else {
            LOG.warn("Have specification-version " + specVersion + " and version: "+ version+ " for dependency: "+ dependencyTree+ " will ignore specification-version");
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.warn("Failed to find export packages for " + dependencyTree + ". "+ e,e);
  }
  List<DependencyTree> children=dependencyTree.getChildren();
  for (  DependencyTree child : children) {
    if (!child.isOptional()) {
      importAllExportedPackages(child);
    }
  }
}
