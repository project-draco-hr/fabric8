{
  final Set<CreateContainerChildMetadata> result=new LinkedHashSet<CreateContainerChildMetadata>();
  String parentName=options.getParent();
  final Container parent=service.getContainer(parentName);
  ContainerTemplate containerTemplate=service.getContainerTemplate(parent);
  if (options.getProviderURI() != null && options.getProviderURI().getUserInfo() != null) {
    String ui=options.getProviderURI().getUserInfo();
    String[] uip=ui != null ? ui.split(":") : null;
    if (uip != null) {
      containerTemplate.setLogin(uip[0]);
      containerTemplate.setPassword(uip[1]);
    }
  }
  containerTemplate.execute(new ContainerTemplate.AdminServiceCallback<Object>(){
    public Object doWithAdminService(    AdminServiceMBean adminService) throws Exception {
      String javaOpts=options.getZookeeperUrl() != null ? "-Dzookeeper.url=\"" + options.getZookeeperUrl() + "\" -Xmx512M -server" : "";
      if (options.isDebugContainer()) {
        javaOpts+=DEBUG_CONTAINER;
      }
      if (options.isEnsembleServer()) {
        javaOpts+=ENSEMBLE_SERVER_CONTAINER;
      }
      String features="fabric-agent";
      String featuresUrls="mvn:org.fusesource.fabric/fuse-fabric/" + FabricConstants.FABRIC_VERSION + "/xml/features";
      for (int i=1; i <= options.getNumber(); i++) {
        String containerName=options.getName();
        if (options.getNumber() > 1) {
          containerName+=i;
        }
        CreateContainerChildMetadata metadata=new CreateContainerChildMetadata();
        metadata.setContainerName(containerName);
        try {
          adminService.createInstance(containerName,0,0,0,null,javaOpts,features,featuresUrls);
          adminService.startInstance(containerName,null);
        }
 catch (        Throwable t) {
          metadata.setFailure(t);
        }
        result.add(metadata);
      }
      return null;
    }
  }
);
  return result;
}
