{
  final Set<CreateContainerChildMetadata> result=new LinkedHashSet<CreateContainerChildMetadata>();
  final String parentName=options.getParent();
  final Container parent=service.getContainer(parentName);
  ContainerTemplate containerTemplate=service.getContainerTemplate(parent,options.getJmxUser(),options.getJmxPassword());
  containerTemplate.execute(new ContainerTemplate.AdminServiceCallback<Object>(){
    public Object doWithAdminService(    AdminServiceMBean adminService) throws Exception {
      StringBuilder jvmOptsBuilder=new StringBuilder();
      jvmOptsBuilder.append("-server -Dcom.sun.management.jmxremote").append(options.getZookeeperUrl() != null ? " -Dzookeeper.url=\"" + options.getZookeeperUrl() + "\"" : "").append(options.getZookeeperPassword() != null ? " -Dzookeeper.password=\"" + options.getZookeeperPassword() + "\"" : "");
      if (options.getJvmOpts() == null || !options.getJvmOpts().contains("-Xmx")) {
        jvmOptsBuilder.append(" -Xmx512m");
      }
      if (options.isEnsembleServer()) {
        jvmOptsBuilder.append(" ").append(ENSEMBLE_SERVER_CONTAINER);
      }
      if (options.getJvmOpts() != null && !options.getJvmOpts().isEmpty()) {
        jvmOptsBuilder.append(" ").append(options.getJvmOpts());
      }
      if (options.getJvmOpts() != null && !options.getJvmOpts().contains("-XX:+UnlockDiagnosticVMOptions -XX:+UnsyncloadClass")) {
        jvmOptsBuilder.append(" -XX:+UnlockDiagnosticVMOptions -XX:+UnsyncloadClass");
      }
      Profile defaultProfile=parent.getVersion().getProfile("default");
      String featuresUrls=listAsString(defaultProfile.getRepositories());
      String features=listAsString(defaultProfile.getFeatures());
      String originalName=options.getName();
      usedPorts.addAll(getContainerUsedPorts(parent));
      for (int i=1; i <= options.getNumber(); i++) {
        String containerName;
        if (options.getNumber() > 1) {
          containerName=originalName + i;
        }
 else {
          containerName=originalName;
        }
        CreateContainerChildMetadata metadata=new CreateContainerChildMetadata();
        metadata.setCreateOptions(options);
        metadata.setContainerName(containerName);
        int minimumPort=parent.getMinimumPort();
        int maximumPort=parent.getMaximumPort();
        ZooKeeperUtils.set(service.getZooKeeper(),ZkPath.CONTAINER_PORT_MIN.getPath(containerName),String.valueOf(minimumPort));
        ZooKeeperUtils.set(service.getZooKeeper(),ZkPath.CONTAINER_PORT_MAX.getPath(containerName),String.valueOf(maximumPort));
        inheritAddresses(service.getZooKeeper(),parentName,containerName,options);
        int sshPort=mapPortToRange(Ports.DEFAULT_KARAF_SSH_PORT + i,minimumPort,maximumPort);
        while (usedPorts.contains(sshPort)) {
          sshPort++;
        }
        usedPorts.add(sshPort);
        int rmiServerPort=mapPortToRange(Ports.DEFAULT_RMI_SERVER_PORT + i,minimumPort,maximumPort);
        while (usedPorts.contains(rmiServerPort)) {
          rmiServerPort++;
        }
        usedPorts.add(rmiServerPort);
        int rmiRegistryPort=mapPortToRange(Ports.DEFAULT_RMI_REGISTRY_PORT + i,minimumPort,maximumPort);
        while (usedPorts.contains(rmiRegistryPort)) {
          rmiRegistryPort++;
        }
        usedPorts.add(rmiRegistryPort);
        try {
          adminService.createInstance(containerName,sshPort,rmiServerPort,rmiRegistryPort,null,jvmOptsBuilder.toString(),features,featuresUrls);
          adminService.startInstance(containerName,null);
        }
 catch (        Throwable t) {
          metadata.setFailure(t);
        }
        result.add(metadata);
      }
      return null;
    }
  }
);
  return result;
}
