{
  Processor processor=new Processor(){
    Connection connection;
    Session session;
    ActiveMQMessageProducer producer;
    @Override public void start() throws JMSException {
      ActiveMQConnectionFactory factory=new ActiveMQConnectionFactory(broker);
      connection=factory.createConnection();
      connection.start();
      session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
      producer=(ActiveMQMessageProducer)session.createProducer(ActiveMQDestination.createDestination(destination,ActiveMQDestination.QUEUE_TYPE));
      if (positionFile != null) {
        producer.setDeliveryMode(DeliveryMode.PERSISTENT);
      }
 else {
        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
      }
    }
    @Override public void stop(){
      new Thread(){
        @Override public void run(){
          try {
            connection.stop();
          }
 catch (          JMSException e) {
          }
        }
      }
.start();
    }
    @Override public void send(    HashMap<String,String> headers,    byte[] data,    final Callback onComplete){
      try {
        BytesMessage msg=session.createBytesMessage();
        producer.send(msg,new AsyncCallback(){
          public void onSuccess(){
            onComplete.onSuccess();
          }
          public void onException(          JMSException exception){
            onComplete.onFailure(exception);
          }
        }
);
      }
 catch (      JMSException e) {
        onComplete.onFailure(e);
      }
    }
  }
;
  if (compress) {
    final Processor next=processor;
    processor=new Processor(){
      @Override public void start() throws Exception {
        next.start();
      }
      @Override public void stop(){
        next.stop();
      }
      @Override public void send(      HashMap<String,String> headers,      byte[] data,      Callback onComplete){
        next.send(headers,compress(data),onComplete);
      }
    }
;
  }
  LogStreamer streamer=new LogStreamer();
  streamer.setBatchSize(batchSize);
  streamer.setBatchTimeout(batchTimeout);
  streamer.setIs(is);
  streamer.setLogFilePattern(logFilePattern);
  streamer.setPositionFile(positionFile);
  if (positionFile == null) {
    streamer.setExitOnEOF(true);
  }
  streamer.setProcessor(processor);
  return streamer;
}
