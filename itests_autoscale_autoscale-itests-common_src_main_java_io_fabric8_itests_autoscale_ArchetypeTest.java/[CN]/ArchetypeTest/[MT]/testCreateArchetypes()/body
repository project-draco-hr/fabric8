{
  List<ArchetypeInfo> archetypes=findArchetypes();
  File mavenSettingsFile=getMavenSettingsFile();
  assertFileExists(mavenSettingsFile);
  File workDir=new File(System.getProperty("basedir","."),"target/generated-projects");
  workDir.mkdirs();
  boolean addedBroker=false;
  Map<ArchetypeInfo,String> archetypeToProfileMap=new HashMap<>();
  for (  ArchetypeInfo archetype : archetypes) {
    String profileId=assertGenerateArchetype(archetype,workDir,mavenSettingsFile);
    archetypeToProfileMap.put(archetype,profileId);
    assertNotNull("Should have a profile ID for " + archetype,profileId);
    FabricRequirements requirements=fabricController.getRequirements();
    if (!addedBroker) {
      addedBroker=true;
      requirements.profile("mq-default").minimumInstances(1);
      FabricAssertions.assertRequirementsSatisfied(fabricController,requirements);
    }
    requirements.profile(profileId).minimumInstances(1);
    FabricAssertions.assertRequirementsSatisfied(fabricController,requirements);
    System.out.println();
    System.out.println("Managed to create a container for " + profileId + ". Now lets stop it");
    System.out.println();
    requirements.profile(profileId).minimumInstances(0).maximumInstances(0);
    FabricAssertions.assertRequirementsSatisfied(fabricController,requirements);
    System.out.println();
    System.out.println("Stopped a container for " + profileId + ". Now lets clear requirements");
    System.out.println();
    requirements.removeProfileRequirements(profileId);
    FabricAssertions.assertRequirementsSatisfied(fabricController,requirements);
    System.out.println();
    System.out.println("Removed requirements for profile " + profileId);
    System.out.println();
  }
}
