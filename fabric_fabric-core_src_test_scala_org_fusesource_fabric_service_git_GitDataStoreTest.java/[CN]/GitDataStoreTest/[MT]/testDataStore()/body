{
  String defaultVersion=dataStore.getDefaultVersion();
  assertEquals("defaultVersion","1.0",defaultVersion);
  String importPath=basedir + "/../fuse-fabric/src/main/resources/distro/fabric/import";
  if (useOldImportFormat) {
    assertFolderExists(importPath);
    dataStore.importFromFileSystem(importPath);
    assertHasVersion(defaultVersion);
  }
 else {
    String prefix=importPath + "/fabric";
    String profileImport=prefix + "/configs/versions/1.0/profiles";
    String metricsImport=prefix + "/metrics";
    assertFolderExists(profileImport);
    assertFolderExists(metricsImport);
    dataStore.importFromFileSystem(new File(profileImport),"fabric","1.0");
    dataStore.importFromFileSystem(new File(metricsImport),"fabric","1.0");
    assertHasVersion(defaultVersion);
  }
  String importedProfile="example-dozer";
  String profile=importedProfile;
  assertProfileExists(defaultVersion,profile);
  String version="1.1";
  assertCreateVersion(version);
  assertProfileConfiguration(version,importedProfile,"org.fusesource.fabric.agent","parents","camel");
  assertProfileTextFileConfigurationContains(version,"example-camel-fabric","camel.xml","http://camel.apache.org/schema/blueprint");
  Map<String,String> profileAttributes=dataStore.getProfileAttributes(version,importedProfile);
  String parent=profileAttributes.get("parents");
  assertEquals(importedProfile + ".profileAttributes[parent]","camel",parent);
  System.out.println("Profile attributes: " + profileAttributes);
  String profileAttributeKey="myKey";
  String expectedProfileAttributeValue="myValue";
  dataStore.setProfileAttribute(version,importedProfile,profileAttributeKey,expectedProfileAttributeValue);
  profileAttributes=dataStore.getProfileAttributes(version,importedProfile);
  System.out.println("Profile attributes: " + profileAttributes);
  assertMapContains("Profile attribute[" + profileAttributeKey + "]",profileAttributes,profileAttributeKey,expectedProfileAttributeValue);
  String profileNotCreated="shouldNotBeCreated";
  assertEquals("Should not create profile: " + profileNotCreated,null,dataStore.getProfile(version,profileNotCreated,false));
  assertProfileNotExists(defaultVersion,profileNotCreated);
  assertFolderNotExists(getLocalGitFile("fabric/profiles/" + profileNotCreated));
  String newProfile="myNewProfile";
  dataStore.createProfile(version,newProfile);
  assertProfileExists(version,newProfile);
  String anotherNewProfile="anotherNewProfile";
  dataStore.getProfile(version,anotherNewProfile,true);
  assertProfileExists(version,anotherNewProfile);
  version="1.2";
  assertCreateVersion(version);
  assertProfileExists(version,newProfile);
  assertProfileExists(version,profile);
  dataStore.deleteProfile(version,newProfile);
  assertProfileNotExists(version,newProfile);
  remote.checkout().setName("1.1").call();
  assertFolderExists(getRemoteGitFile("fabric/profiles/" + profile));
  assertFolderExists(getRemoteGitFile("fabric/profiles/" + newProfile));
  assertFolderExists("we should have pushed this file remotely due to the call to dataStore.setProfileAttribute()",getRemoteGitFile("fabric/profiles/" + importedProfile + "/org.fusesource.fabric.datastore.properties"));
  remote.checkout().setName("1.2").call();
  assertFolderExists(getRemoteGitFile("fabric/profiles/" + profile));
  assertFolderNotExists(getRemoteGitFile("fabric/profiles/" + newProfile));
  remote.checkout().setName("1.0").call();
  assertFolderExists(getRemoteGitFile("fabric/profiles/" + profile));
  assertFolderNotExists(getRemoteGitFile("fabric/profiles/" + newProfile));
}
