{
  try {
    String containerId=System.getProperty("karaf.name");
    if (containerId == null || containerId.trim().equals("")) {
      return address;
    }
    URI uri=new URI(address);
    StringBuilder schemes=new StringBuilder();
    String answer;
    while (uri.getSchemeSpecificPart().contains("://")) {
      schemes.append(uri.getScheme()).append(":");
      uri=new URI(uri.getSchemeSpecificPart());
    }
    int port=publicPort(uri);
    String path=uri.getPath();
    if (uri.getQuery() != null) {
      path+="?" + uri.getQuery();
    }
    while (path.startsWith("/")) {
      path=path.substring(1);
    }
    if (!path.trim().equals("")) {
      path="/" + path;
    }
    if (getComponent().getCurator() != null) {
      String hostname="${zk:" + containerId + "/ip}";
      answer=schemes.toString() + uri.getScheme() + "://"+ hostname+ ":"+ port+ path;
      getComponent().getCurator().getZookeeperClient().blockUntilConnectedOrTimedOut();
      answer=ZooKeeperUtils.getSubstitutedData(getComponent().getCurator(),answer);
    }
 else {
      answer=schemes.toString() + uri.getScheme() + "://"+ uri.getHost()+ ":"+ port+ path;
    }
    return answer;
  }
 catch (  InterruptedException e) {
    LOG.warn("Could not connect to Zookeeper to get public container address");
    return address;
  }
catch (  URISyntaxException e) {
    LOG.warn("Could not map URL to a public address: " + address);
    return address;
  }
}
