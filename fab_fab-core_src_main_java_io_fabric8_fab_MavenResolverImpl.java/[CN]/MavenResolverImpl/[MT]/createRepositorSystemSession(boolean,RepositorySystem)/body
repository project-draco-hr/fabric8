{
  final MavenRepositorySystemSession session=new MavenRepositorySystemSession();
  LocalRepository localRepository=new LocalRepository(getLocalRepo());
  session.setLocalRepositoryManager(repo.newLocalRepositoryManager(session,localRepository));
  session.setDependencySelector(new AndDependencySelector(new ScopeDependencySelector("test"),new ExclusionDependencySelector()));
  session.setOffline(offline);
  session.setRepositoryListener(new RepositoryListener(){
    @Override public void artifactDescriptorInvalid(    RepositoryEvent event){
      logException("Invalid artifact descriptor: ",event);
    }
    @Override public void artifactDescriptorMissing(    RepositoryEvent event){
      logException("Missing artifact descriptor: ",event);
    }
    @Override public void metadataInvalid(    RepositoryEvent event){
      logException("Invalid metadata: ",event);
    }
    @Override public void artifactResolving(    RepositoryEvent event){
      LOGGER.debug("Resolving artifact: " + toString(event));
    }
    @Override public void artifactResolved(    RepositoryEvent event){
      LOGGER.debug("Resolved artifact: " + toString(event));
    }
    @Override public void metadataResolving(    RepositoryEvent event){
      LOGGER.debug("Metadata resolving: " + toString(event));
    }
    @Override public void metadataResolved(    RepositoryEvent event){
      LOGGER.debug("Metadata resolved: " + toString(event));
    }
    @Override public void artifactDownloading(    RepositoryEvent event){
      LOGGER.debug("Artifact downloading: " + toString(event));
    }
    @Override public void artifactDownloaded(    RepositoryEvent event){
      LOGGER.debug("Metadata downloaded: " + toString(event));
    }
    @Override public void metadataDownloading(    RepositoryEvent event){
      LOGGER.debug("Metadata downloading: " + toString(event));
    }
    @Override public void metadataDownloaded(    RepositoryEvent event){
      LOGGER.debug("Metadata downloaded: " + toString(event));
    }
    @Override public void artifactInstalling(    RepositoryEvent event){
      LOGGER.debug("Artifact installing: " + toString(event));
    }
    @Override public void artifactInstalled(    RepositoryEvent event){
      LOGGER.debug("Artifact installed: " + toString(event));
    }
    @Override public void metadataInstalling(    RepositoryEvent event){
      LOGGER.debug("Metadata installing: " + toString(event));
    }
    @Override public void metadataInstalled(    RepositoryEvent event){
      LOGGER.debug("Metadata installed: " + toString(event));
    }
    @Override public void artifactDeploying(    RepositoryEvent event){
      LOGGER.debug("Artifact deploying: " + toString(event));
    }
    @Override public void artifactDeployed(    RepositoryEvent event){
      LOGGER.debug("Artifact deployed: " + toString(event));
    }
    @Override public void metadataDeploying(    RepositoryEvent event){
      LOGGER.debug("Metadata deploying: " + toString(event));
    }
    @Override public void metadataDeployed(    RepositoryEvent event){
      LOGGER.debug("Metadata deployed: " + toString(event));
    }
    protected void logException(    String message,    RepositoryEvent event){
      Exception exception=event.getException();
      List<Exception> exceptions=event.getExceptions();
      String text=message + toString(event);
      if (exceptions.isEmpty()) {
        LOGGER.warn(text + " " + exception,exception);
      }
 else       if (exception != null) {
        LOGGER.warn(text + " " + exceptions,exception);
      }
    }
    protected String toString(    RepositoryEvent event){
      Object value=event.getArtifact();
      if (value == null) {
        value=event.getMetadata();
      }
      ArtifactRepository repository=event.getRepository();
      String text="" + value;
      if (repository != null) {
        return text + " on " + repository;
      }
 else {
        return text;
      }
    }
  }
);
  return session;
}
