{
  System.err.println(executeCommand("fabric:create -n"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    System.err.println(executeCommand("fabric:version-create --parent 1.0 1.1"));
    System.err.println(executeCommand("fabric:container-upgrade --all 1.1"));
    Set<Container> containers=ContainerBuilder.create(2).withName("ens").withProfiles("default").assertProvisioningResult().build();
    try {
      Deque<Container> containerQueue=new LinkedList<Container>(containers);
      Deque<Container> addedContainers=new LinkedList<Container>();
      System.err.println(executeCommand("fabric:version-create"));
      System.err.println(executeCommand("fabric:container-upgrade --all 1.2"));
      for (int e=0; e < 3 && containerQueue.size() >= 2 && containerQueue.size() % 2 == 0; e++) {
        Container cnt1=containerQueue.removeFirst();
        Container cnt2=containerQueue.removeFirst();
        addedContainers.add(cnt1);
        addedContainers.add(cnt2);
        addToEnsemble(fabricService,cnt1,cnt2);
        System.err.println(executeCommand("config:proplist --pid io.fabric8.zookeeper"));
        System.err.println(tryCommand("fabric:container-list"));
        System.err.println(tryCommand("fabric:ensemble-list"));
        ZooKeeperClusterService zooKeeperClusterService=ServiceLocator.awaitService(bundleContext,ZooKeeperClusterService.class);
        org.junit.Assert.assertNotNull(zooKeeperClusterService);
        List<String> ensembleContainersResult=zooKeeperClusterService.getEnsembleContainers();
        org.junit.Assert.assertTrue(ensembleContainersResult.contains(cnt1.getId()));
        org.junit.Assert.assertTrue(ensembleContainersResult.contains(cnt2.getId()));
        Provision.provisioningSuccess(Arrays.asList(fabricService.getContainers()),PROVISION_TIMEOUT);
      }
      System.err.println(executeCommand("fabric:version-create"));
      System.err.println(executeCommand("fabric:container-upgrade --all 1.3"));
      for (int e=0; e < 3 && addedContainers.size() >= 2 && addedContainers.size() % 2 == 0; e++) {
        Container cnt1=addedContainers.removeFirst();
        Container cnt2=addedContainers.removeFirst();
        containerQueue.add(cnt1);
        containerQueue.add(cnt2);
        removeFromEnsemble(fabricService,cnt1,cnt2);
        System.err.println(executeCommand("config:proplist --pid io.fabric8.zookeeper"));
        System.err.println(tryCommand("fabric:container-list"));
        System.err.println(tryCommand("fabric:ensemble-list"));
        ZooKeeperClusterService zooKeeperClusterService=ServiceLocator.awaitService(bundleContext,ZooKeeperClusterService.class);
        org.junit.Assert.assertNotNull(zooKeeperClusterService);
        List<String> ensembleContainersResult=zooKeeperClusterService.getEnsembleContainers();
        org.junit.Assert.assertFalse(ensembleContainersResult.contains(cnt1.getId()));
        org.junit.Assert.assertFalse(ensembleContainersResult.contains(cnt2.getId()));
        Provision.provisioningSuccess(Arrays.asList(fabricService.getContainers()),PROVISION_TIMEOUT);
      }
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
