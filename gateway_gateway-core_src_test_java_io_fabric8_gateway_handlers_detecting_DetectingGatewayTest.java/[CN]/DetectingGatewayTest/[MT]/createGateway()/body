{
  String loadBalancerType=LoadBalancers.STICKY_LOAD_BALANCER;
  int stickyLoadBalancerCacheSize=LoadBalancers.STICKY_LOAD_BALANCER_DEFAULT_CACHE_SIZE;
  LoadBalancer serviceLoadBalancer=LoadBalancers.createLoadBalancer(loadBalancerType,stickyLoadBalancerCacheSize);
  ArrayList<Protocol> protocols=new ArrayList<Protocol>();
  protocols.add(new StompProtocol());
  protocols.add(new MqttProtocol());
  protocols.add(new AmqpProtocol());
  protocols.add(new OpenwireProtocol());
  protocols.add(new HttpProtocol());
  protocols.add(new SslProtocol());
  DetectingGatewayProtocolHandler handler=new DetectingGatewayProtocolHandler();
  handler.setVertx(vertx);
  SslConfig sslConfig=new SslConfig(new File(basedir(),"src/test/resources/server.ks"),"password");
  sslConfig.setKeyPassword("password");
  handler.setSslConfig(sslConfig);
  handler.setServiceMap(serviceMap);
  handler.setProtocols(protocols);
  handler.setServiceLoadBalancer(serviceLoadBalancer);
  handler.setDefaultVirtualHost("broker1");
  return new DetectingGateway(vertx,0,handler);
}
