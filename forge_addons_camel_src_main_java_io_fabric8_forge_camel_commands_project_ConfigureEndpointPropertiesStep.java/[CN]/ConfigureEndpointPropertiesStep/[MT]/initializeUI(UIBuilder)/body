{
  Map<Object,Object> attributeMap=builder.getUIContext().getAttributeMap();
  String camelComponentName=mandatoryAttributeValue(attributeMap,"componentName");
  CamelCatalog catalog=new DefaultCamelCatalog();
  String json=catalog.componentJSonSchema(camelComponentName);
  if (json == null) {
    throw new IllegalArgumentException("Could not find catalog entry for component name: " + camelComponentName);
  }
  List<Map<String,String>> data=JSonSchemaHelper.parseJsonSchema("properties",json,true);
  if (data != null) {
    Set<String> namesAdded=new HashSet<>();
    for (    Map<String,String> propertyMap : data) {
      String name=propertyMap.get("name");
      String kind=propertyMap.get("kind");
      String type=propertyMap.get("type");
      String javaType=propertyMap.get("javaType");
      String deprecated=propertyMap.get("deprecated");
      String required=propertyMap.get("required");
      String defaultValue=propertyMap.get("defaultValue");
      String description=propertyMap.get("description");
      String enums=propertyMap.get("enum");
      if (!Strings.isNullOrEmpty(name)) {
        Class<Object> inputClazz=CamelCommands.loadValidInputTypes(javaType,type);
        if (inputClazz != null) {
          if (namesAdded.add(name)) {
            InputComponent input;
            if (enums != null) {
              UISelectOne ui=componentFactory.createSelectOne(name,inputClazz);
              if (defaultValue != null) {
                ui.setDefaultValue(defaultValue);
              }
              String[] values=enums.split(",");
              ui.setValueChoices(Arrays.asList(values));
              input=ui;
            }
 else {
              UIInput ui=componentFactory.createInput(name,inputClazz);
              if (defaultValue != null) {
                ui.setDefaultValue(defaultValue);
              }
              input=ui;
            }
            if (input != null) {
              if (Objects.equals("true",required)) {
                input.setRequired(true);
              }
              input.setLabel(name);
              input.setDescription(description != null ? description : "");
              builder.add(input);
              inputs.add(input);
            }
          }
        }
      }
    }
  }
}
