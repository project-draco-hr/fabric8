{
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  try {
    String camelComponentName=mandatoryAttributeValue(attributeMap,"componentName");
    String endpointInstanceName=mandatoryAttributeValue(attributeMap,"instanceName");
    String routeBuilder=mandatoryAttributeValue(attributeMap,"routeBuilder");
    String kind=mandatoryAttributeValue(attributeMap,"kind");
    Project project=getSelectedProject(context);
    JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);
    Dependency core=CamelProjectHelper.findCamelCoreDependency(project);
    if (core == null) {
      return Results.fail("The project does not include camel-core");
    }
    CamelComponentDetails details=new CamelComponentDetails();
    Result result=loadCamelComponentDetails(camelComponentName,details);
    if (result != null) {
      return result;
    }
    result=ensureCamelArtifactIdAdded(project,details,dependencyInstaller);
    if (result != null) {
      return result;
    }
    Map<String,String> options=new HashMap<String,String>();
    for (    InputComponent input : inputs) {
      String key=input.getName();
      if (input.hasValue()) {
        String value=input.getValue().toString();
        if (value != null) {
          options.put(key,value);
        }
      }
    }
    String uri="We need Camel 2.15.1";
    JavaResource existing=facet.getJavaResource(routeBuilder);
    if (existing == null || !existing.exists()) {
      return Results.fail("RouteBuilder " + routeBuilder + " does not exist");
    }
    JavaClassSource clazz=existing.getJavaType();
    MethodSource configure=clazz.getMethod("configure");
    String body=configure.getBody();
    clazz.addImport("org.apache.camel.Endpoint");
    StringBuilder sb=new StringBuilder(body);
    String line=String.format("Endpoint %s = endpoint(\"%s\");\n\n",endpointInstanceName,uri);
    sb.insert(0,line);
    body=sb.toString();
    configure.setBody(body);
    facet.saveJavaSource(clazz);
    return Results.success("Added endpoint " + endpointInstanceName + " to "+ routeBuilder);
  }
 catch (  IllegalArgumentException e) {
    return Results.fail(e.getMessage());
  }
}
