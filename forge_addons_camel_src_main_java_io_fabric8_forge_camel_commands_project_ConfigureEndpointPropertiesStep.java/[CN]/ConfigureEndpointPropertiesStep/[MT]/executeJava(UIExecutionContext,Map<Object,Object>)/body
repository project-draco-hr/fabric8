{
  String camelComponentName=mandatoryAttributeValue(attributeMap,"componentName");
  String endpointInstanceName=optionalAttributeValue(attributeMap,"instanceName");
  String routeBuilder=mandatoryAttributeValue(attributeMap,"routeBuilder");
  Project project=getSelectedProject(context);
  JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);
  Dependency core=CamelProjectHelper.findCamelCoreDependency(project);
  if (core == null) {
    return Results.fail("The project does not include camel-core");
  }
  CamelComponentDetails details=new CamelComponentDetails();
  Result result=loadCamelComponentDetails(camelComponentName,details);
  if (result != null) {
    return result;
  }
  result=ensureCamelArtifactIdAdded(project,details,dependencyInstaller);
  if (result != null) {
    return result;
  }
  Map<String,String> options=new HashMap<String,String>();
  for (  InputComponent input : allInputs) {
    String key=input.getName();
    if (input.hasValue()) {
      String value=input.getValue().toString();
      if (value != null) {
        boolean matchDefault=isDefaultValue(camelCatalog,camelComponentName,key,value);
        if (!matchDefault) {
          options.put(key,value);
        }
      }
    }
 else     if (input.isRequired() && input.hasDefaultValue()) {
      String value=input.getValue().toString();
      if (value != null) {
        options.put(key,value);
      }
    }
  }
  String uri=camelCatalog.asEndpointUri(camelComponentName,options,false);
  if (uri == null) {
    return Results.fail("Cannot create endpoint uri");
  }
  JavaResource existing=facet.getJavaResource(routeBuilder);
  if (existing == null || !existing.exists()) {
    return Results.fail("RouteBuilder " + routeBuilder + " does not exist");
  }
  JavaClassSource clazz=existing.getJavaType();
  boolean updated=true;
  if (endpointInstanceName != null) {
    FieldSource field=clazz.getField(endpointInstanceName);
    AnnotationSource annotation;
    if (field == null) {
      field=clazz.addField();
      field.setName(endpointInstanceName);
      field.setType("org.apache.camel.Endpoint");
      field.setPrivate();
      updated=false;
    }
    boolean cdi=findCamelArtifactDependency(project,"camel-cdi") != null;
    if (cdi) {
      if (!field.hasAnnotation("javax.inject.Inject")) {
        field.addAnnotation("javax.inject.Inject");
      }
      if (!field.hasAnnotation("org.apache.camel.cdi.Uri")) {
        field.addAnnotation("org.apache.camel.cdi.Uri");
      }
      annotation=field.getAnnotation("org.apache.camel.cdi.Uri");
      annotation.setStringValue(uri);
    }
 else {
      if (!field.hasAnnotation("org.apache.camel.EndpointInject")) {
        field.addAnnotation("org.apache.camel.EndpointInject");
      }
      annotation=field.getAnnotation("org.apache.camel.EndpointInject");
      annotation.setStringValue("uri",uri);
    }
    clazz.addImport("org.apache.camel.Endpoint");
    if (cdi) {
      clazz.addImport("javax.inject.Inject");
      clazz.addImport("org.apache.camel.cdi.Uri");
    }
 else {
      clazz.addImport("org.apache.camel.EndpointInject");
    }
    facet.saveJavaSource(clazz);
    if (updated) {
      return Results.success("Updated endpoint " + endpointInstanceName + " in "+ routeBuilder);
    }
 else {
      return Results.success("Added endpoint " + endpointInstanceName + " in "+ routeBuilder);
    }
  }
 else {
    MethodSource<JavaClassSource> method=CamelJavaParserHelper.findConfigureMethod(clazz);
    if (method != null) {
      String code=clazz.toUnformattedString();
      String endpointUrl=mandatoryAttributeValue(attributeMap,"endpointUri");
      String find=Pattern.quote(endpointUrl);
      code=code.replaceFirst(find,uri);
      existing.setContents(new ByteArrayInputStream(code.getBytes()),null);
      return Results.success("Updated endpoint " + endpointUrl + " -> "+ uri+ " in "+ routeBuilder);
    }
  }
  return Results.fail("Cannot update endpoint");
}
