{
  String lineNumber;
  if (root != null) {
    NodeList camels=root.getElementsByTagName("camelContext");
    if (camels != null && camels.getLength() == 1) {
      Node camel=camels.item(0);
      Node camelContext=null;
      boolean created=false;
      Node found=null;
      for (int i=0; i < camel.getChildNodes().getLength(); i++) {
        if ("camelContext".equals(camel.getNodeName())) {
          camelContext=camel;
        }
        Node child=camel.getChildNodes().item(i);
        if ("camelContext".equals(child.getNodeName())) {
          camelContext=child;
        }
        if ("endpoint".equals(child.getNodeName())) {
          String id=child.getAttributes().getNamedItem("id").getNodeValue();
          if (endpointInstanceName.equals(id)) {
            found=child;
            break;
          }
        }
      }
      int extraSpaces=0;
      int extraLines=0;
      if (found == null) {
        created=true;
        found=insertEndpointBefore(camel);
        if (found == null) {
          found=camelContext;
          extraSpaces=2;
          extraLines=1;
        }
      }
      if (found == null) {
        return Results.fail("Cannot find <camelContext> in XML file " + xml);
      }
      lineNumber=(String)found.getUserData(XmlLineNumberParser.LINE_NUMBER);
      List<String> lines=LineNumberHelper.readLines(file.getResourceInputStream());
      String line=String.format("<endpoint id=\"%s\" uri=\"%s\"/>",endpointInstanceName,uri);
      int idx=lineNumber != null ? Integer.valueOf(lineNumber) - 1 : 0;
      idx+=extraLines;
      int spaces=LineNumberHelper.leadingSpaces(lines,idx) + extraSpaces;
      line=LineNumberHelper.padString(line,spaces);
      if (created) {
        lines.add(idx,line);
      }
 else {
        lines.set(idx,line);
      }
      String content=LineNumberHelper.linesToString(lines);
      file.setContents(content);
    }
  }
  return Results.success("Added endpoint uri: " + uri + " in XML file "+ xml);
}
