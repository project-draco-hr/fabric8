{
  String camelComponentName=optionalAttributeValue(attributeMap,"componentName");
  String endpointInstanceName=optionalAttributeValue(attributeMap,"instanceName");
  String endpointUrl=mandatoryAttributeValue(attributeMap,"endpointUri");
  String mode=mandatoryAttributeValue(attributeMap,"mode");
  String xml=mandatoryAttributeValue(attributeMap,"xml");
  String lineNumber;
  if ("edit".equals(mode)) {
    lineNumber=mandatoryAttributeValue(attributeMap,"lineNumber");
  }
 else {
    lineNumber=optionalAttributeValue(attributeMap,"lineNumber");
  }
  Project project=getSelectedProject(context);
  ResourcesFacet facet=project.getFacet(ResourcesFacet.class);
  WebResourcesFacet webResourcesFacet=null;
  if (project.hasFacet(WebResourcesFacet.class)) {
    webResourcesFacet=project.getFacet(WebResourcesFacet.class);
  }
  Dependency core=CamelProjectHelper.findCamelCoreDependency(project);
  if (core == null) {
    return Results.fail("The project does not include camel-core");
  }
  CamelComponentDetails details=new CamelComponentDetails();
  Result result=loadCamelComponentDetails(camelComponentName,details);
  if (result != null) {
    return result;
  }
  result=ensureCamelArtifactIdAdded(project,details,dependencyInstaller);
  if (result != null) {
    return result;
  }
  Map<String,String> options=new HashMap<String,String>();
  for (  InputComponent input : inputs) {
    String key=input.getName();
    if (input.hasValue()) {
      String value=input.getValue().toString();
      if (value != null) {
        boolean matchDefault=isDefaultValue(camelComponentName,key,value);
        if (!matchDefault) {
          options.put(key,value);
        }
      }
    }
 else     if (input.isRequired() && input.hasDefaultValue()) {
      String value=input.getValue().toString();
      if (value != null) {
        options.put(key,value);
      }
    }
  }
  CamelCatalog catalog=new DefaultCamelCatalog();
  String uri=catalog.asEndpointUriXml(camelComponentName,options);
  if (uri == null) {
    return Results.fail("Cannot create endpoint uri");
  }
  FileResource file=facet != null ? facet.getResource(xml) : null;
  if (file == null || !file.exists()) {
    file=webResourcesFacet != null ? webResourcesFacet.getWebResource(xml) : null;
  }
  if (file == null || !file.exists()) {
    return Results.fail("Cannot find XML file " + xml);
  }
  if (lineNumber != null) {
    List<String> lines=LineNumberHelper.readLines(file.getResourceInputStream());
    return addEndpointJava(lines,lineNumber,endpointUrl,uri,file,xml);
  }
 else {
    Document root=XmlLineNumberParser.parseXml(file.getResourceInputStream());
    return addEndpointXml(root,endpointInstanceName,uri,file,xml);
  }
}
