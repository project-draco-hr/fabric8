{
  String camelComponentName=mandatoryAttributeValue(attributeMap,"componentName");
  String endpointInstanceName=mandatoryAttributeValue(attributeMap,"instanceName");
  String xml=mandatoryAttributeValue(attributeMap,"xml");
  Project project=getSelectedProject(context);
  ResourcesFacet facet=project.getFacet(ResourcesFacet.class);
  Dependency core=CamelProjectHelper.findCamelCoreDependency(project);
  if (core == null) {
    return Results.fail("The project does not include camel-core");
  }
  CamelComponentDetails details=new CamelComponentDetails();
  Result result=loadCamelComponentDetails(camelComponentName,details);
  if (result != null) {
    return result;
  }
  result=ensureCamelArtifactIdAdded(project,details,dependencyInstaller);
  if (result != null) {
    return result;
  }
  Map<String,String> options=new HashMap<String,String>();
  for (  InputComponent input : inputs) {
    String key=input.getName();
    if (input.hasValue()) {
      String value=input.getValue().toString();
      if (value != null) {
        options.put(key,value);
      }
    }
  }
  String uri="We need Camel 2.15.1";
  FileResource file=facet.getResource(xml);
  if (!file.exists()) {
    return Results.fail("Cannot find XML file " + xml);
  }
  Document root=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file.getResourceInputStream());
  if (root != null) {
    NodeList camels=root.getElementsByTagName("camelContext");
    if (camels != null && camels.getLength() == 1) {
      Node camel=camels.item(0);
      boolean created=false;
      Node found=null;
      for (int i=0; i < camel.getChildNodes().getLength(); i++) {
        Node child=camel.getChildNodes().item(i);
        if ("endpoint".equals(child.getNodeName())) {
          String id=child.getAttributes().getNamedItem("id").getNodeValue();
          if (endpointInstanceName.equals(id)) {
            found=child;
            break;
          }
        }
      }
      if (found == null) {
        created=true;
        found=root.createElement("endpoint");
      }
      Attr attrId=root.createAttribute("id");
      attrId.setValue(endpointInstanceName);
      Attr attrUri=root.createAttribute("uri");
      attrUri.setValue(uri);
      found.getAttributes().setNamedItem(attrId);
      found.getAttributes().setNamedItem(attrUri);
      if (created) {
        Node cutoff=insertEndpointBefore(camel);
        if (cutoff != null) {
          cutoff.getParentNode().insertBefore(found,cutoff);
        }
 else {
          camel.appendChild(found);
        }
      }
    }
    InputStream is=XmlHelper.documentToPrettyInputStream(root);
    if (is != null) {
      file.setContents(is);
      is.close();
    }
    return Results.success("Added endpoint " + endpointInstanceName + " to xml file "+ xml);
  }
 else {
    return Results.fail("Cannot parse XML file " + xml);
  }
}
