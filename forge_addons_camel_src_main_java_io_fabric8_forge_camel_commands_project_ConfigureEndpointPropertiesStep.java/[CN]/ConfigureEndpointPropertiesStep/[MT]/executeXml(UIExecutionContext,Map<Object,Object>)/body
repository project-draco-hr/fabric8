{
  String camelComponentName=mandatoryAttributeValue(attributeMap,"componentName");
  String endpointInstanceName=mandatoryAttributeValue(attributeMap,"instanceName");
  String xml=mandatoryAttributeValue(attributeMap,"xml");
  Project project=getSelectedProject(context);
  ResourcesFacet facet=project.getFacet(ResourcesFacet.class);
  Dependency core=CamelProjectHelper.findCamelCoreDependency(project);
  if (core == null) {
    return Results.fail("The project does not include camel-core");
  }
  CamelComponentDetails details=new CamelComponentDetails();
  Result result=loadCamelComponentDetails(camelComponentName,details);
  if (result != null) {
    return result;
  }
  result=ensureCamelArtifactIdAdded(project,details,dependencyInstaller);
  if (result != null) {
    return result;
  }
  Map<String,String> options=new HashMap<String,String>();
  for (  InputComponent input : inputs) {
    String key=input.getName();
    if (input.hasValue()) {
      String value=input.getValue().toString();
      if (value != null) {
        options.put(key,value);
      }
    }
  }
  String uri="We need Camel 2.15.1";
  FileResource file=facet.getResource(xml);
  if (!file.exists()) {
    return Results.fail("Cannot find XML file " + xml);
  }
  Document root=XmlLineNumberParser.parseXml(file.getResourceInputStream());
  String lineNumber;
  String columnNumber;
  if (root != null) {
    NodeList camels=root.getElementsByTagName("camelContext");
    if (camels != null && camels.getLength() == 1) {
      Node camel=camels.item(0);
      boolean created=false;
      Node found=null;
      for (int i=0; i < camel.getChildNodes().getLength(); i++) {
        Node child=camel.getChildNodes().item(i);
        if ("endpoint".equals(child.getNodeName())) {
          String id=child.getAttributes().getNamedItem("id").getNodeValue();
          if (endpointInstanceName.equals(id)) {
            found=child;
            break;
          }
        }
      }
      if (found == null) {
        created=true;
        found=insertEndpointBefore(camel);
        if (found == null) {
          found=camel.getLastChild();
        }
        if (found == null) {
          found=camel;
        }
      }
      lineNumber=(String)found.getUserData(XmlLineNumberParser.LINE_NUMBER);
      if (created) {
        List<String> lines=LineNumberHelper.readLines(file.getResourceInputStream());
        String line=String.format("<endpoint id=\"%s\" uri=\"%s\"/>",endpointInstanceName,uri);
        int idx=Integer.valueOf(lineNumber) - 1;
        int spaces=LineNumberHelper.leadingSpaces(lines,idx);
        line=LineNumberHelper.padString(line,spaces);
        lines.add(idx,line);
        String content=LineNumberHelper.linesToString(lines);
        file.setContents(content);
        return Results.success("Added endpoint: " + endpointInstanceName + " with uri: "+ uri);
      }
 else {
        List<String> lines=LineNumberHelper.readLines(file.getResourceInputStream());
        String line=String.format("<endpoint id=\"%s\" uri=\"%s\"/>",endpointInstanceName,uri);
        int idx=Integer.valueOf(lineNumber) - 1;
        int spaces=LineNumberHelper.leadingSpaces(lines,idx - 1);
        line=LineNumberHelper.padString(line,spaces);
        lines.set(idx,line);
        String content=LineNumberHelper.linesToString(lines);
        file.setContents(content);
        return Results.success("Update endpoint: " + endpointInstanceName + " with uri: "+ uri);
      }
    }
    return Results.fail("Cannot find <camelContext> in XML file " + xml);
  }
 else {
    return Results.fail("Cannot parse XML file " + xml);
  }
}
