{
  BuildConfig buildConfig=getBuildConfig(name,namespace);
  if (buildConfig != null) {
    List<BuildTriggerPolicy> triggers=buildConfig.getTriggers();
    String type=null;
    String secret=null;
    for (    BuildTriggerPolicy trigger : triggers) {
      WebHookTrigger hook=trigger.getGeneric();
      if (hook != null) {
        secret=hook.getSecret();
        String aType=trigger.getType();
        if (Strings.isNotBlank(secret) && Strings.isNotBlank(aType)) {
          type=aType;
        }
      }
    }
    if (Strings.isNullOrBlank(secret) || Strings.isNullOrBlank(type)) {
      for (      BuildTriggerPolicy trigger : triggers) {
        WebHookTrigger hook=trigger.getGithub();
        if (hook != null) {
          secret=hook.getSecret();
          String aType=trigger.getType();
          if (Strings.isNotBlank(secret) && Strings.isNotBlank(aType)) {
            type=aType;
          }
        }
      }
    }
    if (Strings.isNullOrBlank(type)) {
      throw new IllegalArgumentException("BuildConfig does not have a generic or github trigger for build: " + name + " namespace: "+ namespace);
    }
    if (Strings.isNullOrBlank(secret)) {
      throw new IllegalArgumentException("BuildConfig does not have secret for build: " + name + " namespace: "+ namespace);
    }
    LOG.info("Triggering build " + name + " namespace: "+ namespace+ " type: "+ type);
    return doTriggerBuild(name,namespace,type,secret);
  }
 else {
    throw new IllegalArgumentException("No BuildConfig for build: " + name + " namespace: "+ namespace);
  }
}
