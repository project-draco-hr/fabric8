{
  String baseUrl;
  String url;
  WebClient webClient;
  boolean useVanillaUrl=true;
  boolean useFabric8Console=true;
  if (useFabric8Console) {
    baseUrl=getServiceURL("fabric8-console-service",namespace,"http",false);
    url=URLUtils.pathJoin("/kubernetes/osapi",KubernetesHelper.defaultOsApiVersion,"buildConfigHooks",name,secret,type);
    webClient=new KubernetesFactory(baseUrl,true).createWebClient();
  }
 else {
    KubernetesFactory factory=getFactory(true);
    baseUrl=factory.getAddress();
    webClient=factory.createWebClient();
    url=URLUtils.pathJoin("/osapi",KubernetesHelper.defaultOsApiVersion,"buildConfigHooks",name,secret,type);
  }
  if (Strings.isNotBlank(namespace)) {
    url+="?namespace=" + namespace;
  }
  if (useVanillaUrl) {
    String triggerBuildUrlText=URLUtils.pathJoin(baseUrl,url);
    LOG.info("Using a URL to trigger: " + triggerBuildUrlText);
    try {
      URL triggerBuildURL=new URL(triggerBuildUrlText);
      HttpURLConnection connection=(HttpURLConnection)triggerBuildURL.openConnection();
      connection.setRequestMethod("POST");
      connection.setRequestProperty("Content-Type","application/json");
      connection.setRequestProperty("Accept","application/json");
      connection.setDoOutput(true);
      OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream());
      out.close();
      int status=connection.getResponseCode();
      String message=connection.getResponseMessage();
      System.out.println("Got response code: " + status + " message: "+ message);
      if (status != 200) {
        throw new WebApplicationException(status + ": " + message,status);
      }
 else {
        return null;
      }
    }
 catch (    IOException e) {
      throw new WebApplicationException(e,400);
    }
  }
 else {
    LOG.info("Triggering build by posting to: " + url);
    webClient.getHeaders().remove(HttpHeaders.ACCEPT);
    webClient=webClient.path(url).header(HttpHeaders.CONTENT_TYPE,"application/json");
    Response response=webClient.post(new HashMap());
    int status=response.getStatus();
    if (status != 200) {
      Object entity=response.getEntity();
      if (entity != null) {
        String message=ExceptionResponseMapper.extractErrorMessage(entity);
        throw new WebApplicationException(status + ": " + message,status);
      }
 else {
        throw new WebApplicationException(status);
      }
    }
    return null;
  }
}
