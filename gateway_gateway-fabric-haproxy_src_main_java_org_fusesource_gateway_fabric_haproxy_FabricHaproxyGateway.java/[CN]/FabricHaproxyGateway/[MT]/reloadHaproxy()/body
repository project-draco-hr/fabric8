{
  if (Strings.isNotBlank(reloadCommand)) {
    LOG.info("Executing command: " + reloadCommand);
    Map<String,String> envVars=new HashMap<String,String>();
    envVars.putAll(System.getenv());
    envVars.put("FABRIC8_HAPROXY_CONFIG",configFile);
    List<String> envVarList=new ArrayList<String>();
    for (    Map.Entry<String,String> entry : envVars.entrySet()) {
      envVarList.add(entry.getKey() + "=" + entry.getValue());
    }
    final String[] envVarArray=envVarList.toArray(new String[envVarList.size()]);
    executor.execute(new Runnable(){
      @Override public void run(){
        Process process=null;
        Runtime runtime=Runtime.getRuntime();
        try {
          if (Strings.isNotBlank(reloadCommandDirectory)) {
            File directory=new File(reloadCommandDirectory);
            process=runtime.exec(reloadCommand,envVarArray,directory);
          }
 else {
            process=runtime.exec(reloadCommand,envVarArray);
          }
          forEachLine(process.getInputStream(),"stdout",new OnValue<String>(){
            @Override public void onValue(            String value){
              LOG.info(value);
            }
          }
);
          forEachLine(process.getErrorStream(),"stderr",new OnValue<String>(){
            @Override public void onValue(            String value){
              LOG.error(value);
            }
          }
);
          try {
            int exitCode=process.waitFor();
            LOG.info("command exit code: " + exitCode);
          }
 catch (          InterruptedException e) {
            LOG.warn("Failed to wait for process exit code: " + e,e);
          }
        }
 catch (        Exception e) {
          LOG.error("Failed to create process: " + reloadCommand + ". "+ e,e);
        }
 finally {
          if (process != null) {
            try {
              process.destroy();
            }
 catch (            Exception e) {
              LOG.warn("Failed to destroy the process: " + e,e);
            }
          }
        }
      }
    }
);
  }
}
