{
  Map<String,Object> props=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  if (properties != null) {
    try {
      props.putAll(properties);
    }
 catch (    ClassCastException e) {
      IllegalArgumentException iae=new IllegalArgumentException("non-String key in properties");
      iae.initCause(e);
      throw iae;
    }
    if (props.size() < properties.size()) {
      throw new IllegalArgumentException("duplicate keys with different cases in properties: " + new ArrayList<String>(props.keySet()).removeAll(properties.keySet()));
    }
  }
  for (  String key : reference.getPropertyKeys()) {
    if (!props.containsKey(key)) {
      props.put(key,reference.getProperty(key));
    }
  }
  if (!props.containsKey(ENDPOINT_SERVICE_ID)) {
    props.put(ENDPOINT_SERVICE_ID,reference.getProperty(Constants.SERVICE_ID));
  }
  if (!props.containsKey(ENDPOINT_FRAMEWORK_UUID)) {
    String uuid=null;
    try {
      uuid=AccessController.doPrivileged(new PrivilegedAction<String>(){
        public String run(){
          return reference.getBundle().getBundleContext().getProperty("org.osgi.framework.uuid");
        }
      }
);
    }
 catch (    SecurityException e) {
    }
    if (uuid != null) {
      props.put(ENDPOINT_FRAMEWORK_UUID,uuid);
    }
  }
  conditionProperties(props);
  this.properties=Collections.unmodifiableMap(props);
  interfaces=verifyObjectClassProperty();
  serviceId=verifyLongProperty(ENDPOINT_SERVICE_ID);
  frameworkUUID=verifyStringProperty(ENDPOINT_FRAMEWORK_UUID);
  id=verifyStringProperty(ENDPOINT_ID).trim();
  if (id == null) {
    throw new IllegalArgumentException(ENDPOINT_ID + " property must be set");
  }
  if (getConfigurationTypes().isEmpty()) {
    throw new IllegalArgumentException(SERVICE_IMPORTED_CONFIGS + " property must be set and non-empty");
  }
}
