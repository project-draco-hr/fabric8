{
  Map<String,Object> props=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);
  try {
    props.putAll(properties);
  }
 catch (  ClassCastException e) {
    IllegalArgumentException iae=new IllegalArgumentException("non-String key in properties");
    iae.initCause(e);
    throw iae;
  }
  if (props.size() < properties.size()) {
    throw new IllegalArgumentException("duplicate keys with different cases in properties: " + new ArrayList<String>(props.keySet()).removeAll(properties.keySet()));
  }
  conditionProperties(props);
  this.properties=Collections.unmodifiableMap(props);
  interfaces=verifyObjectClassProperty();
  serviceId=verifyLongProperty(ENDPOINT_SERVICE_ID);
  frameworkUUID=verifyStringProperty(ENDPOINT_FRAMEWORK_UUID);
  id=verifyStringProperty(ENDPOINT_ID).trim();
  if (id == null) {
    throw new IllegalArgumentException(ENDPOINT_ID + " property must be set");
  }
  if (getConfigurationTypes().isEmpty()) {
    throw new IllegalArgumentException(SERVICE_IMPORTED_CONFIGS + " property must be set and non-empty");
  }
}
