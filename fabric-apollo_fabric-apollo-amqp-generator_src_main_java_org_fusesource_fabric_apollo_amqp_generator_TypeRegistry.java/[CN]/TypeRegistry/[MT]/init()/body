{
  typeRegistry=cm._class(typeRegistryName);
  typeRegistry.field(JMod.PUBLIC | JMod.FINAL | JMod.STATIC,cm.BYTE,"DESCRIBED_FORMAT_CODE",JExpr.direct("0x00"));
  typeRegistry.field(JMod.PUBLIC | JMod.FINAL | JMod.STATIC,cm.BYTE,"NULL_FORMAT_CODE",JExpr.direct("0x40"));
  JFieldVar singleton=typeRegistry.field(JMod.PROTECTED | JMod.FINAL | JMod.STATIC,(JType)typeRegistry,"SINGLETON",JExpr._new(typeRegistry));
  JFieldVar formatCodeMap=typeRegistry.field(JMod.PROTECTED | JMod.FINAL,mapLongClass,"formatCodeMap",JExpr._new(hashMapLongClass));
  JFieldVar symbolicCodeMap=typeRegistry.field(JMod.PROTECTED | JMod.FINAL,mapBufferClass,"symbolicCodeMap",JExpr._new(hashMapBufferClass));
  JMethod singletonAccessor=typeRegistry.method(JMod.PUBLIC | JMod.STATIC,typeRegistry,"instance");
  singletonAccessor.body()._return(JExpr.ref("SINGLETON"));
  JMethod formatCodeMapGetter=typeRegistry.method(JMod.PUBLIC,mapLongClass,"getFormatCodeMap");
  formatCodeMapGetter.body()._return(JExpr.ref("formatCodeMap"));
  JMethod symbolicCodeMapGetter=typeRegistry.method(JMod.PUBLIC,mapBufferClass,"getSymbolicCodeMap");
  symbolicCodeMapGetter.body()._return(JExpr.ref("symbolicCodeMap"));
}
