{
  LOGGER.info("Configuration has changed; so checking the external Java containers are up to date");
  Container[] containers=fabricService.getContainers();
  for (  Container container : containers) {
    Profile profile=container.getOverlayProfile();
    Map<String,Map<String,String>> configurations=profile.getConfigurations();
    Map<String,String> openshiftConfiguration=configurations.get(OpenShiftConstants.OPENSHIFT_PID);
    if (openshiftConfiguration != null) {
      if (OpenShiftUtils.isFabricManaged(openshiftConfiguration)) {
        String containerId=container.getId();
        IOpenShiftConnection connection=OpenShiftUtils.createConnection(container);
        CreateOpenshiftContainerOptions options=OpenShiftUtils.getCreateOptions(container);
        if (connection == null || options == null) {
          LOGGER.warn("Ignoring container which has no openshift connection or options. connection: " + connection + " options: "+ options);
        }
 else {
          try {
            IApplication application=OpenShiftUtils.getApplication(container,connection);
            if (application != null) {
              String gitUrl=application.getGitUrl();
              if (gitUrl != null) {
                LOGGER.info("Git URL is " + gitUrl);
                CartridgeGitRepository repo=new CartridgeGitRepository(containerId);
                final List<IOpenShiftSSHKey> sshkeys=application.getDomain().getUser().getSSHKeys();
                CredentialsProvider credentials=new CredentialsProvider(){
                  @Override public boolean supports(                  CredentialItem... items){
                    return true;
                  }
                  @Override public boolean isInteractive(){
                    return true;
                  }
                  @Override public boolean get(                  URIish uri,                  CredentialItem... items) throws UnsupportedCredentialItem {
                    for (                    CredentialItem item : items) {
                      if (item instanceof CredentialItem.StringType) {
                        CredentialItem.StringType stringType=(CredentialItem.StringType)item;
                        if (sshkeys.size() > 0) {
                          IOpenShiftSSHKey sshKey=sshkeys.get(0);
                          String passphrase=sshKey.getPublicKey();
                          stringType.setValue(passphrase);
                        }
                        continue;
                      }
                    }
                    return true;
                  }
                }
;
                repo.cloneOrPull(gitUrl,credentials);
                File localRepo=repo.getLocalRepo();
                updateDeployment(container,openshiftConfiguration,localRepo);
              }
            }
          }
 catch (          Exception e) {
            LOGGER.error("Failed to update container " + containerId + ". Reason: "+ e,e);
          }
 finally {
            OpenShiftUtils.close(connection);
          }
        }
      }
    }
  }
}
