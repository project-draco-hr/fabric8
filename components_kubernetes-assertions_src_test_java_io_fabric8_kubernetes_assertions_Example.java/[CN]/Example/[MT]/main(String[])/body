{
  try {
    final KubernetesClient client=new DefaultKubernetesClient();
    assertThat(client).pods().runningStatus().hasSize(6);
    assertThat(client).pods().runningStatus().filterLabel("provider","fabric8").assertSize().isGreaterThan(0);
    assertThat(client.services().inNamespace("default").withName("fabric8").get().getMetadata()).hasName("fabric8");
    Map<String,String> consoleLabels=new HashMap<>();
    consoleLabels.put("component","console");
    consoleLabels.put("provider","fabric8");
    assertThat(client).podsForService("fabric8","default").runningStatus().extracting("metadata").extracting("labels").contains(consoleLabels);
    assertThat(client).podsForService("fabric8","default").runningStatus().hasSize(1).extracting("metadata").extracting("labels").contains(consoleLabels);
    assertThat(client).podsForService("fabric8","default").logs().doesNotContainText("Exception","Error");
    assertThat(client).pods().logs().doesNotContainText("Exception","Error");
    assertAssertionError(new Block(){
      @Override public void invoke() throws Exception {
        try {
          assertThat(client.services().inNamespace("default").withName("doesNotExist").get().getMetadata()).hasName("fabric8-console-controller");
        }
 catch (        KubernetesClientException e) {
          if (e.getCode() != 404) {
            throw e;
          }
 else {
            throw new AssertionError(e);
          }
        }
      }
    }
);
    assertAssertionError(new Block(){
      @Override public void invoke() throws Exception {
        try {
          assertThat(client).pods().runningStatus().filterLabel("component","doesNotExist").hasSize(1);
        }
 catch (        KubernetesClientException e) {
          if (e.getCode() != 404) {
            throw e;
          }
 else {
            throw new AssertionError(e);
          }
        }
      }
    }
);
    System.out.println("Done!");
  }
 catch (  Throwable e) {
    System.out.println("Caught: " + e);
    e.printStackTrace();
  }
}
