{
  try {
    final KubernetesClient client=new KubernetesClient();
    System.out.println("About to run test on: " + client.getAddress());
    assertThat(client).pods().runningStatus().filterLabel("component","fabric8Console").hasSize(1);
    assertThat(client).pods().runningStatus().filterLabel("component","fabric8Console").assertSize().isGreaterThan(0);
    assertAssertionError(new Block(){
      @Override public void invoke() throws Exception {
        assertThat(client).pods().runningStatus().filterLabel("component","doesNotExist").hasSize(1);
      }
    }
);
    assertAssertionError(new Block(){
      @Override public void invoke() throws Exception {
        Map<String,String> badLabels=new HashMap<>();
        badLabels.put("component","doesNotExist");
        assertThat(client).pods().extracting("labels").contains(badLabels);
      }
    }
);
    assertThat(client).replicationController("fabric8ConsoleController").hasId("fabric8ConsoleController");
    Map<String,String> consoleLabels=new HashMap<>();
    consoleLabels.put("component","fabric8Console");
    assertThat(client).podsForReplicationController("fabric8ConsoleController").runningStatus().extracting("labels").contains(consoleLabels);
    assertAssertionError(new Block(){
      @Override public void invoke() throws Exception {
        assertThat(client).replicationController("doesNotExist").hasId("fabric8ConsoleController");
      }
    }
);
    assertThat(client).podsForService("fabric8-console-service").runningStatus().hasSize(1).extracting("labels").contains(consoleLabels);
    System.out.println("Done!");
  }
 catch (  Throwable e) {
    System.out.println("Caught: " + e);
    e.printStackTrace();
  }
}
