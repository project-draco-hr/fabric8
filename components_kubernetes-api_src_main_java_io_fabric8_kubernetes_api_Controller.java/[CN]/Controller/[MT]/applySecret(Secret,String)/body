{
  String namespace=getNamespace();
  String id=getName(secret);
  Objects.notNull(id,"No name for " + secret + " "+ sourceName);
  if (isServicesOnlyMode()) {
    LOG.debug("Only processing Services right now so ignoring Secrets: " + id);
    return;
  }
  Secret old=kubernetesClient.secrets().inNamespace(namespace).withName(id).get();
  if (isRunning(old)) {
    if (UserConfigurationCompare.configEqual(secret,old)) {
      LOG.info("Secret hasn't changed so not doing anything");
      return;
    }
 else {
      if (isRecreateMode()) {
        kubernetesClient.secrets().inNamespace(namespace).withName(id).delete();
        doCreateSecret(secret,namespace,sourceName);
      }
 else {
        LOG.info("Updateing a secret from " + sourceName);
        try {
          Object answer=kubernetesClient.secrets().inNamespace(namespace).withName(id).replace(secret);
          logGeneratedEntity("Updated secret:",namespace,secret,answer);
        }
 catch (        Exception e) {
          onApplyError("Failed to update secret from " + sourceName + ". "+ e+ ". "+ secret,e);
        }
      }
    }
  }
 else {
    if (!isAllowCreate()) {
      LOG.warn("Creation disabled so not creating a secret from " + sourceName + " namespace "+ namespace+ " name "+ getName(secret));
    }
 else {
      doCreateSecret(secret,namespace,sourceName);
    }
  }
}
