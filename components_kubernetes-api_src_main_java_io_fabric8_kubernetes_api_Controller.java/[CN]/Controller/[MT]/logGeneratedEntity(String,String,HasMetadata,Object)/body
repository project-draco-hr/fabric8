{
  if (logJsonDir != null) {
    File namespaceDir=new File(logJsonDir,namespace);
    namespaceDir.mkdirs();
    String kind=getKind(entity);
    String name=KubernetesHelper.getName(entity);
    if (Strings.isNotBlank(kind)) {
      name=kind.toLowerCase() + "-" + name;
    }
    if (Strings.isNullOrBlank(name)) {
      LOG.warn("No name for the entity " + entity);
    }
 else {
      String fileName=name + ".json";
      File file=new File(namespaceDir,fileName);
      if (file.exists()) {
        int idx=1;
        while (true) {
          fileName=name + "-" + idx+++ ".json";
          file=new File(namespaceDir,fileName);
          if (!file.exists()) {
            break;
          }
        }
      }
      String text;
      if (result instanceof String) {
        text=result.toString();
      }
 else {
        try {
          text=KubernetesHelper.toJson(result);
        }
 catch (        JsonProcessingException e) {
          LOG.warn("Could not convert " + result + " to JSON: "+ e,e);
          if (result != null) {
            text=result.toString();
          }
 else {
            text="null";
          }
        }
      }
      try {
        IOHelpers.writeFully(file,text);
        Object fileLocation=file;
        if (basedir != null) {
          String path=Files.getRelativePath(basedir,file);
          if (path != null) {
            fileLocation=Strings.stripPrefix(path,"/");
          }
        }
        LOG.info(message + fileLocation);
      }
 catch (      IOException e) {
        LOG.warn("Failed to write to file " + file + ". "+ e,e);
      }
      return;
    }
  }
  LOG.info(message + result);
}
