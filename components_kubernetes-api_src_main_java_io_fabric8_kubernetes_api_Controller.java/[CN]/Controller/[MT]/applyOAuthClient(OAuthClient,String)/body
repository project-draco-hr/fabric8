{
  OpenShiftClient openShiftClient=kubernetesClient.adapt(OpenShiftClient.class);
  if (supportOAuthClients) {
    String id=getName(entity);
    Objects.notNull(id,"No name for " + entity + " "+ sourceName);
    if (isServicesOnlyMode()) {
      LOG.debug("Only processing Services right now so ignoring OAuthClient: " + id);
      return;
    }
    OAuthClient old=openShiftClient.oAuthClients().withName(id).get();
    if (isRunning(old)) {
      if (isIgnoreRunningOAuthClients()) {
        LOG.info("Not updating the OAuthClient which are shared across namespaces as its already running");
        return;
      }
      if (UserConfigurationCompare.configEqual(entity,old)) {
        LOG.info("OAuthClient hasn't changed so not doing anything");
      }
 else {
        if (isRecreateMode()) {
          openShiftClient.oAuthClients().withName(id).delete();
          doCreateOAuthClient(entity,sourceName);
        }
 else {
          try {
            Object answer=openShiftClient.oAuthClients().withName(id).update(entity);
            LOG.info("Updated pod result: " + answer);
          }
 catch (          Exception e) {
            onApplyError("Failed to update pod from " + sourceName + ". "+ e+ ". "+ entity,e);
          }
        }
      }
    }
 else {
      if (!isAllowCreate()) {
        LOG.warn("Creation disabled so not creating an OAuthClient from " + sourceName + " name "+ getName(entity));
      }
 else {
        doCreateOAuthClient(entity,sourceName);
      }
    }
  }
}
