{
  if (dto instanceof Pod) {
    applyPod((Pod)dto,sourceName);
  }
 else   if (dto instanceof ReplicationController) {
    applyReplicationController((ReplicationController)dto,sourceName);
  }
 else   if (dto instanceof Service) {
    applyService((Service)dto,sourceName);
  }
 else   if (dto instanceof Namespace) {
    applyNamespace((Namespace)dto);
  }
 else   if (dto instanceof Route) {
    applyRoute((Route)dto,sourceName);
  }
 else   if (dto instanceof BuildConfig) {
    applyBuildConfig((BuildConfig)dto,sourceName);
  }
 else   if (dto instanceof DeploymentConfig) {
    DeploymentConfig resource=(DeploymentConfig)dto;
    OpenShiftClient openShiftClient=getOpenShiftClientOrNull();
    if (openShiftClient != null) {
      applyResource(resource,sourceName,openShiftClient.deploymentConfigs());
    }
 else {
      LOG.warn("Not connected to OpenShift cluster so cannot apply entity " + dto);
    }
  }
 else   if (dto instanceof RoleBinding) {
    RoleBinding resource=(RoleBinding)dto;
    OpenShiftClient openShiftClient=getOpenShiftClientOrNull();
    if (openShiftClient != null) {
      applyResource(resource,sourceName,openShiftClient.roleBindings());
    }
 else {
      LOG.warn("Not connected to OpenShift cluster so cannot apply entity " + dto);
    }
  }
 else   if (dto instanceof ImageStream) {
    applyImageStream((ImageStream)dto,sourceName);
  }
 else   if (dto instanceof OAuthClient) {
    applyOAuthClient((OAuthClient)dto,sourceName);
  }
 else   if (dto instanceof Template) {
    applyTemplate((Template)dto,sourceName);
  }
 else   if (dto instanceof ServiceAccount) {
    applyServiceAccount((ServiceAccount)dto,sourceName);
  }
 else   if (dto instanceof Secret) {
    applySecret((Secret)dto,sourceName);
  }
 else   if (dto instanceof ConfigMap) {
    applyResource((ConfigMap)dto,sourceName,kubernetesClient.configMaps());
  }
 else   if (dto instanceof DaemonSet) {
    applyResource((DaemonSet)dto,sourceName,kubernetesClient.extensions().daemonSets());
  }
 else   if (dto instanceof Deployment) {
    applyResource((Deployment)dto,sourceName,kubernetesClient.extensions().deployments());
  }
 else   if (dto instanceof ReplicaSet) {
    applyResource((ReplicaSet)dto,sourceName,kubernetesClient.extensions().replicaSets());
  }
 else   if (dto instanceof Ingress) {
    applyResource((Ingress)dto,sourceName,kubernetesClient.extensions().ingresses());
  }
 else   if (dto instanceof PersistentVolumeClaim) {
    applyResource((PersistentVolumeClaim)dto,sourceName,kubernetesClient.persistentVolumeClaims());
  }
 else   if (dto instanceof HasMetadata) {
    HasMetadata entity=(HasMetadata)dto;
    try {
      LOG.info("Applying " + getKind(entity) + " "+ getName(entity)+ " from "+ sourceName);
      kubernetesClient.resource(entity).inNamespace(getNamespace()).apply();
    }
 catch (    Exception e) {
      onApplyError("Failed to create " + getKind(entity) + " from "+ sourceName+ ". "+ e,e);
    }
  }
 else {
    throw new IllegalArgumentException("Unknown entity type " + dto);
  }
}
