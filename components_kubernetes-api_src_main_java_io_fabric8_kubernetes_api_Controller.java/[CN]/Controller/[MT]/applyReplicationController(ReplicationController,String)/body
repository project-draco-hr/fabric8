{
  String namespace=getNamespace();
  String id=getName(replicationController);
  Objects.notNull(id,"No name for " + replicationController + " "+ sourceName);
  if (isServicesOnlyMode()) {
    LOG.debug("Only processing Services right now so ignoring ReplicationController: " + namespace + ":"+ id);
    return;
  }
  ReplicationController old=kubernetes.replicationControllers().inNamespace(namespace).withName(id).get();
  if (isRunning(old)) {
    if (UserConfigurationCompare.configEqual(replicationController,old)) {
      LOG.info("ReplicationController hasn't changed so not doing anything");
    }
 else {
      if (isRecreateMode()) {
        kubernetes.replicationControllers().inNamespace(namespace).withName(id).delete();
        doCreateReplicationController(replicationController,namespace,sourceName);
      }
 else {
        LOG.info("Updating replicationController from " + sourceName + " namespace "+ namespace+ " name "+ getName(replicationController));
        try {
          Object answer=kubernetes.replicationControllers().inNamespace(namespace).withName(id).update(replicationController);
          logGeneratedEntity("Updated replicationController: ",namespace,replicationController,answer);
          if (deletePodsOnReplicationControllerUpdate) {
            kubernetes.replicationControllers().inNamespace(namespace).withName(KubernetesHelper.getName(replicationController)).delete();
            LOG.info("Deleting any pods for the replication controller to ensure they use the new configuration");
          }
 else {
            LOG.info("Warning not deleted any pods so they could well be running with the old configuration!");
          }
        }
 catch (        Exception e) {
          onApplyError("Failed to update replicationController from " + sourceName + ". "+ e+ ". "+ replicationController,e);
        }
      }
    }
  }
 else {
    if (!isAllowCreate()) {
      LOG.warn("Creation disabled so not creating a replicationController from " + sourceName + " namespace "+ namespace+ " name "+ getName(replicationController));
    }
 else {
      doCreateReplicationController(replicationController,namespace,sourceName);
    }
  }
}
