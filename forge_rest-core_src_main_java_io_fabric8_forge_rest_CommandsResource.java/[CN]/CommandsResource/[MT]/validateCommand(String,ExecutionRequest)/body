{
  try {
    String resourcePath=executionRequest.getResource();
    try (RestUIContext context=createUIContext(resourcePath)){
      UICommand command=getCommandByName(context,name);
      if (command == null) {
        return Response.status(Status.NOT_FOUND).build();
      }
      List<Map<String,String>> inputList=executionRequest.getInputList();
      CommandController controller=createController(context,command);
      ValidationResult answer=null;
      if (controller instanceof WizardCommandController) {
        WizardCommandController wizardCommandController=(WizardCommandController)controller;
        List<WizardCommandController> controllers=new ArrayList<>();
        List<CommandInputDTO> stepPropertiesList=new ArrayList<>();
        List<ValidationResult> stepResultList=new ArrayList<>();
        List<ValidationResult> stepValidationList=new ArrayList<>();
        controllers.add(wizardCommandController);
        WizardCommandController lastController=wizardCommandController;
        List<UIMessage> lastResult=null;
        int page=executionRequest.wizardStep();
        int nextPage=page + 1;
        boolean canMoveToNextStep=false;
        for (        Map<String,String> inputs : inputList) {
          UICommands.populateController(inputs,lastController,getConverterFactory());
          CommandInputDTO stepDto=UICommands.createCommandInputDTO(context,command,lastController);
          stepPropertiesList.add(stepDto);
          canMoveToNextStep=lastController.canMoveToNextStep();
          boolean valid=lastController.isValid();
          if (!canMoveToNextStep) {
            lastResult=lastController.validate();
            LOG.debug("Invoked command " + name + " with "+ executionRequest+ " result: "+ lastResult);
            ValidationResult stepResults=UICommands.createValidationResult(context,controller,lastResult);
            stepResultList.add(stepResults);
            break;
          }
 else           if (!valid) {
            LOG.warn("Cannot move to next step as invalid despite the validation saying otherwise");
            break;
          }
          WizardCommandController nextController=lastController.next();
          if (nextController != null) {
            if (nextController == lastController) {
              LOG.warn("No idea whats going on ;)");
              break;
            }
            lastController=nextController;
            lastController.initialize();
            controllers.add(lastController);
          }
 else {
            int i=0;
            for (            WizardCommandController stepController : controllers) {
              Map<String,String> stepControllerInputs=inputList.get(i++);
              UICommands.populateController(stepControllerInputs,stepController,getConverterFactory());
              lastResult=stepController.validate();
              LOG.debug("Invoked command " + name + " with "+ executionRequest+ " result: "+ lastResult);
              ValidationResult stepResults=UICommands.createValidationResult(context,controller,lastResult);
              stepResultList.add(stepResults);
            }
            break;
          }
        }
        answer=UICommands.createValidationResult(context,controller,lastResult);
        WizardResultsDTO wizardResultsDTO=new WizardResultsDTO(stepPropertiesList,stepResultList,new ArrayList<ExecutionResult>());
        answer.setWizardResults(wizardResultsDTO);
      }
 else {
        Map<String,String> inputs=inputList.get(0);
        UICommands.populateController(inputs,controller,getConverterFactory());
        List<UIMessage> result=controller.validate();
        LOG.debug("Invoked command " + name + " with "+ executionRequest+ " result: "+ result);
        answer=UICommands.createValidationResult(context,controller,result);
      }
      return Response.ok(answer).build();
    }
   }
 catch (  Throwable e) {
    LOG.warn("Failed to invoke command " + name + " on "+ executionRequest+ ". "+ e,e);
    throw e;
  }
}
