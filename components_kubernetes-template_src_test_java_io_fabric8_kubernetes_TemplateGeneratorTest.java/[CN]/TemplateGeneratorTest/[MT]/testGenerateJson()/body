{
  String basedir=System.getProperty("basedir",".");
  File jsonFile=new File(basedir + "/target/templateGenerator/sample.json").getCanonicalFile();
  recursiveDelete(jsonFile);
  String name="MyApp";
  int replicaCount=3;
  CreateAppDTO dto=new CreateAppDTO();
  dto.setName(name);
  dto.setDockerImage("fabric8/hawtio");
  dto.setReplicaCount(replicaCount);
  List<Port> ports=new ArrayList<>();
  Port jolokiaPort=new Port();
  jolokiaPort.setHostPort(10001);
  jolokiaPort.setContainerPort(8778);
  ports.add(jolokiaPort);
  dto.setPorts(ports);
  Map<String,String> labels=new HashMap<>();
  labels.put("foo","bar");
  labels.put("drink","beer");
  dto.setLabels(labels);
  TemplateGenerator generator=new TemplateGenerator(dto);
  generator.generate(jsonFile);
  labels.put("name",name);
  String json=IOHelpers.readFully(jsonFile);
  System.out.println("Generated: " + json);
  Object loadedDTO=KubernetesHelper.loadJson(json);
  System.out.println("Loaded json DTO: " + loadedDTO);
  assertTrue("Loaded DTO should be a ReplicationControllerSchema but was " + loadedDTO,loadedDTO instanceof ReplicationControllerSchema);
  ReplicationControllerSchema rc=(ReplicationControllerSchema)loadedDTO;
  assertThat(rc.getLabels()).isEqualTo(labels);
  ControllerDesiredState desiredState=rc.getDesiredState();
  assertThat(desiredState.getReplicas()).isEqualTo(replicaCount);
  assertThat(desiredState.getReplicaSelector()).isEqualTo(labels);
}
