{
  String namespace=event.getNamespace();
  String buildName=event.getConfigName();
  String buildUuid=event.getUid();
  String buildLink=event.getBuildLink();
  System.out.println("Build: " + buildUuid + " for config: "+ buildName+ " finished. Status: "+ event.getStatus()+ " link: "+ buildLink);
  BuildCorrelationKey key=BuildCorrelationKey.create(event);
  Map<String,String> signalObject=new HashMap<>();
  signalObject.put("buildUuid",buildUuid);
  signalObject.put("buildLink",buildLink);
  BuildFinishedDTO buildFinishedDTO=new BuildFinishedDTO(event);
  Long workItemId=buildProcessCorrelator.findWorkItemIdForBuild(key);
  if (workItemId == null) {
    String startNodeName=getStartSignalName(namespace,buildName);
    LOG.info("No existing processes associated with build " + key + " so lets signal a new process to start");
    ksession.signalEvent(buildName,signalObject);
    Map<String,Object> inputParameters=new HashMap<>();
    populateParameters(inputParameters,buildFinishedDTO);
    Collection<Process> processes=ksession.getKieBase().getProcesses();
    int startCount=0;
    for (    Process process : processes) {
      if (process instanceof WorkflowProcess) {
        WorkflowProcess workflowProcess=(WorkflowProcess)process;
        Node[] nodes=workflowProcess.getNodes();
        if (nodes != null) {
          for (          Node node : nodes) {
            String name=node.getName();
            if (Objects.equals(startNodeName,name)) {
              String processId=process.getId();
              LOG.info("Starting process " + processId + " with parameters: "+ inputParameters);
              startCount++;
              try {
                ksession.startProcess(processId,inputParameters);
              }
 catch (              Exception e) {
                LOG.error("Could not start process " + processId + " with parameters "+ inputParameters+ ". Reason: "+ e,e);
              }
            }
          }
        }
      }
    }
    if (startCount == 0) {
      LOG.warn("No business process starts with signal of name: " + startNodeName);
    }
  }
 else {
    Map<String,Object> results=new HashMap<>();
    populateParameters(results,buildFinishedDTO);
    LOG.info("Completing work item id: " + workItemId + " for "+ key+ " with data: "+ results);
    try {
      ksession.getWorkItemManager().completeWorkItem(workItemId,results);
    }
 catch (    Exception e) {
      LOG.error("Could not complete work item " + workItemId + " for "+ key+ " with data: "+ results+ ". Reason: "+ e,e);
    }
  }
}
