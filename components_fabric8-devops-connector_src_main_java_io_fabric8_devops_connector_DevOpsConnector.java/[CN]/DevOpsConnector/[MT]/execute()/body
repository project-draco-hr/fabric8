{
  loadConfigFile();
  KubernetesClient kubernetes=getKubernetes();
  String name=null;
  if (projectConfig != null) {
    name=projectConfig.getBuildName();
  }
  if (Strings.isNullOrBlank(name)) {
    name=jenkinsJob;
  }
  if (Strings.isNullOrBlank(name)) {
    name=ProjectRepositories.createBuildName(username,repoName);
    if (projectConfig != null) {
      projectConfig.setBuildName(name);
    }
  }
  Map<String,String> labels=new HashMap<>();
  labels.put("user",username);
  labels.put("repo",repoName);
  getLog().info("build name " + name);
  taiga=null;
  taigaProject=null;
  try {
    taiga=createTaiga();
    taigaProject=createTaigaProject(taiga);
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the Taiga project: " + e,e);
  }
  getLog().info("taiga " + taiga);
  LetsChatClient letschat=null;
  try {
    letschat=createLetsChat();
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the LetsChat client: " + e,e);
  }
  getLog().info("letschat " + letschat);
  try {
    createGerritRepo(repoName);
  }
 catch (  Exception e) {
    getLog().error("Failed to create GerritGit repo : " + e,e);
  }
  Map<String,String> annotations=new HashMap<>();
  jenkinsJobUrl=null;
  String jenkinsUrl=null;
  try {
    jenkinsUrl=getJenkinsServiceUrl();
    if (Strings.isNotBlank(jenkinsUrl)) {
      if (Strings.isNotBlank(jenkinsMonitorView)) {
        String url=URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsMonitorView);
        annotationLink(annotations,"fabric8.link.jenkins.monitor/",url,"Monitor");
      }
      if (Strings.isNotBlank(jenkinsPipelineView)) {
        String url=URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsPipelineView);
        annotationLink(annotations,"fabric8.link.jenkins.pipeline/",url,"Pipeline");
      }
      if (Strings.isNotBlank(name)) {
        jenkinsJobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",name);
        annotationLink(annotations,"fabric8.link.jenkins.job/",jenkinsJobUrl,"Job");
      }
    }
  }
 catch (  Exception e) {
    getLog().warn("Could not find the Jenkins URL!: " + e,e);
  }
  getLog().info("jenkins " + jenkinsUrl);
  if (!annotationLink(annotations,"fabric8.link.issues/",issueTrackerUrl,issueTrackerLabel)) {
    String taigaLink=getProjectPageLink(taiga,taigaProject,this.taigaProjectLinkPage);
    annotationLink(annotations,"fabric8.link.taiga/",taigaLink,taigaProjectLinkLabel);
  }
  if (!annotationLink(annotations,"fabric8.link.team/",teamUrl,teamLabel)) {
    String taigaTeamLink=getProjectPageLink(taiga,taigaProject,this.taigaTeamLinkPage);
    annotationLink(annotations,"fabric8.link.taiga.team/",taigaTeamLink,taigaTeamLinkLabel);
  }
  annotationLink(annotations,"fabric8.link.releases/",releasesUrl,releasesLabel);
  String chatRoomLink=getChatRoomLink(letschat);
  annotationLink(annotations,"fabric8.link.letschat.room/",chatRoomLink,letschatRoomLinkLabel);
  annotationLink(annotations,"fabric8.link.repository.browse/",repositoryBrowseLink,repositoryBrowseLabel);
  ProjectConfigs.defaultEnvironments(projectConfig);
  String consoleUrl=getServiceUrl(ServiceNames.FABRIC8_CONSOLE,namespace,fabric8ConsoleNamespace);
  if (Strings.isNotBlank(consoleUrl) && projectConfig != null) {
    Map<String,String> environments=projectConfig.getEnvironments();
    if (environments != null) {
      for (      Map.Entry<String,String> entry : environments.entrySet()) {
        String label=entry.getKey();
        String value=entry.getValue();
        String key=value;
        String environmentLink=URLUtils.pathJoin(consoleUrl,"/kubernetes/pods?namespace=" + value);
        annotations.put("fabric8.link.environment." + key + "/url",environmentLink);
        annotations.put("fabric8.link.environment." + key + "/label",label);
        addLink(label,environmentLink);
      }
    }
  }
  BuildConfigFluent<BuildConfigBuilder>.SpecNested<BuildConfigBuilder> specBuilder=new BuildConfigBuilder().withNewMetadata().withName(name).withLabels(labels).withAnnotations(annotations).endMetadata().withNewSpec();
  if (Strings.isNotBlank(gitUrl)) {
    specBuilder=specBuilder.withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource();
  }
  if (Strings.isNotBlank(buildImageStream) && Strings.isNotBlank(buildImageTag)) {
    ListEnvVarBuilder envBuilder=new ListEnvVarBuilder();
    envBuilder.withEnvVar("BASE_URI",jenkinsUrl);
    envBuilder.withEnvVar("JOB_NAME",name);
    specBuilder=specBuilder.withNewStrategy().withType("Custom").withNewCustomStrategy().withNewFrom().withKind("DockerImage").withName(s2iCustomBuilderImage).endFrom().withEnv(envBuilder.build()).endCustomStrategy().endStrategy();
  }
  BuildConfig buildConfig=specBuilder.addNewTrigger().withType("GitHub").withNewGithub().withSecret(secret).endGithub().endTrigger().addNewTrigger().withType("Generic").withNewGeneric().withSecret(secret).endGeneric().endTrigger().endSpec().build();
  Controller controller=createController();
  try {
    getLog().info("About to apply build config: " + new JSONObject(KubernetesHelper.toJson(buildConfig)).toString(4));
    controller.applyBuildConfig(buildConfig,"maven");
    getLog().info("Created build configuration for " + name + " in namespace: "+ controller.getNamespace()+ " at "+ kubernetes.getMasterUrl());
  }
 catch (  Exception e) {
    getLog().error("Failed to create BuildConfig for " + KubernetesHelper.toJson(buildConfig) + ". "+ e,e);
  }
  if (Strings.isNotBlank(name)) {
    createJenkinsJob(name,jenkinsJobUrl);
    getLog().info("created jenkins job");
  }
  if (isRegisterWebHooks()) {
    registerWebHooks();
    getLog().info("webhooks done");
  }
  if (modifiedConfig) {
    if (basedir == null) {
      getLog().error("Could not save updated " + ProjectConfigs.FILE_NAME + " due to missing basedir");
    }
 else {
      try {
        ProjectConfigs.saveToFolder(basedir,projectConfig,true);
        getLog().info("Updated " + ProjectConfigs.FILE_NAME);
      }
 catch (      IOException e) {
        getLog().error("Could not save updated " + ProjectConfigs.FILE_NAME + ": "+ e,e);
      }
    }
  }
}
