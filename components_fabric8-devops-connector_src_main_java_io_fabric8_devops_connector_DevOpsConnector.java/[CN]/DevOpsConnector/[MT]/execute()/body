{
  loadConfigFile();
  KubernetesClient kubernetes=getKubernetes();
  String name=null;
  if (projectConfig != null) {
    name=projectConfig.getBuildName();
  }
  if (Strings.isNullOrBlank(name)) {
    name=jenkinsJob;
  }
  if (Strings.isNullOrBlank(name)) {
    name=repoName;
    if (Strings.isNotBlank(username)) {
      name=username + "-" + name;
    }
    if (projectConfig != null) {
      projectConfig.setBuildName(name);
    }
  }
  Map<String,String> labels=new HashMap<>();
  labels.put("user",username);
  labels.put("repo",repoName);
  taiga=null;
  taigaProject=null;
  try {
    taiga=createTaiga();
    taigaProject=createTaigaProject(taiga);
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the Taiga project: " + e,e);
  }
  LetsChatClient letschat=null;
  try {
    letschat=createLetsChat();
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the LetsChat client: " + e,e);
  }
  Map<String,String> annotations=new HashMap<>();
  jenkinsJobUrl=null;
  try {
    String jenkinsUrl=KubernetesHelper.getServiceURL(kubernetes,ServiceNames.JENKINS,KubernetesHelper.defaultNamespace(),"http",true);
    if (Strings.isNotBlank(jenkinsUrl)) {
      if (Strings.isNotBlank(jenkinsMonitorView)) {
        String url=URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsMonitorView);
        annotations.put("fabric8.link.jenkins.monitor/url",url);
        String label="Monitor";
        annotations.put("fabric8.link.jenkins.monitor/label",label);
        addLink(label,url);
      }
      if (Strings.isNotBlank(jenkinsPipelineView)) {
        String url=URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsPipelineView);
        annotations.put("fabric8.link.jenkins.pipeline/url",url);
        String label="Pipeline";
        annotations.put("fabric8.link.jenkins.pipeline/label",label);
        addLink(label,url);
      }
      if (Strings.isNotBlank(name)) {
        jenkinsJobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",name);
        annotations.put("fabric8.link.jenkins.job/url",jenkinsJobUrl);
        String label="Job";
        annotations.put("fabric8.link.jenkins.job/label",label);
        addLink(label,jenkinsJobUrl);
      }
    }
  }
 catch (  Exception e) {
    getLog().warn("Could not find the Jenkins URL!: " + e,e);
  }
  String taigaLink=getProjectPageLink(taiga,taigaProject,this.taigaProjectLinkPage);
  if (Strings.isNotBlank(taigaLink)) {
    annotations.put("fabric8.link.taiga/url",taigaLink);
    annotations.put("fabric8.link.taiga/label",taigaProjectLinkLabel);
    addLink(taigaProjectLinkLabel,taigaLink);
  }
  String taigaTeamLink=getProjectPageLink(taiga,taigaProject,this.taigaTeamLinkPage);
  if (Strings.isNotBlank(taigaTeamLink)) {
    annotations.put("fabric8.link.taiga.team/url",taigaTeamLink);
    annotations.put("fabric8.link.taiga.team/label",taigaTeamLinkLabel);
    addLink(taigaTeamLinkLabel,taigaTeamLink);
  }
  String chatRoomLink=getChatRoomLink(letschat);
  if (Strings.isNotBlank(chatRoomLink)) {
    annotations.put("fabric8.link.letschat.room/url",chatRoomLink);
    annotations.put("fabric8.link.letschat.room/label",letschatRoomLinkLabel);
    addLink(letschatRoomLinkLabel,chatRoomLink);
  }
  ProjectConfigs.defaultEnvironments(projectConfig);
  String consoleUrl=KubernetesHelper.getServiceURL(kubernetes,ServiceNames.FABRIC8_CONSOLE,namespace,"http",true);
  if (Strings.isNotBlank(consoleUrl) && projectConfig != null) {
    Map<String,String> environments=projectConfig.getEnvironments();
    if (environments != null) {
      for (      Map.Entry<String,String> entry : environments.entrySet()) {
        String label=entry.getKey();
        String value=entry.getValue();
        String key=value;
        String environmentLink=URLUtils.pathJoin(consoleUrl,"/kubernetes/pods?namespace=" + value);
        annotations.put("fabric8.link.environment." + key + "/url",environmentLink);
        annotations.put("fabric8.link.environment." + key + "/label",label);
        addLink(label,environmentLink);
      }
    }
  }
  BuildConfigFluent<BuildConfigBuilder>.SpecNested<BuildConfigBuilder> specBuilder=new BuildConfigBuilder().withNewMetadata().withName(name).withLabels(labels).withAnnotations(annotations).endMetadata().withNewSpec();
  if (Strings.isNotBlank(gitUrl)) {
    specBuilder=specBuilder.withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource();
  }
  if (Strings.isNotBlank(buildImageStream) && Strings.isNotBlank(buildImageTag)) {
    List<EnvVar> buildEnvVars=new ArrayList<EnvVar>();
    EnvVar jobName=new EnvVar();
    jobName.setName("JENKINS_JOB_URL");
    jobName.setValue(jenkinsJobUrl);
    buildEnvVars.add(jobName);
    specBuilder=specBuilder.withNewStrategy().withType("Custom").withNewCustomStrategy().withNewFrom().withKind("DockerImage").withName(s2iCustomBuilderImage).endFrom().withEnv(buildEnvVars).endCustomStrategy().endStrategy();
  }
  BuildConfig buildConfig=specBuilder.addNewTrigger().withType("GitHub").withNewGithub().withSecret(secret).endGithub().endTrigger().addNewTrigger().withType("Generic").withNewGeneric().withSecret(secret).endGeneric().endTrigger().endSpec().build();
  Controller controller=createController();
  try {
    getLog().info("About to apply build config: " + new JSONObject(KubernetesHelper.toJson(buildConfig)).toString(4));
    controller.applyBuildConfig(buildConfig,"maven");
    getLog().info("Created build configuration for " + name + " in namespace: "+ controller.getNamespace()+ " at "+ kubernetes.getMasterUrl());
  }
 catch (  Exception e) {
    getLog().error("Failed to create BuildConfig for " + KubernetesHelper.toJson(buildConfig) + ". "+ e,e);
  }
  if (Strings.isNotBlank(name)) {
    createJenkinsJob(name,jenkinsJobUrl);
  }
  if (isRegisterWebHooks()) {
    registerWebHooks();
  }
  if (modifiedConfig) {
    if (basedir == null) {
      getLog().error("Could not save updated " + ProjectConfigs.FILE_NAME + " due to missing basedir");
    }
 else {
      try {
        ProjectConfigs.saveToFolder(basedir,projectConfig,true);
        getLog().info("Updated " + ProjectConfigs.FILE_NAME);
      }
 catch (      IOException e) {
        getLog().error("Could not save updated " + ProjectConfigs.FILE_NAME + ": "+ e,e);
      }
    }
  }
}
