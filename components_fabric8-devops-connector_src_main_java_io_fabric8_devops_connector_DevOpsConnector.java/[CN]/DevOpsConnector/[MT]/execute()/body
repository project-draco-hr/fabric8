{
  loadConfigFile();
  KubernetesClient kubernetes=getKubernetes();
  String name=projectName;
  if (Strings.isNullOrBlank(name)) {
    if (projectConfig != null) {
      name=projectConfig.getBuildName();
    }
    if (Strings.isNullOrBlank(name)) {
      name=jenkinsJob;
    }
    if (Strings.isNullOrBlank(name)) {
      name=ProjectRepositories.createBuildName(username,repoName);
      if (projectConfig != null) {
        projectConfig.setBuildName(name);
      }
    }
  }
  if (Strings.isNullOrBlank(projectName)) {
    projectName=name;
  }
  Map<String,String> labels=new HashMap<>();
  labels.put("user",username);
  labels.put("repo",repoName);
  getLog().info("build name " + name);
  taiga=null;
  taigaProject=null;
  try {
    taiga=createTaiga();
    taigaProject=createTaigaProject(taiga);
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the Taiga project: " + e,e);
  }
  getLog().info("taiga " + taiga);
  LetsChatClient letschat=null;
  try {
    letschat=createLetsChat();
  }
 catch (  Exception e) {
    getLog().error("Failed to load or lazily create the LetsChat client: " + e,e);
  }
  getLog().info("letschat " + letschat);
  if (projectConfig != null && projectConfig.hasCodeReview()) {
    try {
      createGerritRepo(repoName,gerritUser,gerritPwd,gerritGitInitialCommit,gerritGitRepoDesription);
    }
 catch (    Exception e) {
      getLog().error("Failed to create GerritGit repo : " + e,e);
    }
  }
  Map<String,String> annotations=new HashMap<>();
  jenkinsJobUrl=null;
  String jenkinsUrl=null;
  try {
    jenkinsUrl=getJenkinsServiceUrl();
    if (Strings.isNotBlank(jenkinsUrl)) {
      if (Strings.isNotBlank(jenkinsMonitorView)) {
        String url=URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsMonitorView);
        annotationLink(annotations,"fabric8.link.jenkins.monitor/",url,"Monitor");
      }
      if (Strings.isNotBlank(jenkinsPipelineView)) {
        String url=URLUtils.pathJoin(jenkinsUrl,"/view",jenkinsPipelineView);
        annotationLink(annotations,"fabric8.link.jenkins.pipeline/",url,"Pipeline");
      }
      if (Strings.isNotBlank(name)) {
        jenkinsJobUrl=URLUtils.pathJoin(jenkinsUrl,"/job",name);
        annotationLink(annotations,"fabric8.link.jenkins.job/",jenkinsJobUrl,"Job");
      }
    }
  }
 catch (  Exception e) {
    getLog().warn("Could not find the Jenkins URL!: " + e,e);
  }
  getLog().info("jenkins " + jenkinsUrl);
  if (!annotationLink(annotations,"fabric8.link.issues/",issueTrackerUrl,issueTrackerLabel)) {
    String taigaLink=getProjectPageLink(taiga,taigaProject,this.taigaProjectLinkPage);
    annotationLink(annotations,"fabric8.link.taiga/",taigaLink,taigaProjectLinkLabel);
  }
  if (!annotationLink(annotations,"fabric8.link.team/",teamUrl,teamLabel)) {
    String taigaTeamLink=getProjectPageLink(taiga,taigaProject,this.taigaTeamLinkPage);
    annotationLink(annotations,"fabric8.link.taiga.team/",taigaTeamLink,taigaTeamLinkLabel);
  }
  annotationLink(annotations,"fabric8.link.releases/",releasesUrl,releasesLabel);
  String chatRoomLink=getChatRoomLink(letschat);
  annotationLink(annotations,"fabric8.link.letschat.room/",chatRoomLink,letschatRoomLinkLabel);
  annotationLink(annotations,"fabric8.link.repository.browse/",repositoryBrowseLink,repositoryBrowseLabel);
  ProjectConfigs.defaultEnvironments(projectConfig,namespace);
  String consoleUrl=getServiceUrl(ServiceNames.FABRIC8_CONSOLE,namespace,fabric8ConsoleNamespace);
  if (projectConfig != null) {
    Map<String,String> environments=projectConfig.getEnvironments();
    if (environments != null && !environments.isEmpty()) {
      getLog().info("Ensuring ConfigMap " + Environments.ENVIRONMENTS_CONFIG_MAP_NAME + " is populated with enviroments: "+ environments);
      ConfigMap environmentsConfigMap=Environments.getOrCreateEnvironments(kubernetes,namespace);
      boolean updatedEnvConfigMap=false;
      for (      Map.Entry<String,String> entry : environments.entrySet()) {
        String label=entry.getKey();
        String value=entry.getValue();
        String key=value;
        annotations.put("fabric8.link.environment." + key + "/label",label);
        if (Strings.isNotBlank(consoleUrl)) {
          String environmentLink=URLUtils.pathJoin(consoleUrl,"/kubernetes/pods?namespace=" + value);
          annotations.put("fabric8.link.environment." + key + "/url",environmentLink);
          addLink(label,environmentLink);
        }
        String dataKey=label.toLowerCase().replace(' ','-');
        boolean updated=Environments.ensureEnvironmentAdded(environmentsConfigMap,dataKey,label,value);
        updatedEnvConfigMap=updated || updatedEnvConfigMap;
      }
      if (updatedEnvConfigMap) {
        getLog().info("Updating ConfigMap " + Environments.ENVIRONMENTS_CONFIG_MAP_NAME + " with data: "+ environmentsConfigMap.getData());
        if (KubernetesHelper.getResourceVersion(environmentsConfigMap) == null) {
          kubernetes.inNamespace(namespace).configMaps().create(environmentsConfigMap);
        }
 else {
          kubernetes.inNamespace(namespace).configMaps().replace(environmentsConfigMap);
        }
      }
 else {
        getLog().info("No need to update ConfigMap " + Environments.ENVIRONMENTS_CONFIG_MAP_NAME + " as already has data: "+ environmentsConfigMap.getData());
      }
    }
  }
  addLink("Git",getGitUrl());
  Controller controller=createController();
  OpenShiftClient openShiftClient=controller.getOpenShiftClientOrJenkinshift();
  BuildConfig buildConfig=null;
  if (openShiftClient != null) {
    try {
      buildConfig=openShiftClient.inNamespace(namespace).buildConfigs().withName(projectName).get();
    }
 catch (    Exception e) {
      log.error("Failed to load build config for " + namespace + "/"+ projectName+ ". "+ e,e);
    }
    log.info("Loaded build config for " + namespace + "/"+ projectName+ " "+ buildConfig);
  }
  boolean foundExistingGitUrl=false;
  if (buildConfig != null) {
    BuildConfigSpec spec=buildConfig.getSpec();
    if (spec != null) {
      BuildSource source=spec.getSource();
      if (source != null) {
        GitBuildSource git=source.getGit();
        if (git != null) {
          gitUrl=git.getUri();
          log.info("Loaded existing BuildConfig git url: " + gitUrl);
          foundExistingGitUrl=true;
        }
        LocalObjectReference sourceSecret=source.getSourceSecret();
        if (sourceSecret != null) {
          gitSourceSecretName=sourceSecret.getName();
        }
      }
    }
    if (!foundExistingGitUrl) {
      log.warn("Could not find a git url in the loaded BuildConfig: " + buildConfig);
    }
    log.info("Loaded gitSourceSecretName: " + gitSourceSecretName);
  }
  log.info("gitUrl is: " + gitUrl);
  if (buildConfig == null) {
    buildConfig=new BuildConfig();
  }
  ObjectMeta metadata=getOrCreateMetadata(buildConfig);
  metadata.setName(projectName);
  metadata.setAnnotations(annotations);
  metadata.setLabels(labels);
  Builds.configureDefaultBuildConfig(buildConfig,name,gitUrl,foundExistingGitUrl,buildImageStream,buildImageTag,s2iCustomBuilderImage,secret,jenkinsUrl);
  try {
    getLog().info("About to apply build config: " + new JSONObject(KubernetesHelper.toJson(buildConfig)).toString(4));
    controller.applyBuildConfig(buildConfig,"maven");
    getLog().info("Created build configuration for " + name + " in namespace: "+ controller.getNamespace()+ " at "+ kubernetes.getMasterUrl());
  }
 catch (  Exception e) {
    getLog().error("Failed to create BuildConfig for " + KubernetesHelper.toJson(buildConfig) + ". "+ e,e);
  }
  this.jenkinsJobName=name;
  if (isRegisterWebHooks()) {
    registerWebHooks();
    getLog().info("webhooks done");
  }
  if (modifiedConfig) {
    if (basedir == null) {
      getLog().error("Could not save updated " + ProjectConfigs.FILE_NAME + " due to missing basedir");
    }
 else {
      try {
        ProjectConfigs.saveToFolder(basedir,projectConfig,true);
        getLog().info("Updated " + ProjectConfigs.FILE_NAME);
      }
 catch (      IOException e) {
        getLog().error("Could not save updated " + ProjectConfigs.FILE_NAME + ": "+ e,e);
      }
    }
  }
}
