{
  final String username=Strings.isNullOrBlank(gerritUser) ? "admin" : gerritUser;
  final String password=Strings.isNullOrBlank(gerritPwd) ? "secret" : gerritPwd;
  log.info("A Gerrit git repo will be created for this name : " + repoName);
  String gerritAddress=KubernetesHelper.getServiceURL(kubernetes,ServiceNames.GERRIT,namespace,"http",true);
  log.info("Found gerrit address: " + gerritAddress + " for namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getMasterUrl());
  if (Strings.isNullOrBlank(gerritAddress)) {
    throw new Exception("No address for service " + ServiceNames.GERRIT + " in namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getMasterUrl());
  }
  String GERRIT_URL=gerritAddress + "/a/projects/" + repoName;
  OkHttpClient client=new OkHttpClient();
  if (isNotNullOrEmpty(gerritUser) && isNotNullOrEmpty(gerritPwd)) {
    client.setAuthenticator(new Authenticator(){
      @Override public Request authenticate(      Proxy proxy,      Response response) throws IOException {
        List<Challenge> challenges=response.challenges();
        Request request=response.request();
        for (int i=0, size=challenges.size(); i < size; i++) {
          Challenge challenge=challenges.get(i);
          if (!"Basic".equalsIgnoreCase(challenge.getScheme()))           continue;
          String credential=Credentials.basic(username,password);
          return request.newBuilder().header("Authorization",credential).build();
        }
        return null;
      }
      @Override public Request authenticateProxy(      Proxy proxy,      Response response) throws IOException {
        return null;
      }
    }
);
  }
  System.out.println("Requesting : " + GERRIT_URL);
  try {
    CreateRepositoryDTO createRepoDTO=new CreateRepositoryDTO();
    createRepoDTO.setDescription(gerritGitRepoDescription);
    createRepoDTO.setName(repoName);
    createRepoDTO.setCreate_empty_commit(Boolean.valueOf(gerritGitInitialCommit));
    RequestBody body=RequestBody.create(JSON,MAPPER.writeValueAsString(createRepoDTO));
    Request request=new Request.Builder().post(body).url(GERRIT_URL).build();
    Response response=client.newCall(request).execute();
    System.out.println("responseBody : " + response.body().string());
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
 finally {
    if (client != null && client.getConnectionPool() != null) {
      client.getConnectionPool().evictAll();
    }
  }
}
