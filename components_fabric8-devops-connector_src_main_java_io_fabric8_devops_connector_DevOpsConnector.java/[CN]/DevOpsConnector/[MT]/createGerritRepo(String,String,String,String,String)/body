{
  if (Strings.isNullOrBlank(gerritUser)) {
    gerritUser="admin";
  }
  if (Strings.isNullOrBlank(gerritPwd)) {
    gerritPwd="secret";
  }
  log.info("A Gerrit git repo will be created for this name : " + repoName);
  String gerritAddress=KubernetesHelper.getServiceURL(kubernetes,ServiceNames.GERRIT,namespace,"http",true);
  log.info("Found gerrit address: " + gerritAddress + " for namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getMasterUrl());
  if (Strings.isNullOrBlank(gerritAddress)) {
    throw new Exception("No address for service " + ServiceNames.GERRIT + " in namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getMasterUrl());
  }
  String GERRIT_URL=gerritAddress + "/a/projects/" + repoName;
  Realm realm=new Realm.RealmBuilder().setPrincipal(gerritUser).setPassword(gerritPwd).setUsePreemptiveAuth(false).setScheme(Realm.AuthScheme.DIGEST).build();
  AsyncHttpClientConfig.Builder configBuilder=new AsyncHttpClientConfig.Builder().setRealm(realm);
  AsyncHttpClient client=new AsyncHttpClient(configBuilder.build());
  System.out.println("Requesting : " + GERRIT_URL);
  try {
    CreateRepositoryDTO createRepoDTO=new CreateRepositoryDTO();
    createRepoDTO.setDescription(gerritGitRepoDescription);
    createRepoDTO.setName(repoName);
    createRepoDTO.setCreate_empty_commit(Boolean.valueOf(gerritGitInitialCommit));
    String json=MAPPER.writeValueAsString(createRepoDTO);
    Future<Response> future=client.preparePost(GERRIT_URL).addHeader("Content-Type","application/json").setBody(json).execute();
    Response response=future.get();
    System.out.println("responseBody : " + response.getResponseBody());
  }
 catch (  Throwable t) {
    throw new RuntimeException(t);
  }
 finally {
    client.close();
  }
}
