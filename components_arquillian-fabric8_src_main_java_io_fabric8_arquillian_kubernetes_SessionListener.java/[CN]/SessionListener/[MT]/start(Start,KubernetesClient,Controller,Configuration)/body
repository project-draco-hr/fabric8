{
  boolean shouldWait=false;
  try {
    Object dto=loadJson(readAsString(configuration.getConfigUrl()));
    if (dto instanceof Config) {
      for (      Entity entity : getEntities((Config)dto)) {
        if (entity instanceof PodSchema) {
          PodSchema pod=(PodSchema)entity;
          if (pod.getLabels() == null) {
            pod.setLabels(new HashMap<String,String>());
          }
          pod.getLabels().put(Constants.ARQ_KEY,event.getSession().getId());
          shouldWait=true;
        }
 else         if (entity instanceof ServiceSchema) {
          ServiceSchema service=(ServiceSchema)entity;
          if (service.getLabels() == null) {
            service.setLabels(new HashMap<String,String>());
          }
          service.getLabels().put(Constants.ARQ_KEY,event.getSession().getId());
        }
 else         if (entity instanceof ReplicationControllerSchema) {
          ReplicationControllerSchema replicationController=(ReplicationControllerSchema)entity;
          replicationController.getDesiredState().getPodTemplate().getLabels().put(Constants.ARQ_KEY,event.getSession().getId());
          if (replicationController.getLabels() == null) {
            replicationController.setLabels(new HashMap<String,String>());
          }
          replicationController.getLabels().put(Constants.ARQ_KEY,event.getSession().getId());
          controller.applyReplicationController(replicationController,event.getSession().getId());
          shouldWait=true;
        }
      }
    }
    if (shouldWait) {
      Callable<Boolean> sessionPodsReady=new SessionPodsAreReady(event.getSession(),client);
      WaitStrategy waitStrategy=new WaitStrategy(sessionPodsReady,configuration.getTimeout(),configuration.getPollInterval());
      if (!waitStrategy.await()) {
        throw new TimeoutException("Timed out waiting for pods to become ready");
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
