{
  final Logger log=event.getSession().getLogger();
  shutdownHook=new ShutdownHook(client,event.getSession());
  Runtime.getRuntime().addShutdownHook(shutdownHook);
  try {
    URL configUrl=configuration.getConfigUrl();
    List<String> dependencies=!configuration.getDependencies().isEmpty() ? configuration.getDependencies() : Util.getMavenDependencies(event.getSession());
    List<Config> kubeConfigs=new LinkedList<>();
    for (    String dependency : dependencies) {
      log.info("Found dependency: " + dependency);
      Object kubeCfg=loadJson(readAsString(new URL(dependency)));
      if (kubeCfg instanceof Config) {
        kubeConfigs.add((Config)kubeCfg);
      }
    }
    if (configUrl != null) {
      log.status("Applying kubernetes configuration from: " + configuration.getConfigUrl());
      kubeConfigs.add((Config)loadJson(readAsString(configuration.getConfigUrl())));
    }
    if (applyConfiguration(client,controller,configuration,event.getSession(),kubeConfigs)) {
      displaySessionStatus(client,event.getSession());
    }
 else {
      throw new IllegalStateException("Failed to apply kubernetes configuration.");
    }
  }
 catch (  Exception e) {
    try {
      cleanupSession(client,event.getSession());
    }
 catch (    MultiException me) {
      throw e;
    }
 finally {
      if (shutdownHook != null) {
        Runtime.getRuntime().removeShutdownHook(shutdownHook);
      }
    }
    throw new RuntimeException(e);
  }
}
