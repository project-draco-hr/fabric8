{
  Logger log=session.getLogger();
  Set<Callable<Boolean>> conditions=new HashSet<>();
  Callable<Boolean> sessionPodsReady=new SessionPodsAreReady(client,session);
  Callable<Boolean> servicesReady=new SessionServicesAreReady(client,session,configuration);
  List<Object> entities=new ArrayList<>();
  for (  Config c : kubeConfigs) {
    entities.addAll(getEntities(c));
  }
  Collections.sort(entities,new Comparator<Object>(){
    @Override public int compare(    Object left,    Object right){
      if (left instanceof Service) {
        return -1;
      }
 else       if (right instanceof Service) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  for (  Object entity : entities) {
    if (entity instanceof Pod) {
      Pod pod=(Pod)entity;
      if (pod.getLabels() == null) {
        pod.setLabels(new HashMap<String,String>());
      }
      pod.getLabels().put(ARQ_KEY,session.getId());
      log.status("Applying pod:" + pod.getId());
      controller.applyPod(pod,session.getId());
      conditions.add(sessionPodsReady);
    }
 else     if (entity instanceof Service) {
      Service service=(Service)entity;
      if (service.getLabels() == null) {
        service.setLabels(new HashMap<String,String>());
      }
      service.getLabels().put(ARQ_KEY,session.getId());
      log.status("Applying service:" + service.getId());
      controller.applyService(service,session.getId());
      conditions.add(servicesReady);
    }
 else     if (entity instanceof ReplicationController) {
      ReplicationController replicationController=(ReplicationController)entity;
      PodTemplate podTemplate=replicationController.getDesiredState().getPodTemplate();
      if (podTemplate.getLabels() == null) {
        podTemplate.setLabels(new HashMap<String,String>());
      }
      replicationController.getDesiredState().getPodTemplate().getLabels().put(ARQ_KEY,session.getId());
      if (replicationController.getLabels() == null) {
        replicationController.setLabels(new HashMap<String,String>());
      }
      replicationController.getLabels().put(ARQ_KEY,session.getId());
      log.status("Applying replication controller:" + replicationController.getId());
      controller.applyReplicationController(replicationController,session.getId());
      conditions.add(sessionPodsReady);
    }
  }
  if (!conditions.isEmpty()) {
    Callable<Boolean> compositeCondition=new CompositeCondition(conditions);
    WaitStrategy waitStrategy=new WaitStrategy(compositeCondition,configuration.getTimeout(),configuration.getPollInterval());
    if (!waitStrategy.await()) {
      log.error("Timed out waiting for pods/services!");
      return false;
    }
 else {
      log.status("All pods/services are currently 'running'!");
    }
  }
 else {
    log.warn("No pods/services/replication controllers defined in the configuration!");
  }
  return true;
}
