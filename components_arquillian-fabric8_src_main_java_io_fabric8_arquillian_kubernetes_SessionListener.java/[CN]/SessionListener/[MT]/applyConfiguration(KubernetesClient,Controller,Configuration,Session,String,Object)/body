{
  Logger log=session.getLogger();
  Set<Callable<Boolean>> conditions=new HashSet<>();
  Callable<Boolean> sessionPodsReady=new SessionPodsAreReady(client,session,key);
  Callable<Boolean> servicesReady=new SessionServicesAreReady(client,session,key,configuration.isWaitForConenction());
  if (dto instanceof Config) {
    for (    Object entity : getEntities((Config)dto)) {
      if (entity instanceof Pod) {
        Pod pod=(Pod)entity;
        if (pod.getLabels() == null) {
          pod.setLabels(new HashMap<String,String>());
        }
        pod.getLabels().put(key,session.getId());
        controller.applyPod(pod,session.getId());
        conditions.add(sessionPodsReady);
      }
 else       if (entity instanceof Service) {
        Service service=(Service)entity;
        if (service.getLabels() == null) {
          service.setLabels(new HashMap<String,String>());
        }
        service.getLabels().put(key,session.getId());
        controller.applyService(service,session.getId());
        conditions.add(servicesReady);
      }
 else       if (entity instanceof ReplicationController) {
        ReplicationController replicationController=(ReplicationController)entity;
        PodTemplate podTemplate=replicationController.getDesiredState().getPodTemplate();
        if (podTemplate.getLabels() == null) {
          podTemplate.setLabels(new HashMap<String,String>());
        }
        replicationController.getDesiredState().getPodTemplate().getLabels().put(key,session.getId());
        if (replicationController.getLabels() == null) {
          replicationController.setLabels(new HashMap<String,String>());
        }
        replicationController.getLabels().put(key,session.getId());
        controller.applyReplicationController(replicationController,session.getId());
        conditions.add(sessionPodsReady);
      }
    }
  }
  if (!conditions.isEmpty()) {
    Callable<Boolean> compositeCondition=new CompositeCondition(conditions);
    WaitStrategy waitStrategy=new WaitStrategy(compositeCondition,configuration.getTimeout(),configuration.getPollInterval());
    if (!waitStrategy.await()) {
      log.error("Timed out waiting for pods/services!");
      return false;
    }
 else {
      log.status("All pods/services are currently 'running'!");
    }
  }
 else {
    log.warn("No pods/services/replication controllers defined in the configuration!");
  }
  return true;
}
