{
  final String keyPrefix=prefix + ".";
  for (Enumeration<String> e=properties.keys(); e.hasMoreElements(); ) {
    String key=e.nextElement();
    if (key.startsWith(keyPrefix)) {
      BrokerConfig config=new BrokerConfig();
      config.setId(pid + "." + prefix);
      config.setBrokerUrl(properties.get(prefix + ".brokerUrl"));
      config.setClientId(properties.get(prefix + ".clientId"));
      config.setUserName(properties.get(prefix + ".userName"));
      config.setPassword(properties.get(prefix + ".password"));
      if (StringUtils.hasText(properties.get(prefix + ".maxConnections"))) {
        config.setMaxConnections(Integer.parseInt(properties.get(prefix + ".maxConnections")));
      }
      final String connectionFactoryRef=properties.get(prefix + ".connectionFactoryRef");
      if (StringUtils.hasText(connectionFactoryRef)) {
        final String filter="(" + Constants.SERVICE_PID + "="+ connectionFactoryRef+ ")";
        ServiceReference[] serviceReferences;
        try {
          serviceReferences=bundleContext.getServiceReferences(CONNECTION_FACTORY_CLASS_NAME,filter);
        }
 catch (        InvalidSyntaxException e1) {
          String msg="Error looking up " + connectionFactoryRef + " with filter ["+ filter+ "]";
          LOG.error(msg);
          throw new ConfigurationException(connectionFactoryRef,msg);
        }
        if (serviceReferences != null) {
          config.setConnectionFactoryRef(connectionFactoryRef);
          config.setConnectionFactory((ConnectionFactory)bundleContext.getService(serviceReferences[0]));
          addServiceReference(pid,serviceReferences[0]);
        }
 else {
          String msg="No service found for " + connectionFactoryRef + " with filter ["+ filter+ "]";
          LOG.error(msg);
          throw new ConfigurationException(connectionFactoryRef,msg);
        }
      }
      final String destinationResolverRef=properties.get(prefix + ".destinationResolverRef");
      if (StringUtils.hasText(destinationResolverRef)) {
        final String filter="(" + Constants.SERVICE_PID + "="+ destinationResolverRef+ ")";
        ServiceReference[] serviceReferences;
        try {
          serviceReferences=bundleContext.getServiceReferences(DESTINATION_RESOLVER_CLASS_NAME,filter);
        }
 catch (        InvalidSyntaxException e1) {
          String msg="Error looking up " + destinationResolverRef + " with filter ["+ filter+ "]";
          LOG.error(msg);
          throw new ConfigurationException(destinationResolverRef,msg);
        }
        if (serviceReferences != null) {
          config.setDestinationResolverRef(destinationResolverRef);
          config.setDestinationResolver((DestinationResolver)bundleContext.getService(serviceReferences[0]));
          addServiceReference(pid,serviceReferences[0]);
        }
 else {
          String msg="No service found for " + destinationResolverRef + " with filter ["+ filter+ "]";
          LOG.error(msg);
          throw new ConfigurationException(destinationResolverRef,msg);
        }
      }
      return config;
    }
  }
  LOG.info("No Broker configuration found in " + pid + " for "+ prefix);
  return null;
}
