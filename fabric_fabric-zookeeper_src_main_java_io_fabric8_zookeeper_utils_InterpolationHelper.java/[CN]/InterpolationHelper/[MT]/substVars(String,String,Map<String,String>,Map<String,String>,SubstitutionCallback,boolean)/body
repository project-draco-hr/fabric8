{
  if (cycleMap == null) {
    cycleMap=new HashMap<String,String>();
  }
  cycleMap.put(currentKey,currentKey);
  int stopDelim=val.indexOf(DELIM_STOP);
  while (stopDelim > 0 && val.charAt(stopDelim - 1) == ESCAPE_CHAR) {
    stopDelim=val.indexOf(DELIM_STOP,stopDelim + 1);
  }
  int startDelim=val.indexOf(DELIM_START);
  while (stopDelim >= 0) {
    int idx=val.indexOf(DELIM_START,startDelim + DELIM_START.length());
    if ((idx < 0) || (idx > stopDelim)) {
      break;
    }
 else     if (idx < stopDelim) {
      startDelim=idx;
    }
  }
  if ((startDelim < 0) || (stopDelim < 0)) {
    return unescape(val);
  }
  String variable=val.substring(startDelim + DELIM_START.length(),stopDelim);
  if (cycleMap.get(variable) != null) {
    throw new IllegalArgumentException("recursive variable reference: " + variable);
  }
  String substValue=(String)((configProps != null) ? configProps.get(variable) : null);
  if (substValue == null) {
    if (variable.length() <= 0) {
      substValue="";
    }
 else {
      if (callback != null) {
        substValue=callback.getValue(variable);
      }
      if (substValue == null) {
        if (defaultsToEmptyString) {
          substValue=System.getProperty(variable,"");
        }
 else {
          substValue=System.getProperty(variable,MARKER + "{" + variable+ "}");
        }
      }
    }
  }
  cycleMap.remove(variable);
  val=val.substring(0,startDelim) + substValue + val.substring(stopDelim + DELIM_STOP.length(),val.length());
  if (defaultsToEmptyString) {
    val=substVars(val,currentKey,cycleMap,configProps,callback,defaultsToEmptyString);
  }
 else {
    val=substVarsPreserveUnresolved(val,currentKey,cycleMap,configProps,callback);
  }
  val=unescape(val);
  return val;
}
