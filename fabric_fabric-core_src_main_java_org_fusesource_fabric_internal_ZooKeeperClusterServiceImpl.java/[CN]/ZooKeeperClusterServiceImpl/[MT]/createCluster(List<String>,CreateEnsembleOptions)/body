{
  assertValid();
  final List<String> oldContainers=getEnsembleContainers();
  try {
    if (containers == null || containers.size() == 2) {
      throw new IllegalArgumentException("One or at least 3 containers must be used to create a zookeeper ensemble");
    }
    Configuration config=configAdmin.get().getConfiguration("org.fusesource.fabric.zookeeper",null);
    String zooKeeperUrl=config != null && config.getProperties() != null ? (String)config.getProperties().get("zookeeper.url") : null;
    if (zooKeeperUrl == null) {
      if (containers.size() != 1 || !containers.get(0).equals(System.getProperty(SystemProperties.KARAF_NAME))) {
        throw new FabricException("The first zookeeper cluster must be configured on this container only.");
      }
      bootstrap.get().create(options);
      return;
    }
    Container[] allContainers=fabricService.get().getContainers();
    for (    Container container : allContainers) {
      if (!container.isAliveAndOK()) {
        throw new FabricException("Can not modify the zookeeper ensemble if all containers are not running");
      }
    }
    String version=dataStore.get().getDefaultVersion();
    for (    String container : containers) {
      Container c=fabricService.get().getContainer(container);
      if (exists(curator.get(),ZkPath.CONTAINER_ALIVE.getPath(container)) == null) {
        throw new FabricException("The container " + container + " is not alive");
      }
      String containerVersion=getStringData(curator.get(),ZkPath.CONFIG_CONTAINER.getPath(container));
      if (!version.equals(containerVersion)) {
        throw new FabricException("The container " + container + " is not using the default-version:"+ version);
      }
    }
    Map<String,List<Integer>> usedPorts=new HashMap<String,List<Integer>>();
    final String oldClusterId=getStringData(curator.get(),ZkPath.CONFIG_ENSEMBLES.getPath());
    if (oldClusterId != null) {
      String profile="fabric-ensemble-" + oldClusterId;
      String pid="org.fusesource.fabric.zookeeper.server-" + oldClusterId;
      Map<String,String> p=dataStore.get().getConfiguration(version,profile,pid);
      if (p == null) {
        throw new FabricException("Failed to find old cluster configuration for ID " + oldClusterId);
      }
      for (      Object n : p.keySet()) {
        String node=(String)n;
        if (node.startsWith("server.")) {
          String data=getSubstitutedData(curator.get(),dataStore.get().getConfigurations(version,"fabric-ensemble-" + oldClusterId).get("org.fusesource.fabric.zookeeper.server-" + oldClusterId).get(node));
          addUsedPorts(usedPorts,data);
        }
      }
      Map<String,String> zkConfig=dataStore.get().getConfiguration(version,"default","org.fusesource.fabric.zookeeper");
      if (zkConfig == null) {
        throw new FabricException("Failed to find old zookeeper configuration in default profile");
      }
      String datas=getSubstitutedData(curator.get(),zkConfig.get("zookeeper.url"));
      for (      String data : datas.split(",")) {
        addUsedPorts(usedPorts,data);
      }
    }
    String newClusterId;
    if (oldClusterId == null) {
      newClusterId="0000";
    }
 else {
      newClusterId=new DecimalFormat("0000").format(Integer.parseInt(oldClusterId) + 1);
    }
    String ensembleProfile=dataStore.get().getProfile(version,"fabric-ensemble-" + newClusterId,true);
    dataStore.get().setProfileAttribute(version,ensembleProfile,"abstract","true");
    dataStore.get().setProfileAttribute(version,ensembleProfile,"hidden","true");
    Properties ensembleProperties=new Properties();
    ensembleProperties.put("tickTime","2000");
    ensembleProperties.put("initLimit","10");
    ensembleProperties.put("syncLimit","5");
    ensembleProperties.put("dataDir","data/zookeeper/" + newClusterId);
    int index=1;
    String connectionUrl="";
    String realConnectionUrl="";
    String containerList="";
    for (    String container : containers) {
      String ip=getSubstitutedPath(curator.get(),ZkPath.CONTAINER_IP.getPath(container));
      String minimumPort=String.valueOf(Ports.MIN_PORT_NUMBER);
      String maximumPort=String.valueOf(Ports.MAX_PORT_NUMBER);
      String bindAddress="0.0.0.0";
      if (exists(curator.get(),ZkPath.CONTAINER_PORT_MIN.getPath(container)) != null) {
        minimumPort=getSubstitutedPath(curator.get(),ZkPath.CONTAINER_PORT_MIN.getPath(container));
      }
      if (exists(curator.get(),ZkPath.CONTAINER_PORT_MAX.getPath(container)) != null) {
        maximumPort=getSubstitutedPath(curator.get(),ZkPath.CONTAINER_PORT_MAX.getPath(container));
      }
      if (exists(curator.get(),ZkPath.CONTAINER_BINDADDRESS.getPath(container)) != null) {
        bindAddress=getSubstitutedPath(curator.get(),ZkPath.CONTAINER_BINDADDRESS.getPath(container));
      }
      String ensembleMemberConfigName="org.fusesource.fabric.zookeeper.server-" + newClusterId + ".properties";
      Properties ensembleMemberProperties=new Properties();
      String ensembleMemberProfile=dataStore.get().getProfile(version,"fabric-ensemble-" + newClusterId + "-"+ Integer.toString(index),true);
      dataStore.get().setProfileAttribute(version,ensembleMemberProfile,"hidden","true");
      dataStore.get().setProfileAttribute(version,ensembleMemberProfile,"parents",ensembleProfile);
      String port1=Integer.toString(findPort(usedPorts,ip,mapPortToRange(Ports.DEFAULT_ZOOKEEPER_SERVER_PORT,minimumPort,maximumPort)));
      if (containers.size() > 1) {
        String port2=Integer.toString(findPort(usedPorts,ip,mapPortToRange(Ports.DEFAULT_ZOOKEEPER_PEER_PORT,minimumPort,maximumPort)));
        String port3=Integer.toString(findPort(usedPorts,ip,mapPortToRange(Ports.DEFAULT_ZOOKEEPER_ELECTION_PORT,minimumPort,maximumPort)));
        ensembleProperties.put("server." + Integer.toString(index),"${zk:" + container + "/ip}:"+ port2+ ":"+ port3);
        ensembleMemberProperties.put("server.id",Integer.toString(index));
      }
      ensembleMemberProperties.put("clientPort",port1);
      ensembleMemberProperties.put("clientPortAddress",bindAddress);
      dataStore.get().setFileConfiguration(version,ensembleMemberProfile,ensembleMemberConfigName,DataStoreUtils.toBytes(ensembleMemberProperties));
      if (connectionUrl.length() > 0) {
        connectionUrl+=",";
        realConnectionUrl+=",";
      }
      connectionUrl+="${zk:" + container + "/ip}:"+ port1;
      realConnectionUrl+=ip + ":" + port1;
      if (containerList.length() > 0) {
        containerList+=",";
      }
      containerList+=container;
      index++;
    }
    String ensembleConfigName="org.fusesource.fabric.zookeeper.server-" + newClusterId + ".properties";
    dataStore.get().setFileConfiguration(version,ensembleProfile,ensembleConfigName,DataStoreUtils.toBytes(ensembleProperties));
    index=1;
    for (    String container : containers) {
      List<String> profiles=new LinkedList<String>(dataStore.get().getContainerProfiles(container));
      profiles.add("fabric-ensemble-" + newClusterId + "-"+ Integer.toString(index));
      dataStore.get().setContainerProfiles(container,profiles);
      index++;
    }
    if (oldClusterId != null) {
      Properties properties=DataStoreUtils.toProperties(dataStore.get().getConfiguration(version,"default","org.fusesource.fabric.zookeeper"));
      properties.put("zookeeper.url",getSubstitutedData(curator.get(),realConnectionUrl));
      properties.put("zookeeper.password",options.getZookeeperPassword());
      CuratorFramework dst=CuratorFrameworkFactory.builder().connectString(realConnectionUrl).retryPolicy(new RetryOneTime(500)).aclProvider(aclProvider.get()).authorization("digest",("fabric:" + options.getZookeeperPassword()).getBytes()).sessionTimeoutMs(30000).connectionTimeoutMs(30000).build();
      dst.start();
      try {
        dst.getZookeeperClient().blockUntilConnectedOrTimedOut();
        copy(curator.get(),dst,"/fabric");
        setData(dst,ZkPath.CONFIG_ENSEMBLES.getPath(),newClusterId);
        setData(dst,ZkPath.CONFIG_ENSEMBLE.getPath(newClusterId),containerList);
        final AtomicReference<DataStore> result=new AtomicReference<DataStore>();
        registrationHandler.get().setRegistrationCallback(new DataStoreTemplate(){
          @Override public void doWith(          DataStore dataStore){
synchronized (result) {
              result.set(dataStore);
              result.notifyAll();
            }
          }
        }
);
        setData(dst,ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),options.getZookeeperPassword());
        setData(dst,ZkPath.CONFIG_ENSEMBLE_URL.getPath(),connectionUrl);
        setData(curator.get(),ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath(),options.getZookeeperPassword());
        setData(curator.get(),ZkPath.CONFIG_ENSEMBLE_URL.getPath(),connectionUrl);
        long t0=System.currentTimeMillis();
        boolean allStarted=false;
        while (!allStarted && System.currentTimeMillis() - t0 < options.getMigrationTimeout()) {
          allStarted=true;
          for (          Container container : allContainers) {
            allStarted&=exists(dst,ZkPath.CONTAINER_ALIVE.getPath(container.getId())) != null;
          }
          if (!allStarted) {
            Thread.sleep(1000);
          }
        }
        if (!allStarted) {
          throw new FabricException("Timeout waiting for containers to join the new ensemble");
        }
synchronized (result) {
          if (result.get() == null) {
            result.wait();
          }
        }
        for (        String container : oldContainers) {
          cleanUpEnsembleProfiles(result.get(),container,oldClusterId);
        }
      }
  finally {
        dst.close();
      }
    }
 else {
      Map<String,String> zkConfig=dataStore.get().getConfiguration(version,"default","org.fusesource.fabric.zookeeper");
      zkConfig.put("zookeeper.password","${zk:" + ZkPath.CONFIG_ENSEMBLE_PASSWORD.getPath() + "}");
      zkConfig.put("zookeeper.url","${zk:" + ZkPath.CONFIG_ENSEMBLE_URL.getPath() + "}");
      dataStore.get().setConfiguration(version,"default","org.fusesource.fabric.zookeeper",zkConfig);
    }
  }
 catch (  Exception e) {
    throw new FabricException("Unable to create zookeeper quorum: " + e.getMessage(),e);
  }
}
