{
  Message copyMessage=null;
  if (message instanceof BytesMessage) {
    BytesMessage bytesMsg=(BytesMessage)message;
    bytesMsg.reset();
    BytesMessage msg=session.createBytesMessage();
    try {
      for (; ; ) {
        msg.writeByte(bytesMsg.readByte());
      }
    }
 catch (    MessageEOFException e) {
    }
catch (    JMSException e) {
    }
    copyMessage=msg;
  }
 else   if (message instanceof MapMessage) {
    MapMessage mapMsg=(MapMessage)message;
    MapMessage msg=session.createMapMessage();
    @SuppressWarnings("rawtypes") Enumeration iter=mapMsg.getMapNames();
    while (iter.hasMoreElements()) {
      String name=iter.nextElement().toString();
      msg.setObject(name,mapMsg.getObject(name));
    }
    copyMessage=msg;
  }
 else   if (message instanceof ObjectMessage) {
    ObjectMessage objMsg=(ObjectMessage)message;
    ObjectMessage msg=session.createObjectMessage();
    msg.setObject(objMsg.getObject());
    copyMessage=msg;
  }
 else   if (message instanceof StreamMessage) {
    StreamMessage streamMessage=(StreamMessage)message;
    streamMessage.reset();
    StreamMessage msg=session.createStreamMessage();
    Object obj=null;
    try {
      while ((obj=streamMessage.readObject()) != null) {
        msg.writeObject(obj);
      }
    }
 catch (    MessageEOFException e) {
    }
catch (    JMSException e) {
    }
    copyMessage=msg;
  }
 else   if (message instanceof TextMessage) {
    TextMessage textMsg=(TextMessage)message;
    TextMessage msg=session.createTextMessage();
    msg.setText(textMsg.getText());
    copyMessage=msg;
  }
 else   if (message instanceof BlobMessage) {
    BlobMessage blobMessage=(BlobMessage)message;
    ActiveMQBlobMessage msg=new ActiveMQBlobMessage();
    ActiveMQConnection connection=((ActiveMQSession)session).getConnection();
    msg.setConnection(connection);
    msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
    try {
      msg.setURL(blobMessage.getURL());
    }
 catch (    MalformedURLException e) {
    }
    copyMessage=msg;
  }
 else {
    copyMessage=session.createMessage();
  }
  copyMessage.setJMSCorrelationID(message.getJMSCorrelationID());
  copyMessage.setJMSDeliveryMode(message.getJMSDeliveryMode());
  copyMessage.setJMSDestination(message.getJMSDestination());
  copyMessage.setJMSExpiration(message.getJMSExpiration());
  copyMessage.setJMSMessageID(message.getJMSMessageID());
  copyMessage.setJMSPriority(message.getJMSPriority());
  copyMessage.setJMSRedelivered(message.getJMSRedelivered());
  copyMessage.setJMSTimestamp(message.getJMSTimestamp());
  copyMessage.setJMSReplyTo(message.getJMSReplyTo());
  copyMessage.setJMSType(message.getJMSType());
  if (copyMessage instanceof ActiveMQMessage) {
    try {
      ((ActiveMQMessage)copyMessage).setProperty("JMSXGroupID",message.getStringProperty("JMSXGroupID"));
    }
 catch (    IOException e) {
      throw new JMSException(e.getMessage());
    }
  }
  @SuppressWarnings("rawtypes") Enumeration names;
  names=message.getPropertyNames();
  while (names.hasMoreElements()) {
    String name=names.nextElement().toString();
    Object value=message.getObjectProperty(name);
    copyMessage.setObjectProperty(name,value);
  }
  return copyMessage;
}
