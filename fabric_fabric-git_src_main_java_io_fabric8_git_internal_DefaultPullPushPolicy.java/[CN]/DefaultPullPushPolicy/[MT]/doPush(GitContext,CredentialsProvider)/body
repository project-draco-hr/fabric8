{
  StoredConfig config=git.getRepository().getConfig();
  String remoteUrl=config.getString("remote",remoteRef,"url");
  if (remoteUrl == null) {
    LOGGER.info("No remote repository defined, so not doing a push");
    return new AbstractPushPolicyResult();
  }
  LOGGER.info("Pushing last change to: {}",remoteUrl);
  int retries=5;
  Iterator<PushResult> resit=null;
  GitAPIException lastException=null;
  while (0 < retries--) {
    try {
      resit=git.push().setTimeout(gitTimeout).setCredentialsProvider(credentialsProvider).setPushAll().call().iterator();
      lastException=null;
      retries=0;
    }
 catch (    GitAPIException ex) {
      lastException=ex;
      try {
        Thread.sleep(1000L);
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
  if (lastException != null) {
    LOGGER.warn("Cannot push because of: {}",lastException.toString());
    return new AbstractPushPolicyResult(lastException);
  }
  List<PushResult> pushResults=new ArrayList<>();
  List<RemoteRefUpdate> acceptedUpdates=new ArrayList<>();
  List<RemoteRefUpdate> rejectedUpdates=new ArrayList<>();
  while (resit.hasNext()) {
    PushResult pushResult=resit.next();
    pushResults.add(pushResult);
    for (    RemoteRefUpdate refUpdate : pushResult.getRemoteUpdates()) {
      Status status=refUpdate.getStatus();
      if (status == Status.OK || status == Status.UP_TO_DATE) {
        acceptedUpdates.add(refUpdate);
      }
 else {
        rejectedUpdates.add(refUpdate);
      }
    }
  }
  for (  RemoteRefUpdate rejectedRef : rejectedUpdates) {
    LOGGER.warn("Rejected push: {}" + rejectedRef);
    String refName=rejectedRef.getRemoteName();
    String branch=refName.substring(refName.lastIndexOf('/') + 1);
    try {
      GitHelpers.checkoutBranch(git,branch);
      FetchResult fetchResult=git.fetch().setTimeout(gitTimeout).setCredentialsProvider(credentialsProvider).setRemote(remoteRef).setRefSpecs(new RefSpec("refs/heads/" + branch)).call();
      Ref fetchRef=fetchResult.getAdvertisedRef("refs/heads/" + branch);
      git.branchRename().setOldName(branch).setNewName(branch + "-tmp").call();
      git.checkout().setCreateBranch(true).setName(branch).setStartPoint(fetchRef.getObjectId().getName()).call();
      git.branchDelete().setBranchNames(branch + "-tmp").call();
    }
 catch (    GitAPIException ex) {
      LOGGER.warn("Cannot reset branch {}, because of: {}",branch,ex.toString());
    }
  }
  PushPolicyResult result=new AbstractPushPolicyResult(pushResults,acceptedUpdates,rejectedUpdates,lastException);
  LOGGER.info("Push result: {}",result);
  return result;
}
