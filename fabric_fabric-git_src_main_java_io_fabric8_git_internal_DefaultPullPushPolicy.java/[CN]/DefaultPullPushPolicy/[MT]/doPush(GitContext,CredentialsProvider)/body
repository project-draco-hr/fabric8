{
  StoredConfig config=git.getRepository().getConfig();
  String remoteUrl=config.getString("remote",remoteRef,"url");
  if (remoteUrl == null) {
    LOGGER.info("No remote repository defined, so not doing a push");
    return new AbstractPushPolicyResult();
  }
  LOGGER.info("Pushing last change to: {}",remoteUrl);
  int retries=5;
  Iterator<PushResult> resit=null;
  GitAPIException lastException=null;
  while (0 < retries--) {
    try {
      resit=git.push().setTimeout(gitTimeout).setCredentialsProvider(credentialsProvider).setPushAll().call().iterator();
      lastException=null;
      retries=0;
    }
 catch (    GitAPIException ex) {
      lastException=ex;
      try {
        Thread.sleep(1000L);
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
  List<PushResult> pushResults=new ArrayList<>();
  List<RemoteRefUpdate> acceptedUpdates=new ArrayList<>();
  List<RemoteRefUpdate> rejectedUpdates=new ArrayList<>();
  while (resit != null && resit.hasNext()) {
    PushResult pushResult=resit.next();
    pushResults.add(pushResult);
    for (    RemoteRefUpdate refUpdate : pushResult.getRemoteUpdates()) {
      LOGGER.info("Remote ref update: {}" + refUpdate);
      Status status=refUpdate.getStatus();
      if (status == Status.OK || status == Status.UP_TO_DATE) {
        acceptedUpdates.add(refUpdate);
      }
 else {
        rejectedUpdates.add(refUpdate);
      }
    }
  }
  if (lastException != null || !rejectedUpdates.isEmpty()) {
    String checkoutId=context.getCheckoutId();
    if (checkoutId != null) {
      String branch=GitHelpers.currentBranch(git);
      RevCommit commit=CommitUtils.getCommit(git.getRepository(),checkoutId);
      LOGGER.warn("Resetting branch '{}' to: {}",branch,commit);
      try {
        git.reset().setMode(ResetType.HARD).setRef(checkoutId).call();
      }
 catch (      Exception ex) {
        LOGGER.error("Cannot reset branch '" + branch + "' to: "+ commit,ex);
      }
    }
  }
  return new AbstractPushPolicyResult(pushResults,acceptedUpdates,rejectedUpdates,lastException);
}
