{
  Scheduler scheduler=getScheduler();
  String name=server.getHost() + ":" + server.getPort()+ "-"+ System.currentTimeMillis();
  JobDetail jd=new JobDetail(name,"ServerJob",ServerJob.class);
  JobDataMap map=new JobDataMap();
  map.put(Server.class.getName(),server);
  map.put(Server.JMX_CONNECTION_FACTORY_POOL,this.getObjectPoolMap().get(Server.JMX_CONNECTION_FACTORY_POOL));
  jd.setJobDataMap(map);
  Trigger trigger=null;
  if ((server.getCronExpression() != null) && CronExpression.isValidExpression(server.getCronExpression())) {
    trigger=new CronTrigger();
    ((CronTrigger)trigger).setCronExpression(server.getCronExpression());
    ((CronTrigger)trigger).setName(server.getHost() + ":" + server.getPort()+ "-"+ Long.valueOf(System.currentTimeMillis()).toString());
    ((CronTrigger)trigger).setStartTime(new Date());
  }
 else {
    Trigger minuteTrigger=TriggerUtils.makeSecondlyTrigger(SECONDS_BETWEEN_SERVER_JOB_RUNS);
    minuteTrigger.setName(server.getHost() + ":" + server.getPort()+ "-"+ Long.valueOf(System.currentTimeMillis()).toString());
    minuteTrigger.setStartTime(new Date());
    trigger=minuteTrigger;
  }
  this.scheduler.scheduleJob(jd,trigger);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Scheduled job: " + jd.getName() + " for server: "+ server);
  }
}
