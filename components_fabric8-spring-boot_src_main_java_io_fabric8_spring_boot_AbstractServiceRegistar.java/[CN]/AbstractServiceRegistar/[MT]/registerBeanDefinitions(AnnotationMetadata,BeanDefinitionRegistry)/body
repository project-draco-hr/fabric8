{
  for (  Method method : REFLECTIONS.getMethodsAnnotatedWith(Factory.class)) {
    String methodName=method.getName();
    Class sourceType=getSourceType(method);
    Class targetType=method.getReturnType();
    Class beanType=method.getDeclaringClass();
    BeanDefinitionHolder holder=createConverterBean(beanType,methodName,sourceType,targetType);
    BeanDefinitionReaderUtils.registerBeanDefinition(holder,registry);
  }
  for (  Field field : REFLECTIONS.getFieldsAnnotatedWith(ServiceName.class)) {
    Class targetClass=field.getType();
    Alias alias=field.getAnnotation(Alias.class);
    ServiceName name=field.getAnnotation(ServiceName.class);
    PortName port=field.getAnnotation(PortName.class);
    Protocol protocol=field.getAnnotation(Protocol.class);
    External external=field.getAnnotation(External.class);
    String serviceName=name != null ? name.value() : null;
    Service serviceInstance=new ServiceBuilder(getService(serviceName)).build();
    String servicePort=port != null ? port.value() : null;
    String serviceProtocol=protocol != null ? protocol.value() : DEFAULT_PROTOCOL;
    Boolean serviceExternal=external != null && external.value();
    String serviceAlias=alias != null ? alias.value() : createAlias(serviceName,targetClass,serviceProtocol,servicePort,serviceExternal);
    serviceInstance.getAdditionalProperties().put(ALIAS,serviceAlias);
    serviceInstance.getAdditionalProperties().put(PROTOCOL,serviceProtocol);
    serviceInstance.getAdditionalProperties().put(EXTERNAL,serviceExternal);
    if (port != null) {
      serviceInstance.getAdditionalProperties().put(PORT,servicePort);
    }
    BeanDefinitionHolder holder=createServiceDefinition(serviceInstance,serviceAlias,serviceProtocol,servicePort,targetClass);
    BeanDefinitionReaderUtils.registerBeanDefinition(holder,registry);
  }
}
