{
  LOGGER.info("Importing additional profiles from file system directory: {}",fromPath);
  List<String> profiles=new ArrayList<String>();
  String[] zips=fromPath.toFile().list(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".zip");
    }
  }
);
  int count=zips != null ? zips.length : 0;
  LOGGER.debug("Found {} .zip files to import",count);
  if (zips != null && zips.length > 0) {
    for (    String name : zips) {
      profiles.add("file:" + fromPath + "/"+ name);
      LOGGER.debug("Adding {} .zip file to import",name);
    }
  }
  String[] props=fromPath.toFile().list(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(Profile.PROPERTIES_SUFFIX);
    }
  }
);
  count=props != null ? props.length : 0;
  LOGGER.debug("Found {} .properties files to import",count);
  try {
    if (props != null && props.length > 0) {
      for (      String name : props) {
        java.util.Properties p=new java.util.Properties();
        p.load(new FileInputStream(fromPath.resolve(name).toFile()));
        Enumeration<String> e=(Enumeration<String>)p.propertyNames();
        while (e.hasMoreElements()) {
          String key=e.nextElement();
          String value=p.getProperty(key);
          if (value != null) {
            profiles.add(value);
            LOGGER.debug("Adding {} to import",value);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOGGER.debug("Error importing profiles due " + e.getMessage(),e);
    LOGGER.warn("Error importing profiles due " + e.getMessage() + ". This exception is ignored.");
  }
  String fabricVersion=dataStore.get().getFabricReleaseVersion();
  List<String> replaced=new ArrayList<>();
  for (  String profileZipUrl : profiles) {
    String token="\\$\\{version:fabric\\}";
    String url=profileZipUrl.replaceFirst(token,fabricVersion);
    url=EnvPlaceholderResolver.removeTokens(url);
    url=EnvPlaceholderResolver.resolveExpression(url,null,false);
    String[] urls=url.split(",");
    for (    String s : urls) {
      s=s.trim();
      if ("false".equals(s) || "off".equals(s)) {
        continue;
      }
      replaced.add(s);
    }
  }
  if (!replaced.isEmpty()) {
    LOGGER.info("Importing additional profiles from {} url locations ...",replaced.size());
    importProfiles(dataStore.get().getDefaultVersion(),replaced);
    for (    String url : replaced) {
      LOGGER.info("Importing additional profile: {}",url);
    }
    LOGGER.info("Importing additional profiles done");
  }
}
