{
  System.out.println(executeCommand("fabric:create -n -g localip -r manualip --manual-ip localhost -b localhost"));
  System.out.println(executeCommand("fabric:profile-list"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
    Set<Container> containers=ContainerBuilder.create(fabricProxy,1,1).withName("child").withProfiles("default").assertProvisioningResult().build();
    try {
      Container child=containers.iterator().next();
      Assert.assertEquals("manualip",getSubstitutedPath(curator,ZkPath.CONTAINER_RESOLVER.getPath(child.getId())));
      Assert.assertEquals("manualip",fabricService.getCurrentContainer().getResolver());
      waitForFabricCommands();
      new BundleUtils(bundleContext).findAndStopBundle("io.fabric8.fabric-configadmin");
      System.out.println(executeCommand("fabric:container-resolver-set --container root localip"));
      Assert.assertEquals("localip",getSubstitutedPath(curator,ZkPath.CONTAINER_RESOLVER.getPath(child.getId())));
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
