{
  System.out.println(executeCommand("fabric:create -n --wait-for-provisioning"));
  System.out.println(executeCommand("shell:info"));
  System.out.println(executeCommand("fabric:info"));
  System.out.println(executeCommand("fabric:profile-list"));
  ServiceLocator.awaitService(bundleContext,ContainerRegistration.class);
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
    Set<Container> containers=ContainerBuilder.create(fabricProxy,1,1).withName("child").withProfiles("default").assertProvisioningResult().build();
    try {
      Container child=containers.iterator().next();
      Assert.assertEquals("localhostname",getSubstitutedPath(curator,ZkPath.CONTAINER_RESOLVER.getPath(child.getId())));
      String sshUrlWithLocalhostResolver=child.getSshUrl();
      executeCommand("fabric:container-resolver-set --container " + child.getId() + " localip");
      Assert.assertEquals("localip",getSubstitutedPath(curator,ZkPath.CONTAINER_RESOLVER.getPath(child.getId())));
      String sshUrlWithLocalIpResolver=child.getSshUrl();
      System.out.println("SSH URL with " + sshUrlWithLocalhostResolver + " resolver: localhostname");
      System.out.println("SSH URL with " + sshUrlWithLocalIpResolver + " resolver: localip");
      Assert.assertNotSame(sshUrlWithLocalhostResolver,sshUrlWithLocalIpResolver);
      setData(curator,ZkPath.CONTAINER_PUBLIC_IP.getPath(child.getId()),"my.public.ip.address");
      executeCommand("fabric:container-resolver-set --container " + child.getId() + " publicip");
      Assert.assertEquals("publicip",getSubstitutedPath(curator,ZkPath.CONTAINER_RESOLVER.getPath(child.getId())));
      String sshUrlWithPublicIpResolver=child.getSshUrl();
      System.out.println("SSH URL with " + sshUrlWithPublicIpResolver + " resolver: publicip");
      Assert.assertNotNull(sshUrlWithPublicIpResolver);
      Assert.assertTrue(sshUrlWithPublicIpResolver.startsWith("my.public.ip.address"));
      setData(curator,ZkPath.CONTAINER_MANUAL_IP.getPath(child.getId()),"my.manual.ip.address");
      executeCommand("fabric:container-resolver-set --container " + child.getId() + " manualip");
      Assert.assertEquals("manualip",getSubstitutedPath(curator,ZkPath.CONTAINER_RESOLVER.getPath(child.getId())));
      String sshUrlWithManualIpResolver=child.getSshUrl();
      System.out.println("SSH URL with " + sshUrlWithManualIpResolver + " resolver: manualip");
      Assert.assertNotNull(sshUrlWithManualIpResolver);
      Assert.assertTrue(sshUrlWithManualIpResolver.startsWith("my.manual.ip.address"));
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
