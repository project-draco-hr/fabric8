{
  List<ArchetypeInfo> archetypes=findArchetypes();
  System.out.println("Archetypes: " + archetypes);
  System.out.println();
  for (  ArchetypeInfo archetype : archetypes) {
    File workDir=new File(System.getProperty("basedir","."),"target/generated-projects");
    workDir.mkdirs();
    assertGenerateArchetype(archetype,workDir);
  }
  SortedMap<String,String> sorted=new TreeMap<String,String>(System.getenv());
  Set<Map.Entry<String,String>> entries=sorted.entrySet();
  for (  Map.Entry<String,String> entry : entries) {
    System.out.println("   env:  " + entry.getKey() + " = "+ entry.getValue());
  }
  System.err.println(executeCommand("fabric:create -n"));
  String jvmopts="-Xms512m -XX:MaxPermSize=512m -Xmx2048m -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5008";
  Set<Container> containers=ContainerBuilder.child(1).withName("child").withJvmOpts(jvmopts).assertProvisioningResult().build();
  try {
    assertEquals("One container",1,containers.size());
    Container child=containers.iterator().next();
    assertEquals("child1",child.getId());
    assertEquals("root",child.getParent().getId());
  }
  finally {
    ContainerBuilder.destroy(containers);
  }
}
