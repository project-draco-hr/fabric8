{
  CommandSupport.executeCommand("fabric:create --force --clean -n");
  CommandSupport.executeCommand("fabric:profile-create --parents feature-camel test-profile");
  CommandSupport.executeCommand("fabric:version-create --parent 1.0 1.1");
  CommandSupport.executeCommand("fabric:profile-edit --repositories mvn:io.fabric8.examples.fabric-camel-dosgi/features/" + System.getProperty("fabric.version") + "/xml/features test-profile 1.1");
  CommandSupport.executeCommand("fabric:profile-edit --features fabric-dosgi test-profile 1.1");
  CommandSupport.executeCommand("fabric:profile-edit --pid io.fabric8.agent/org.ops4j.pax.url.mvn.repositories=http://repo1.maven.org/maven2@id=m2central default 1.1");
  CommandSupport.executeCommand("fabric:profile-edit --pid test-profile 1.1");
  Set<Container> containers=ContainerBuilder.create().withName("smoke.cntA").withProfiles("test-profile").assertProvisioningResult().build();
  try {
    for (    Container container : containers) {
      CommandSupport.executeCommand("fabric:container-upgrade 1.1 " + container.getId());
      System.out.flush();
    }
    Provision.provisioningSuccess(containers,FabricEnsembleSupport.PROVISION_TIMEOUT);
    CommandSupport.executeCommand("fabric:container-list");
    for (    Container container : containers) {
      CommandSupport.executeCommand("fabric:container-connect -u admin -p admin " + container.getId() + " osgi:list");
      CommandSupport.executeCommand("fabric:container-connect -u admin -p admin " + container.getId() + " config:proplist --pid org.ops4j.pax.url.mvn");
      System.out.flush();
    }
  }
  finally {
    ContainerBuilder.stop(containers);
  }
}
