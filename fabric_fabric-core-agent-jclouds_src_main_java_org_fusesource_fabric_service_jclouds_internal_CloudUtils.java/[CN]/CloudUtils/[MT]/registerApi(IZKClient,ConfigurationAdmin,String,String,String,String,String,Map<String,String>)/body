{
  Runnable registrationTask=new Runnable(){
    @Override public void run(){
      try {
        Configuration configuration=findOrCreateFactoryConfiguration(configurationAdmin,"org.jclouds.compute",id,null,api);
        if (configuration != null) {
          Dictionary dictionary=configuration.getProperties();
          if (dictionary == null) {
            dictionary=new Properties();
          }
          dictionary.put(Constants.JCLOUDS_SERVICE_ID,id);
          dictionary.put(ServiceFactorySupport.API,api);
          dictionary.put(ServiceFactorySupport.ENDPOINT,endpoint);
          dictionary.put(ServiceFactorySupport.CREDENTIAL,credential);
          dictionary.put(ServiceFactorySupport.IDENTITY,identity);
          dictionary.put("credential-store","zookeeper");
          dictionary.put("jclouds.ssh.max-retries","40");
          if (api != null && api.equals("aws-ec2") && props != null && props.containsKey("owner") && props.get("owner") != null) {
            dictionary.put("jclouds.ec2.ami-owners",props.get("owner"));
          }
          for (          Map.Entry<String,String> entry : props.entrySet()) {
            String key=entry.getKey();
            String value=entry.getValue();
            dictionary.put(key,value);
          }
          configuration.update(dictionary);
          if (zooKeeper.isConnected()) {
            if (zooKeeper.exists(ZkPath.CLOUD_PROVIDER.getPath(api)) == null) {
              ZooKeeperUtils.create(zooKeeper,ZkPath.CLOUD_PROVIDER.getPath(api));
            }
            ZooKeeperUtils.set(zooKeeper,ZkPath.CLOUD_PROVIDER_IDENTIY.getPath(api),identity);
            ZooKeeperUtils.set(zooKeeper,ZkPath.CLOUD_PROVIDER_CREDENTIAL.getPath(api),credential);
          }
 else {
            System.out.println("Fabric has not been initialized. Provider registration will be local to the current container.");
          }
        }
      }
 catch (      Exception ex) {
      }
    }
  }
;
  new Thread(registrationTask).start();
}
