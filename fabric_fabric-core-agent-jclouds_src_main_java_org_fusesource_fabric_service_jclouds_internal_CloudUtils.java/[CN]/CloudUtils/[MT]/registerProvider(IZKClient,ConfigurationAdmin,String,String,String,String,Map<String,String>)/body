{
  Runnable registrationTask=new Runnable(){
    @Override public void run(){
      try {
        Configuration configuration=findOrCreateFactoryConfiguration(configurationAdmin,"org.jclouds.compute",name,provider,null);
        if (configuration != null) {
          Dictionary dictionary=configuration.getProperties();
          if (dictionary == null) {
            dictionary=new Properties();
          }
          dictionary.put(Constants.NAME,name);
          dictionary.put(Constants.PROVIDER,provider);
          dictionary.put(Constants.CREDENTIAL,credential);
          dictionary.put(Constants.IDENTITY,identity);
          dictionary.put("credential-store","zookeeper");
          dictionary.put("jclouds.ssh.max-retries","40");
          if (provider != null && provider.equals("aws-ec2") && props != null && props.containsKey("owner") && props.get("owner") != null) {
            dictionary.put("jclouds.ec2.ami-owners",props.get("owner"));
          }
          for (          Map.Entry<String,String> entry : props.entrySet()) {
            String key=entry.getKey();
            String value=entry.getValue();
            dictionary.put(key,value);
          }
          configuration.update(dictionary);
          if (zooKeeper.isConnected()) {
            if (zooKeeper.exists(ZkPath.CLOUD_SERVICE.getPath(name)) == null) {
              ZooKeeperUtils.create(zooKeeper,ZkPath.CLOUD_SERVICE.getPath(name));
            }
            Enumeration keys=dictionary.keys();
            while (keys.hasMoreElements()) {
              Object key=keys.nextElement();
              Object value=dictionary.get(key);
              if (!key.equals("service.pid") && !key.equals("service.factoryPid")) {
                ZooKeeperUtils.set(zooKeeper,ZkPath.CLOUD_SERVICE_PROPERTY.getPath(name,String.valueOf(key)),String.valueOf(value));
              }
            }
            for (            Map.Entry<String,String> entry : props.entrySet()) {
              String key=entry.getKey();
              String value=entry.getValue();
              if (!key.equals("service.pid") && !key.equals("service.factoryPid")) {
                ZooKeeperUtils.set(zooKeeper,ZkPath.CLOUD_SERVICE_PROPERTY.getPath(name,key),value);
              }
            }
          }
 else {
            System.out.println("Fabric has not been initialized. Provider registration will be local to the current container.");
          }
        }
      }
 catch (      Exception ex) {
      }
    }
  }
;
  new Thread(registrationTask).start();
}
