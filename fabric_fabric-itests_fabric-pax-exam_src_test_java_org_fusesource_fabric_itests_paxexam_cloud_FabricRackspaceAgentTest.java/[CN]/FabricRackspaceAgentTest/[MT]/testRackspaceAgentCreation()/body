{
  if (!isReady()) {
    System.err.println("Rackspace is not setup correctly. This test will not run.");
    System.err.println("To properly run this test, you need to setup with maven the following properties:");
    System.err.println("fabricitest.rackspace.identity \t The rackspace access id");
    System.err.println("fabricitest.rackspace.credential \t The rackspace access key");
    System.err.println("fabricitest.rackspace.image  \t The rackspace (java ready) image");
    System.err.println("fabricitest.rackspace.user  \t The user under which the agent will run");
    return;
  }
  System.err.println(executeCommand("features:install jclouds-cloudserver-us fabric-jclouds jclouds-commands"));
  executeCommands("config:edit org.jclouds.compute-rackspace","config:propset provider cloudservers-us ","config:propset identity " + identity,"config:propset credential " + credential,"config:update");
  ComputeService computeService=getOsgiService(ComputeService.class,3 * DEFAULT_TIMEOUT);
  Thread.sleep(3 * DEFAULT_TIMEOUT);
  System.err.println(executeCommand(String.format("fabric:container-create --ensemble-server --url jclouds://cloudservers-us?imageId=%s&locationId=%s&group=%s&user=%s --profile default ensemble1",image,location,group,user),10 * 60000L,false));
  String publicIp=getNodePublicIp(computeService);
  assertNotNull(publicIp);
  System.err.println(executeCommand("fabric:join " + publicIp + ":2181",10 * 60000L,false));
  Thread.sleep(DEFAULT_TIMEOUT);
  System.err.println(executeCommand("fabric:join " + publicIp + ":2181",10 * 60000L,false));
  String agentList=executeCommand("fabric:container-list");
  System.err.println(agentList);
  assertTrue(agentList.contains("root") && agentList.contains("ensemble1"));
}
