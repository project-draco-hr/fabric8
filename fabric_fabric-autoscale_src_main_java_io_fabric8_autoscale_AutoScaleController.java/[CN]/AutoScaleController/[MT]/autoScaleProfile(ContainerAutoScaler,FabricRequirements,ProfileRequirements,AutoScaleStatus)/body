{
  final String profile=profileRequirement.getProfile();
  Integer minimumInstances=profileRequirement.getMinimumInstances();
  if (minimumInstances != null) {
    List<Container> containers=aliveOrPendingContainersForProfile(profile);
    int count=containers.size();
    int delta=minimumInstances - count;
    try {
      AutoScaleProfileStatus profileStatus=status.profileStatus(profile);
      if (delta < 0) {
        profileStatus.destroyingContainer();
        autoScaler.destroyContainers(profile,-delta,containers);
      }
 else       if (delta > 0) {
        if (requirementsSatisfied(requirements,profileRequirement,status)) {
          profileStatus.creatingContainer();
          final FabricService service=fabricService.get();
          String requirementsVersion=requirements.getVersion();
          final String version=Strings.isNotBlank(requirementsVersion) ? requirementsVersion : service.getDefaultVersion().getId();
          final AutoScaleRequest command=new AutoScaleRequest(service,version,profile,delta,requirements,profileRequirement,status);
          new Thread("Creating container for " + command.getProfile()){
            @Override public void run(){
              try {
                autoScaler.createContainers(command);
              }
 catch (              Exception e) {
                LOGGER.error("Failed to create container of profile: " + profile + ". Caught: "+ e,e);
              }
            }
          }
.start();
        }
      }
 else {
        profileStatus.provisioned();
      }
    }
 catch (    Exception e) {
      LOGGER.error("Failed to auto-scale " + profile + ". Caught: "+ e,e);
    }
  }
}
