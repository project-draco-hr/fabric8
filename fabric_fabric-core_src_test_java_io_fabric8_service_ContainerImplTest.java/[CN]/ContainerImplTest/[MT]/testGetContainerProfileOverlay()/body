{
  String v="1.0";
  String defaultProfile="default";
  String camelProfile="feature-camel";
  String cxfProfile="feature-cxf";
  Version version=null;
  List<String> profiles=Arrays.asList(camelProfile,cxfProfile);
  Map<String,String> defaultAttributes=new HashMap<String,String>();
  Map<String,String> camelAttributes=new HashMap<String,String>();
  Map<String,String> cxfAttributes=new HashMap<String,String>();
  Map<String,byte[]> defaultFiles=new HashMap<String,byte[]>();
  Map<String,byte[]> camelFiles=new HashMap<String,byte[]>();
  Map<String,byte[]> cxfFiles=new HashMap<String,byte[]>();
  Map<String,Map<String,String>> defaultPids=new HashMap<String,Map<String,String>>();
  Map<String,Map<String,String>> camelPids=new HashMap<String,Map<String,String>>();
  Map<String,Map<String,String>> cxfPids=new HashMap<String,Map<String,String>>();
  camelAttributes.put("attribute." + Profile.PARENTS,"default");
  cxfAttributes.put("attribute." + Profile.PARENTS,"feature-camel");
  defaultFiles.put("test1.properties","key=fromDefault".getBytes());
  camelFiles.put("test1.properties","key=fromCamel".getBytes());
  cxfFiles.put("test2.properties","key=fromCxf".getBytes());
  expect(fabricService.getEnvironment()).andReturn("").anyTimes();
  expect(profileService.getRequiredVersion(eq(v))).andReturn(version).anyTimes();
  expect(profileRegistry.getProfileAttributes(eq(v),eq(defaultProfile))).andReturn(defaultAttributes).anyTimes();
  expect(profileRegistry.getProfileAttributes(eq(v),eq(camelProfile))).andReturn(camelAttributes).anyTimes();
  expect(profileRegistry.getProfileAttributes(eq(v),eq(cxfProfile))).andReturn(cxfAttributes).anyTimes();
  expect(profileRegistry.getFileConfigurations(eq(v),eq(defaultProfile))).andReturn(defaultFiles).anyTimes();
  expect(profileRegistry.getFileConfigurations(eq(v),eq(camelProfile))).andReturn(camelFiles).anyTimes();
  expect(profileRegistry.getFileConfigurations(eq(v),eq(cxfProfile))).andReturn(cxfFiles).anyTimes();
  expect(profileRegistry.getConfigurations(eq(v),eq(defaultProfile))).andReturn(defaultPids).anyTimes();
  expect(profileRegistry.getConfigurations(eq(v),eq(camelProfile))).andReturn(camelPids).anyTimes();
  expect(profileRegistry.getConfigurations(eq(v),eq(cxfProfile))).andReturn(cxfPids).anyTimes();
  fabricService.substituteConfigurations((Map<String,Map<String,String>>)anyObject());
  expectLastCall().anyTimes();
  expect(dataStore.getContainerVersion(eq(CONTAINER_ID))).andReturn(v).anyTimes();
  expect(dataStore.getContainerProfiles(eq(CONTAINER_ID))).andReturn(profiles).anyTimes();
  expect(profileRegistry.hasProfile(v,camelProfile)).andReturn(true).anyTimes();
  expect(profileRegistry.hasProfile(v,cxfProfile)).andReturn(true).anyTimes();
  replay(fabricService);
  replay(dataStore);
  Map<String,Map<String,String>> configs=container.getOverlayProfile().getConfigurations();
  assertNotNull(configs);
  assertEquals(2,configs.size());
  assertNotNull(configs.get("test1"));
  assertEquals(1,configs.get("test1").size());
  assertEquals("fromCamel",configs.get("test1").get("key"));
  assertNotNull(configs.get("test2"));
  assertEquals(1,configs.get("test2").size());
  assertEquals("fromCxf",configs.get("test2").get("key"));
  verify(fabricService);
  verify(dataStore);
}
