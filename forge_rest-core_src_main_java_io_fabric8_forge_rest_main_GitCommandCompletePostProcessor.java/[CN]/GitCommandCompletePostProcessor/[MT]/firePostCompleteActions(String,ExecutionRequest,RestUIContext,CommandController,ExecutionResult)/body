{
  if (name.equals("project-new")) {
    String targetLocation=null;
    String named=null;
    List<Map<String,String>> inputList=executionRequest.getInputList();
    for (    Map<String,String> map : inputList) {
      if (Strings.isNullOrEmpty(targetLocation)) {
        targetLocation=map.get("targetLocation");
      }
      if (Strings.isNullOrEmpty(named)) {
        named=map.get("named");
      }
    }
    if (Strings.isNullOrEmpty(targetLocation)) {
      LOG.warn("No targetLocation could be found!");
    }
 else     if (Strings.isNullOrEmpty(named)) {
      LOG.warn("No named could be found!");
    }
 else {
      File basedir=new File(targetLocation,named);
      if (!basedir.isDirectory() || !basedir.exists()) {
        LOG.warn("Generated project folder does not exist: " + basedir.getAbsolutePath());
      }
 else {
        System.out.println("About to git init folder " + basedir.getAbsolutePath());
        InitCommand initCommand=Git.init();
        initCommand.setDirectory(basedir);
        try {
          Git git=initCommand.call();
          LOG.info("Initialised an empty git configuration repo at {}",basedir.getAbsolutePath());
          String address=gogsUrl.toString();
          int idx=address.indexOf("://");
          if (idx > 0) {
            address="http" + address.substring(idx);
          }
          if (!address.endsWith("/")) {
            address+="/";
          }
          String user=gitUser;
          String password=gitPassword;
          String authorEmail="dummy@gmail.com";
          GitRepoClient repoClient=new GitRepoClient(address,user,password);
          CreateRepositoryDTO createRepository=new CreateRepositoryDTO();
          createRepository.setName(named);
          String fullName=null;
          RepositoryDTO repository=repoClient.createRepository(createRepository);
          if (repository != null) {
            System.out.println("Got repository: " + JsonHelper.toJson(repository));
            fullName=repository.getFullName();
          }
          if (Strings.isNullOrEmpty(fullName)) {
            fullName=user + "/" + named;
          }
          String htmlUrl=address + user + "/"+ named;
          String remote=address + user + "/"+ named+ ".git";
          results.setOutputProperty("fullName",fullName);
          results.setOutputProperty("cloneUrl",remote);
          results.setOutputProperty("htmlUrl",htmlUrl);
          LOG.info("Using remote: " + remote);
          String branch="master";
          configureBranch(git,branch,remote);
          CredentialsProvider credentials=new UsernamePasswordCredentialsProvider(user,password);
          PersonIdent personIdent=new PersonIdent(user,authorEmail);
          doAddCommitAndPushFiles(git,credentials,personIdent,remote,branch);
        }
 catch (        Exception e) {
          handleException(e);
        }
      }
    }
  }
 else {
    File basedir=context.getInitialSelectionFile();
    String absolutePath=basedir != null ? basedir.getAbsolutePath() : null;
    System.out.println("===== added or mutated files in folder: " + absolutePath);
    if (basedir != null) {
      File gitFolder=new File(basedir,".git");
      if (gitFolder.exists() && gitFolder.isDirectory()) {
        System.out.println("======== has .git folder so lets add/commit files then push!");
      }
    }
  }
}
