{
  UserDetails userDetails=gitUserHelper.createUserDetails(request);
  String user=userDetails.getUser();
  String password=userDetails.getPassword();
  String authorEmail=userDetails.getEmail();
  String branch="master";
  System.out.println("execute has request " + request);
  try {
    CredentialsProvider credentials=new UsernamePasswordCredentialsProvider(user,password);
    PersonIdent personIdent=new PersonIdent(user,authorEmail);
    if (name.equals(PROJECT_NEW_COMMAND)) {
      String targetLocation=null;
      String named=null;
      List<Map<String,String>> inputList=executionRequest.getInputList();
      for (      Map<String,String> map : inputList) {
        if (Strings.isNullOrEmpty(targetLocation)) {
          targetLocation=map.get("targetLocation");
        }
        if (Strings.isNullOrEmpty(named)) {
          named=map.get("named");
        }
      }
      if (Strings.isNullOrEmpty(targetLocation)) {
        LOG.warn("No targetLocation could be found!");
      }
 else       if (Strings.isNullOrEmpty(named)) {
        LOG.warn("No named could be found!");
      }
 else {
        File basedir=new File(targetLocation,named);
        if (!basedir.isDirectory() || !basedir.exists()) {
          LOG.warn("Generated project folder does not exist: " + basedir.getAbsolutePath());
        }
 else {
          System.out.println("About to git init folder " + basedir.getAbsolutePath());
          InitCommand initCommand=Git.init();
          initCommand.setDirectory(basedir);
          Git git=initCommand.call();
          LOG.info("Initialised an empty git configuration repo at {}",basedir.getAbsolutePath());
          GitRepoClient repoClient=new GitRepoClient(address,user,password);
          CreateRepositoryDTO createRepository=new CreateRepositoryDTO();
          createRepository.setName(named);
          String fullName=null;
          RepositoryDTO repository=repoClient.createRepository(createRepository);
          if (repository != null) {
            System.out.println("Got repository: " + toJson(repository));
            fullName=repository.getFullName();
          }
          if (Strings.isNullOrEmpty(fullName)) {
            fullName=user + "/" + named;
          }
          String htmlUrl=address + user + "/"+ named;
          String remote=address + user + "/"+ named+ ".git";
          results.setOutputProperty("fullName",fullName);
          results.setOutputProperty("cloneUrl",remote);
          results.setOutputProperty("htmlUrl",htmlUrl);
          LOG.info("Using remote: " + remote);
          configureBranch(git,branch,remote);
          createKubernetesResources(user,named,remote,branch,repoClient);
          doAddCommitAndPushFiles(git,credentials,personIdent,remote,branch);
        }
      }
    }
 else {
      File basedir=context.getInitialSelectionFile();
      String absolutePath=basedir != null ? basedir.getAbsolutePath() : null;
      System.out.println("===== added or mutated files in folder: " + absolutePath);
      if (basedir != null) {
        File gitFolder=new File(basedir,".git");
        if (gitFolder.exists() && gitFolder.isDirectory()) {
          System.out.println("======== has .git folder so lets add/commit files then push!");
          FileRepositoryBuilder builder=new FileRepositoryBuilder();
          Repository repository=builder.setGitDir(gitFolder).readEnvironment().findGitDir().build();
          Git git=new Git(repository);
          String remote=getRemote(git,branch);
          if (remote == null) {
            LOG.warn("Could not find remote git URL for folder " + basedir.getAbsolutePath());
          }
 else {
            doAddCommitAndPushFiles(git,credentials,personIdent,remote,branch);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
}
