{
  Profile profile=null;
  try {
    profile=fabricService.get().getCurrentContainer().getOverlayProfile();
  }
 catch (  Exception ex) {
    LOGGER.debug("Failed to read container profile. This exception will be ignored..",ex);
    return;
  }
  try {
    final Map<String,Map<String,String>> pidProperties=profile.getConfigurations();
    List<Configuration> configs=asList(configAdmin.get().listConfigurations("(" + FABRIC_ZOOKEEPER_PID + "=*)"));
    for (    String pid : pidProperties.keySet()) {
      if (!pid.equals(Constants.AGENT_PID)) {
        Hashtable<String,Object> c=new Hashtable<String,Object>();
        c.putAll(pidProperties.get(pid));
        updateConfig(configs,pid,c);
      }
    }
    for (    String pid : pidProperties.keySet()) {
      if (pid.equals(Constants.AGENT_PID)) {
        Hashtable<String,Object> c=new Hashtable<String,Object>();
        c.putAll(pidProperties.get(pid));
        c.put(Profile.HASH,String.valueOf(profile.getProfileHash()));
        updateConfig(configs,pid,c);
      }
    }
    for (    Configuration config : configs) {
      LOGGER.info("Deleting configuration {}",config.getPid());
      fabricService.get().getPortService().unregisterPort(fabricService.get().getCurrentContainer(),config.getPid());
      config.delete();
    }
  }
 catch (  Throwable e) {
    if (isValid()) {
      LOGGER.warn("Exception when tracking configurations. This exception will be ignored.",e);
    }
 else {
      LOGGER.debug("Exception when tracking configurations. This exception will be ignored because services have been unbound in the mean time.",e);
    }
  }
}
