{
  CreateContainerMetadata<? extends CreateContainerOptions> metadata=getContainerMetaData(containerId);
  if (metadata == null) {
    return;
  }
  CreateContainerOptions options=metadata.getCreateOptions();
  if (options == null) {
    return;
  }
  ObjectMapper mapper=getObjectMapper();
  JsonNode optionsJson=mapper.convertValue(options,JsonNode.class);
  JsonNode valueJson=mapper.convertValue(value,JsonNode.class);
  ((ObjectNode)optionsJson).put(field,valueJson);
  Object builder=null;
  try {
    builder=options.getClass().getMethod("builder").invoke(null);
  }
 catch (  Exception e) {
    LOG.warn("Failed to get builder when setting " + field + " on container "+ containerId,e);
    throw new RuntimeException("Failed to get builder when setting " + field + " on container "+ containerId,e);
  }
  builder=mapper.convertValue(optionsJson,builder.getClass());
  CreateContainerOptions newOptions=null;
  try {
    newOptions=(CreateContainerOptions)builder.getClass().getMethod("build").invoke(builder);
  }
 catch (  Exception e) {
    LOG.warn("Failed to build CreatecontainerOptions when setting " + field + " on container "+ containerId,e);
    throw new RuntimeException("Failed to build CreatecontainerOptions when setting " + field + " on container "+ containerId,e);
  }
  metadata.setCreateOptions(newOptions);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Create container metadata: " + metadata);
  }
  getFabricService().getDataStore().setContainerMetadata(metadata);
}
