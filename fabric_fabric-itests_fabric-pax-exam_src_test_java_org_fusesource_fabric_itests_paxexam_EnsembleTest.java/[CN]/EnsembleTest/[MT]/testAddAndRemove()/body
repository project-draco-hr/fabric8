{
  System.err.println(executeCommand("fabric:create -n"));
  System.err.println(executeCommand("fabric:profile-edit --delete --features fabric-git default"));
  Deque<Container> containerQueue=new LinkedList<Container>(ContainerBuilder.create(2).withName("ens").assertProvisioningResult().build());
  Deque<Container> addedContainers=new LinkedList<Container>();
  for (int e=0; e < 3 && containerQueue.size() >= 2 && containerQueue.size() % 2 == 0; e++) {
    Container cnt1=containerQueue.removeFirst();
    Container cnt2=containerQueue.removeFirst();
    addedContainers.add(cnt1);
    addedContainers.add(cnt2);
    WaitForServiceAddingTask<CuratorFramework> waitTask=new WaitForServiceAddingTask<CuratorFramework>(CuratorFramework.class,null);
    System.err.println(executeCommand("fabric:container-resolver-list"));
    System.err.println(executeCommand("fabric:ensemble-add --force " + cnt1.getId() + " "+ cnt2.getId()));
    Future<CuratorFramework> future=excutorService.submit(waitTask);
    CuratorFramework curator=future.get(120,TimeUnit.SECONDS);
    curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
    System.err.println(executeCommand("config:proplist --pid org.fusesource.fabric.zookeeper"));
    Thread.sleep(5000);
    System.err.println(executeCommand("fabric:container-list"));
    System.err.println(executeCommand("fabric:ensemble-list"));
    ZooKeeperClusterService zooKeeperClusterService=ServiceLocator.getOsgiService(ZooKeeperClusterService.class);
    Assert.assertNotNull(zooKeeperClusterService);
    List<String> ensembleContainersResult=zooKeeperClusterService.getEnsembleContainers();
    Assert.assertTrue(ensembleContainersResult.contains(cnt1.getId()));
    Assert.assertTrue(ensembleContainersResult.contains(cnt2.getId()));
    Provision.waitForContainerAlive(Arrays.asList(getFabricService().getContainers()),PROVISION_TIMEOUT);
  }
  for (int e=0; e < 3 && addedContainers.size() >= 2 && addedContainers.size() % 2 == 0; e++) {
    Container cnt1=addedContainers.removeFirst();
    Container cnt2=addedContainers.removeFirst();
    containerQueue.add(cnt1);
    containerQueue.add(cnt2);
    WaitForServiceAddingTask<CuratorFramework> waitTask=new WaitForServiceAddingTask<CuratorFramework>(CuratorFramework.class,null);
    System.err.println(executeCommand("fabric:container-resolver-list"));
    System.err.println(executeCommand("fabric:ensemble-remove --force " + cnt1.getId() + " "+ cnt2.getId()));
    Future<CuratorFramework> future=excutorService.submit(waitTask);
    CuratorFramework curator=future.get(120,TimeUnit.SECONDS);
    curator.getZookeeperClient().blockUntilConnectedOrTimedOut();
    System.err.println(executeCommand("config:proplist --pid org.fusesource.fabric.zookeeper"));
    Thread.sleep(5000);
    System.err.println(executeCommand("fabric:container-list"));
    System.err.println(executeCommand("fabric:ensemble-list"));
    ZooKeeperClusterService zooKeeperClusterService=ServiceLocator.getOsgiService(ZooKeeperClusterService.class);
    Assert.assertNotNull(zooKeeperClusterService);
    List<String> ensembleContainersResult=zooKeeperClusterService.getEnsembleContainers();
    Assert.assertFalse(ensembleContainersResult.contains(cnt1.getId()));
    Assert.assertFalse(ensembleContainersResult.contains(cnt2.getId()));
    Provision.waitForContainerAlive(Arrays.asList(getFabricService().getContainers()),PROVISION_TIMEOUT);
  }
}
