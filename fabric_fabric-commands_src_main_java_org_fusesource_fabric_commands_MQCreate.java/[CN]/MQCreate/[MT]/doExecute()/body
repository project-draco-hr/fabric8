{
  MQService service=new MQServiceImpl(fabricService);
  HashMap<String,String> configuration=new HashMap<String,String>();
  if (data == null) {
    data=System.getProperty("karaf.base") + System.getProperty("file.separator") + "data"+ System.getProperty("file.separator")+ name;
  }
  configuration.put("data",data);
  if (config != null) {
    configuration.put("config",service.getConfig(version,config));
  }
  if (group != null) {
    configuration.put("group",group);
  }
  if (networks != null) {
    configuration.put("network",networks);
  }
  if (networksUserName != null) {
    configuration.put("network.userName",networksUserName);
  }
  if (networksPassword != null) {
    configuration.put("network.password",networksPassword);
  }
  Profile profile=service.createMQProfile(version,name,configuration);
  System.out.println("MQ profile " + profile.getId() + " ready");
  if (assign != null) {
    String[] assignContainers=assign.split(",");
    for (    String containerName : assignContainers) {
      try {
        Container container=fabricService.getContainer(containerName);
        if (container == null) {
          System.out.println("Failed to assign profile to " + containerName + ": profile doesn't exists");
        }
 else {
          HashSet<Profile> profiles=new HashSet<Profile>(Arrays.asList(container.getProfiles()));
          profiles.add(profile);
          container.setProfiles(profiles.toArray(new Profile[profiles.size()]));
          System.out.println("Profile successfully assigned to " + containerName);
        }
      }
 catch (      Exception e) {
        System.out.println("Failed to assign profile to " + containerName + ": "+ e.getMessage());
      }
    }
  }
  if (create != null) {
    CreateContainerMetadata[] metadatas;
    String[] createContainers=create.split(",");
    for (    String container : createContainers) {
      String type=null;
      String parent=fabricService.getCurrentContainerName();
      String jmxUser=username != null ? username : ShellUtils.retrieveFabricUser(session);
      String jmxPassword=password != null ? password : ShellUtils.retrieveFabricUserPassword(session);
      CreateContainerChildOptions args=CreateContainerOptionsBuilder.child().name(container).parent(parent).number(1).ensembleServer(false).proxyUri(fabricService.getMavenRepoURI()).zookeeperUrl(fabricService.getZookeeperUrl()).zookeeperPassword(fabricService.getZookeeperPassword()).jvmOpts(jvmOpts).jmxUser(jmxUser).jmxPassword(jmxPassword);
      try {
        metadatas=fabricService.createContainers(args);
        ShellUtils.storeFabricCredentials(session,jmxUser,jmxPassword);
      }
 catch (      FabricAuthenticationException fae) {
        promptForJmxCredentialsIfNeeded();
        args.setJmxUser(username);
        args.setJmxPassword(password);
        metadatas=fabricService.createContainers(args);
        ShellUtils.storeFabricCredentials(session,username,password);
      }
      for (      CreateContainerMetadata metadata : metadatas) {
        if (metadata.isSuccess()) {
          Container child=metadata.getContainer();
          child.setProfiles(new Profile[]{profile});
          System.out.println("Successfully created container " + metadata.getContainerName());
        }
 else {
          System.out.println("Failed to create container " + metadata.getContainerName() + ": "+ metadata.getFailure().getMessage());
        }
      }
    }
  }
  return null;
}
