{
  String[] repositories=connection.getConfiguration().getMavenRepositories();
  if (repositories != null) {
    resolver.setRepositories(repositories);
  }
  File fileJar=connection.getJarFile();
  DependencyTreeResult result=resolver.collectDependenciesForJar(fileJar,offline);
  this.rootTree=result.getTree();
  String sharedFilterText=getManfiestProperty(ServiceConstants.INSTR_FAB_PROVIDED_DEPENDENCY);
  String requireBundleFilterText=getManfiestProperty(ServiceConstants.INSTR_FAB_DEPENDENCY_REQUIRE_BUNDLE);
  String excludeFilterText=getManfiestProperty(ServiceConstants.INSTR_FAB_EXCLUDE_DEPENDENCY);
  String optionalDependencyText=getManfiestProperty(ServiceConstants.INSTR_FAB_OPTIONAL_DEPENDENCY);
  sharedFilter=DependencyTreeFilters.parseShareFilter(sharedFilterText);
  requireBundleFilter=DependencyTreeFilters.parseImportPackageFilter(requireBundleFilterText);
  excludePackageFilter=DependencyTreeFilters.parseExcludeFilter(excludeFilterText,optionalDependencyText);
  bundleClassPath.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_BUNDLE_CLASSPATH),","));
  requireBundles.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_REQUIRE_BUNDLE),","));
  if (processImportPackages) {
    importPackages.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_IMPORT_PACKAGE),","));
  }
  String name=getManfiestProperty(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME);
  if (name.length() <= 0) {
    name=rootTree.getBundleId();
    instructions.setProperty(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME,name);
  }
  addDependencies(rootTree);
  String extensionPropertyName=getManfiestProperty(ServiceConstants.INSTR_FAB_EXTENSION_VARIABLE);
  if (Strings.notEmpty(extensionPropertyName)) {
    resolveExtensions(extensionPropertyName,rootTree);
  }
  for (  DependencyTree dependencyTree : sharedDependencies) {
    if (requireBundleFilter.matches(dependencyTree)) {
      String bundleId=dependencyTree.getBundleId();
      requireBundles.add(bundleId);
    }
 else {
      if (processImportPackages) {
        String text=dependencyTree.getManfiestEntry(ServiceConstants.INSTR_EXPORT_PACKAGE);
        if (text != null && text.length() > 0) {
          List<String> list=new ArrayList<String>();
          list.addAll(Strings.splitAsList(text,","));
          importPackages.addAll(list);
        }
      }
    }
  }
  for (  DependencyTree dependencyTree : nonSharedDependencies) {
    if (dependencyTree.isValidLibrary()) {
      String url=dependencyTree.getUrl();
      if (url != null) {
        String path=dependencyTree.getGroupId() + "." + dependencyTree.getArtifactId()+ ".jar";
        if (!bundleClassPath.contains(path)) {
          File file=new File(url);
          if (file.exists()) {
            embeddedResources.put(path,file);
          }
 else {
            embeddedResources.put(path,new URL(url));
          }
          if (bundleClassPath.isEmpty()) {
            bundleClassPath.add(".");
          }
          bundleClassPath.add(path);
        }
      }
    }
  }
  LOG.debug("resolved: bundleClassPath: " + Strings.join(bundleClassPath,"\t\n"));
  LOG.debug("resolved: requireBundles: " + Strings.join(requireBundles,"\t\n"));
  if (processImportPackages) {
    LOG.debug("resolved: importPackages: " + Strings.join(importPackages,"\t\n"));
  }
  instructions.setProperty(ServiceConstants.INSTR_BUNDLE_CLASSPATH,Strings.join(bundleClassPath,","));
  instructions.setProperty(ServiceConstants.INSTR_REQUIRE_BUNDLE,Strings.join(requireBundles,","));
  if (processImportPackages) {
    instructions.setProperty(ServiceConstants.INSTR_IMPORT_PACKAGE,Strings.join(importPackages,","));
  }
}
