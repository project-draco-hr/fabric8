{
  String containerId=options.getName();
  Map<String,Object> exposedPorts=new HashMap<String,Object>();
  Map<String,Integer> internalPorts=new HashMap<String,Integer>();
  Map<String,Integer> externalPorts=new HashMap<String,Integer>();
  Set<Integer> usedPortByHost=fabricService.getPortService().findUsedPortByHost(fabricService.getCurrentContainer());
  Map<String,String> emptyMap=new HashMap<String,String>();
  Set<String> profileIds=options.getProfiles();
  String versionId=options.getVersion();
  Map<String,String> ports=Profiles.getOverlayConfiguration(fabricService,profileIds,versionId,Constants.PORTS_PID);
  SortedMap<Integer,String> sortedInternalPorts=new TreeMap<Integer,String>();
  for (  Map.Entry<String,String> portEntry : ports.entrySet()) {
    String portName=portEntry.getKey();
    String portText=portEntry.getValue();
    if (portText != null && !io.fabric8.common.util.Strings.isNullOrBlank(portText)) {
      Integer port=null;
      try {
        port=Integer.parseInt(portText);
      }
 catch (      NumberFormatException e) {
        LOG.warn("Ignoring bad port number for " + portName + " value '"+ portText+ "' in PID: "+ Constants.PORTS_PID);
      }
      if (port != null) {
        sortedInternalPorts.put(port,portName);
        internalPorts.put(portName,port);
        exposedPorts.put(portText + "/tcp",emptyMap);
      }
 else {
        LOG.info("No port for " + portName);
      }
    }
  }
  String jolokiaUrl=null;
  Container currentContainer=fabricService.getCurrentContainer();
  String listenHost=currentContainer.getLocalIp();
  if (Strings.isNullOrBlank(listenHost)) {
    listenHost=currentContainer.getLocalHostname();
  }
  if (Strings.isNullOrBlank(listenHost)) {
    listenHost="localhost";
  }
  if (!environmentVariables.containsKey(EnvironmentVariables.FABRIC8_LISTEN_ADDRESS)) {
    environmentVariables.put(EnvironmentVariables.FABRIC8_LISTEN_ADDRESS,listenHost);
  }
  Set<String> disableDynamicPorts=new HashSet<String>();
  String[] dynamicPortArray=processConfig.getDisableDynamicPorts();
  if (dynamicPortArray != null) {
    disableDynamicPorts.addAll(Arrays.asList(dynamicPortArray));
  }
  for (  Map.Entry<Integer,String> entry : sortedInternalPorts.entrySet()) {
    Integer port=entry.getKey();
    String portName=entry.getValue();
    int externalPort=port;
    environmentVariables.put("FABRIC8_" + portName + "_PORT","" + port);
    String proxyPortEnvName="FABRIC8_" + portName + "_PROXY_PORT";
    Integer currentProxyPort=null;
    String currentExternalPortText=environmentVariables.get(proxyPortEnvName);
    if (currentExternalPortText != null) {
      try {
        currentProxyPort=Integer.parseInt(currentExternalPortText);
      }
 catch (      NumberFormatException e) {
        LOG.warn("Could not parse env var " + proxyPortEnvName + " of "+ currentExternalPortText+ " as a number: "+ e,e);
      }
    }
    if (currentProxyPort != null) {
      externalPort=currentProxyPort;
    }
 else {
      if (!disableDynamicPorts.contains(portName)) {
        externalPort=owner.createExternalPort(containerId,portName,usedPortByHost,options);
      }
      environmentVariables.put(proxyPortEnvName,"" + externalPort);
    }
    externalPorts.put(portName,externalPort);
    if (portName.equals(JolokiaAgentHelper.JOLOKIA_PORT_NAME)) {
      jolokiaUrl="http://" + listenHost + ":"+ externalPort+ "/jolokia/";
      LOG.info("Found Jolokia URL: " + jolokiaUrl);
    }
  }
  if (processConfig.isCreateLocalContainerAddress()) {
    environmentVariables.put(EnvironmentVariables.FABRIC8_LOCAL_CONTAINER_ADDRESS,owner.createContainerLocalAddress(containerId,options));
  }
  if (jolokiaUrl != null) {
    registerJolokiaUrl(container,jolokiaUrl);
  }
}
