{
  DependencyDTO rootDependency=requirements.getRootDependency();
  ProfileService profileService=fabricService.get().adapt(ProfileService.class);
  if (rootDependency != null) {
    LOG.info("Got root: " + rootDependency);
    List<String> parentIds=profile.getParentIds();
    Profile overlay=profileService.getOverlayProfile(profile);
    String bundleUrl=rootDependency.toBundleUrlWithType();
    LOG.info("Using resolver to add extra features and bundles on " + bundleUrl);
    List<String> features=new ArrayList<String>();
    List<String> bundles=new ArrayList<String>();
    List<String> optionals=new ArrayList<String>();
    if (requirements.getFeatures() != null) {
      features.addAll(requirements.getFeatures());
    }
    if (requirements.getBundles() != null) {
      bundles.addAll(requirements.getBundles());
    }
    bundles.add(bundleUrl);
    LOG.info("Adding bundle: " + bundleUrl);
    boolean isKarafContainer=parentIds.contains("karaf") || parentIds.contains("containers-karaf");
    boolean addBundleDependencies=Objects.equal("bundle",rootDependency.getType()) || isKarafContainer;
    if (addBundleDependencies && requirements.isUseResolver()) {
      List<Feature> availableFeatures=new ArrayList<Feature>();
      addAvailableFeaturesFromProfile(availableFeatures,fabric,overlay);
      Set<String> currentBundleLocations=new HashSet<>();
      currentBundleLocations.addAll(bundles);
      DownloadManager downloadManager=DownloadManagers.createDownloadManager(fabric,executorService);
      Set<Feature> currentFeatures=AgentUtils.getFeatures(fabric,downloadManager,overlay);
      addBundlesFromProfile(currentBundleLocations,overlay);
      List<String> parentProfileIds=requirements.getParentProfiles();
      if (parentProfileIds != null) {
        for (        String parentProfileId : parentProfileIds) {
          Profile parentProfile=profileService.getProfile(profile.getVersion(),parentProfileId);
          Profile parentOverlay=profileService.getOverlayProfile(parentProfile);
          Set<Feature> parentFeatures=AgentUtils.getFeatures(fabric,downloadManager,parentOverlay);
          currentFeatures.addAll(parentFeatures);
          addAvailableFeaturesFromProfile(availableFeatures,fabric,parentOverlay);
          addBundlesFromProfile(currentBundleLocations,parentOverlay);
        }
      }
      for (      DependencyDTO dependency : rootDependency.getChildren()) {
        if ("test".equals(dependency.getScope()) || "provided".equals(dependency.getScope())) {
          continue;
        }
        if ("jar".equals(dependency.getType())) {
          String match=getAllServiceMixBundles().get(dependency.getGroupId() + ":" + dependency.getArtifactId()+ ":"+ dependency.getVersion());
          if (match != null) {
            LOG.info("Replacing artifact " + dependency + " with servicemix bundle "+ match);
            String[] parts=match.split(":");
            dependency.setGroupId(parts[0]);
            dependency.setArtifactId(parts[1]);
            dependency.setVersion(parts[2]);
            dependency.setType("bundle");
          }
        }
        String prefix=dependency.toBundleUrlWithoutVersion();
        Feature feature=findFeatureWithBundleLocationPrefix(currentFeatures,prefix);
        if (feature != null) {
          LOG.info("Feature is already is in the profile " + feature.getId() + " for "+ dependency.toBundleUrl());
        }
 else {
          feature=findFeatureWithBundleLocationPrefix(availableFeatures,prefix);
          if (feature != null) {
            String name=feature.getName();
            if (features.contains(name)) {
              LOG.info("Feature is already added " + name + " for "+ dependency.toBundleUrl());
            }
 else {
              LOG.info("Found a matching feature for bundle " + dependency.toBundleUrl() + ": "+ feature.getId());
              features.add(name);
            }
          }
 else {
            String bundleUrlWithType=dependency.toBundleUrlWithType();
            String foundBundleUri=findBundleUri(currentBundleLocations,prefix);
            if (foundBundleUri != null) {
              LOG.info("Bundle already included " + foundBundleUri + " for "+ bundleUrlWithType);
            }
 else {
              boolean ignore=false;
              String bundleWithoutMvnPrefix=getMavenCoords(bundleUrlWithType);
              for (              String ignoreBundlePrefix : RESOLVER_IGNORE_BUNDLE_PREFIXES) {
                if (bundleWithoutMvnPrefix.startsWith(ignoreBundlePrefix)) {
                  ignore=true;
                  break;
                }
              }
              if (ignore) {
                LOG.info("Ignoring bundle: " + bundleUrlWithType);
              }
 else {
                boolean optional=dependency.isOptional();
                LOG.info("Adding " + (optional ? "optional " : "") + " bundle: "+ bundleUrlWithType);
                if (optional) {
                  optionals.add(bundleUrlWithType);
                }
 else {
                  bundles.add(bundleUrlWithType);
                }
              }
            }
          }
        }
      }
      builder.setOptionals(optionals).setFeatures(features);
    }
    builder.setBundles(bundles);
  }
  profile=profileService.updateProfile(builder.getProfile());
  Integer minimumInstances=requirements.getMinimumInstances();
  if (minimumInstances != null) {
    FabricRequirements fabricRequirements=fabricService.get().getRequirements();
    ProfileRequirements profileRequirements=fabricRequirements.getOrCreateProfileRequirement(profile.getId());
    profileRequirements.setMinimumInstances(minimumInstances);
    fabricService.get().setRequirements(fabricRequirements);
  }
  String profileUrl=findHawtioUrl(fabric);
  if (profileUrl == null) {
    profileUrl="/";
  }
  if (!profileUrl.endsWith("/")) {
    profileUrl+="/";
  }
  String profilePath=Profiles.convertProfileIdToPath(profile.getId());
  profileUrl+="index.html#/wiki/branch/" + profile.getVersion() + "/view/fabric/profiles/"+ profilePath;
  return new DeployResults(profile,profileUrl);
}
