{
  List<String> parentProfiles=Containers.getParentProfileIds(profile);
  List<String> bundles=Lists.mutableList(profile.getBundles());
  List<String> features=Lists.mutableList(profile.getFeatures());
  List<String> repositories=Lists.mutableList(profile.getRepositories());
  if (oldRequirements != null) {
    removeAll(parentProfiles,oldRequirements.getParentProfiles());
    removeAll(bundles,oldRequirements.getBundles());
    removeAll(features,oldRequirements.getFeatures());
    removeAll(repositories,oldRequirements.getFeatureRepositories());
  }
  addAll(parentProfiles,requirements.getParentProfiles());
  addAll(bundles,requirements.getBundles());
  addAll(features,requirements.getFeatures());
  addAll(repositories,requirements.getFeatureRepositories());
  setParentProfileIds(builder,version,profile,parentProfiles);
  builder.setBundles(bundles);
  builder.setFeatures(features);
  builder.setRepositories(repositories);
  String webContextPath=requirements.getWebContextPath();
  if (!Strings.isEmpty(webContextPath)) {
    Map<String,String> contextPathConfig=new HashMap<>();
    Map<String,String> oldValue=profile.getConfiguration(ChildConstants.WEB_CONTEXT_PATHS_PID);
    if (oldValue != null) {
      contextPathConfig.putAll(oldValue);
    }
    String key=requirements.getGroupId() + "/" + requirements.getArtifactId();
    String current=contextPathConfig.get(key);
    if (!Objects.equal(current,webContextPath)) {
      contextPathConfig.put(key,webContextPath);
      builder.addConfiguration(ChildConstants.WEB_CONTEXT_PATHS_PID,contextPathConfig);
    }
  }
  String description=requirements.getDescription();
  if (!Strings.isEmpty(description)) {
    String fileName="Summary.md";
    byte[] data=profile.getFileConfiguration(fileName);
    if (data == null || data.length == 0 || new String(data).trim().length() == 0) {
      builder.addFileConfiguration(fileName,description.getBytes());
    }
  }
}
