{
  DependencyDTO rootDependency=requirements.getRootDependency();
  List<Feature> allFeatures=new ArrayList<Feature>();
  for (  String repoUri : overlay.getRepositories()) {
    RepositoryImpl repo=new RepositoryImpl(URI.create(repoUri));
    repo.load();
    allFeatures.addAll(Arrays.asList(repo.getFeatures()));
  }
  if (rootDependency != null) {
    LOG.info("Got root: " + rootDependency);
    String bundleUrl=rootDependency.toBundleUrlWithType();
    List<String> features=new ArrayList<String>();
    List<String> bundles=new ArrayList<String>();
    List<String> optionals=new ArrayList<String>();
    if (requirements.getFeatures() != null) {
      features.addAll(requirements.getFeatures());
    }
    if (requirements.getBundles() != null) {
      bundles.addAll(requirements.getBundles());
    }
    bundles.add(bundleUrl);
    LOG.info("Adding bundle: " + bundleUrl);
    for (    DependencyDTO dependency : rootDependency.getChildren()) {
      if ("test".equals(dependency.getScope()) || "provided".equals(dependency.getScope())) {
        continue;
      }
      if ("jar".equals(dependency.getType())) {
        String match=getAllServiceMixBundles().get(dependency.getGroupId() + ":" + dependency.getArtifactId()+ ":"+ dependency.getVersion());
        if (match != null) {
          LOG.info("Replacing artifact " + dependency + " with servicemix bundle "+ match);
          String[] parts=match.split(":");
          dependency.setGroupId(parts[0]);
          dependency.setArtifactId(parts[1]);
          dependency.setVersion(parts[2]);
          dependency.setType("bundle");
        }
      }
      String prefix=dependency.toBundleUrlWithoutVersion();
      List<Feature> matching=new ArrayList<>();
      for (      Feature feature : allFeatures) {
        for (        BundleInfo bi : feature.getBundles()) {
          if (!bi.isDependency() && bi.getLocation().startsWith(prefix)) {
            matching.add(feature);
            break;
          }
        }
      }
      if (matching.size() == 1) {
        LOG.info("Found a matching feature for bundle " + dependency.toBundleUrl() + ": "+ matching.get(0).getId());
        features.add(matching.get(0).getName());
      }
 else {
        LOG.info("Adding optional bundle: " + dependency.toBundleUrlWithType());
        optionals.add(dependency.toBundleUrlWithType());
      }
    }
    ProfileBuilder builder=ProfileBuilder.Factory.createFrom(profile);
    builder.setBundles(bundles).setOptionals(optionals).setFeatures(features);
    ProfileService profileService=fabricService.get().adapt(ProfileService.class);
    profile=profileService.updateProfile(builder.getProfile());
  }
  String profileUrl=findHawtioUrl(fabric);
  if (profileUrl == null) {
    profileUrl="/";
  }
  if (!profileUrl.endsWith("/")) {
    profileUrl+="/";
  }
  String profilePath=Profiles.convertProfileIdToPath(profile.getId());
  profileUrl+="index.html#/wiki/branch/" + profile.getVersion() + "/view/fabric/profiles/"+ profilePath;
  return new DeployResults(profile,profileUrl);
}
