{
  LOGGER.trace("onEvents",nodeEvents);
  try {
    if (!tracking) {
      String version=zooKeeper.getStringData(ZkPath.CONFIG_CONTAINER.getPath(name));
      if (zooKeeper.exists(ZkPath.CONTAINER_IP.getPath(name)) != null) {
        String resolutionPointer=zooKeeper.getStringData(ZkPath.CONTAINER_IP.getPath(name));
        resolutionPolicy=zooKeeper.getStringData(ZkPath.CONTAINER_RESOLVER.getPath(name));
        if (resolutionPointer == null || !resolutionPointer.contains(resolutionPolicy)) {
          zooKeeper.setData(ZkPath.CONTAINER_IP.getPath(name),"${zk:" + name + "/"+ resolutionPolicy+ "}");
        }
      }
      if (!this.version.equals(version)) {
        this.version=version;
        node=ZkPath.CONFIG_VERSIONS_CONTAINER.getPath(version,name);
        track(node);
      }
      final Set<String> pids=getPids();
      Map<String,Hashtable> pidProperties=load(pids);
      List<Configuration> configs=asList(getConfigAdmin().listConfigurations("(" + FABRIC_ZOOKEEPER_PID + "=*)"));
      for (      String pid : pids) {
        Hashtable c=pidProperties.get(pid);
        String p[]=parsePid(pid);
        Configuration config=getConfiguration(pid,p[0],p[1]);
        configs.remove(config);
        Dictionary props=config.getProperties();
        Hashtable old=props != null ? new Hashtable() : null;
        if (old != null) {
          for (Enumeration e=props.keys(); e.hasMoreElements(); ) {
            Object key=e.nextElement();
            Object val=props.get(key);
            old.put(key,val);
          }
          old.remove(FABRIC_ZOOKEEPER_PID);
          old.remove(org.osgi.framework.Constants.SERVICE_PID);
          old.remove(ConfigurationAdmin.SERVICE_FACTORYPID);
        }
        if (!c.equals(old)) {
          LOGGER.info("Updating configuration {}",config.getPid());
          c.put(FABRIC_ZOOKEEPER_PID,pid);
          if (config.getBundleLocation() != null) {
            config.setBundleLocation(null);
          }
          config.update(c);
        }
 else {
          LOGGER.info("Ignoring configuration {} (no changes)",config.getPid());
        }
      }
      for (      Configuration config : configs) {
        LOGGER.info("Deleting configuration {}",config.getPid());
        config.delete();
      }
    }
    LOGGER.trace("onEvents done");
  }
 catch (  Exception e) {
    LOGGER.warn("Exception when tracking configurations. This exception will be ignored.",e);
  }
}
