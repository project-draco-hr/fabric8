{
  String containerId=options.getName();
  Map<String,String> environmentVariables=ChildContainers.getEnvironmentVariables(fabricService,options);
  Set<Map.Entry<String,String>> initialEntries=initialEnvironmentVariables.entrySet();
  for (  Map.Entry<String,String> entry : initialEntries) {
    String key=entry.getKey();
    String value=entry.getValue();
    if (!environmentVariables.containsKey(key)) {
      environmentVariables.put(key,value);
    }
  }
  ProcessContainerConfig processConfig=createProcessContainerConfig(options);
  if (container != null) {
    registerPorts(options,processConfig,container,environmentVariables);
  }
  JolokiaAgentHelper.substituteEnvironmentVariableExpressions(environmentVariables,environmentVariables);
  JolokiaAgentHelper.substituteEnvironmentVariableExpressions(environmentVariables,System.getenv());
  publishZooKeeperValues(options,processConfig,container,environmentVariables);
  Installation installation=null;
  try {
    if (ChildContainers.isJavaContainer(fabricService,options)) {
      LOG.debug("Java container detected - installing jar. Configuration: ",options);
      JavaContainerConfig javaConfig=createJavaContainerConfig(options);
      InstallOptions parameters=createJavaInstallOptions(container,metadata,options,javaConfig,environmentVariables);
      String layout=javaConfig.getOverlayFolder();
      InstallTask postInstall=createCommonPostInstal(options,environmentVariables,layout);
      Objects.notNull(parameters,"JavaInstall parameters");
      installation=procManager.installJar(parameters,postInstall);
    }
 else {
      LOG.debug("Process container detected - installing process. Configuration: ",options);
      InstallOptions parameters=createProcessInstallOptions(container,metadata,options,processConfig,environmentVariables);
      InstallTask postInstall=createProcessPostInstall(container,options,processConfig,environmentVariables);
      Objects.notNull(parameters,"process parameters");
      installation=procManager.install(parameters,postInstall);
    }
  }
 catch (  Exception e) {
    handleException("Creating container " + containerId,e);
  }
  LOG.info("Creating process container with environment vars: " + environmentVariables);
  String defaultHost=fabricService.getCurrentContainer().getLocalHostname();
  if (Strings.isNullOrBlank(defaultHost)) {
    defaultHost="localhost";
  }
  String jolokiaUrl=JolokiaAgentHelper.findJolokiaUrlFromEnvironmentVariables(environmentVariables,defaultHost);
  if (!Strings.isNullOrBlank(jolokiaUrl)) {
    registerJolokiaUrl(container,jolokiaUrl);
  }
  return installation;
}
