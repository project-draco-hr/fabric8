{
  Set<String> profileIds=options.getProfiles();
  String versionId=options.getVersion();
  List<Profile> profiles=Profiles.getProfiles(fabricService,profileIds,versionId);
  String layout=configObject.getOverlayFolder();
  InstallTask answer=createCommonPostInstal(options,environmentVariables,layout);
  if (!configObject.isInternalAgent()) {
    Map<String,File> javaArtifacts=JavaContainers.getJavaContainerArtifactsFiles(fabricService,profiles,downloadExecutor);
    if (!javaArtifacts.isEmpty()) {
      Map<String,String> contextPathConfiguration=Profiles.getOverlayConfiguration(fabricService,profileIds,versionId,ChildConstants.WEB_CONTEXT_PATHS_PID);
      Map<String,String> locationToContextPathMap=new HashMap<String,String>();
      Set<String> locations=javaArtifacts.keySet();
      for (      String location : locations) {
        Parser parser=null;
        try {
          parser=Parser.parsePathWithSchemePrefix(location);
        }
 catch (        MalformedURLException e) {
        }
        if (parser != null) {
          String key=parser.getGroup() + "/" + parser.getArtifact();
          String value=contextPathConfiguration.get(key);
          if (value != null) {
            locationToContextPathMap.put(location,value);
          }
        }
      }
      Set<Map.Entry<String,String>> contextPathEntries=contextPathConfiguration.entrySet();
      for (      Map.Entry<String,String> contextPathEntry : contextPathEntries) {
        String groupIdAndArtifactId=contextPathEntry.getKey();
        String contextPath=contextPathEntry.getValue();
        if (!locationToContextPathMap.containsValue(contextPath)) {
          LOG.warn("Properties file " + ChildConstants.WEB_CONTEXT_PATHS_PID + " for profile(s) "+ profileIds+ " has unmatched contextPath mapping to "+ contextPath+ " for group id and artifact id key "+ groupIdAndArtifactId+ " when has matched values: "+ locationToContextPathMap.values());
        }
      }
      answer=CompositeTask.combine(answer,new InstallDeploymentsTask(javaArtifacts,locationToContextPathMap));
      setProvisionList(container,javaArtifacts);
    }
  }
  return answer;
}
