{
  try {
    String image=config.getFabricDockerImage();
    String containerName="fabric1";
    String dockerHost="localhost";
    ContainerConfig containerConfig=new ContainerConfig();
    containerConfig.setImage(image);
    containerConfig.setAttachStdout(true);
    containerConfig.setAttachStderr(true);
    containerConfig.setTty(true);
    containerConfig.setEntrypoint(null);
    Map<String,Object> exposedPorts=new HashMap<>();
    Map<String,String> emptyMap=new HashMap<>();
    int[] rootContainerExposedPorts=config.getRootContainerExposedPorts();
    for (    int exposedPort : rootContainerExposedPorts) {
      String portText="" + exposedPort + "/tcp";
      exposedPorts.put(portText,emptyMap);
    }
    containerConfig.setExposedPorts(exposedPorts);
    System.out.println("Exposing ports: " + exposedPorts);
    Map<String,String> envVars=createChildEnvironmentVariables();
    envVars.put(EnvironmentVariables.FABRIC8_GLOBAL_RESOLVER,"manualip");
    envVars.put(EnvironmentVariables.FABRIC8_MANUALIP,dockerHost);
    envVars.put(EnvironmentVariables.RUNTIME_ID,containerName);
    envVars.put(EnvironmentVariables.KARAF_NAME,containerName);
    List<String> envList=Dockers.toEnvList(envVars);
    containerConfig.setEnv(envList);
    System.out.println("Creating docker container name " + containerName + " with config: "+ containerConfig);
    ContainerCreateStatus status=docker.containerCreate(containerConfig,containerName);
    rootDockerContainerId=status.getId();
    String[] warnings=status.getWarnings();
    if (warnings != null) {
      for (      String warning : warnings) {
        System.out.println("WARNING: " + warning);
      }
    }
    System.out.println("Created docker container id " + rootDockerContainerId);
    assertTrue("Should not have a blank docker container id for fabric8 container " + containerName,Strings.isNotBlank(rootDockerContainerId));
    HostConfig hostConfig=new HostConfig();
    hostConfig.setPublishAllPorts(true);
    System.out.println("Starting docker container id " + rootDockerContainerId);
    docker.containerStart(rootDockerContainerId,hostConfig);
    ContainerInfo containerInfo=docker.containerInspect(rootDockerContainerId);
    System.out.println("Inspected container got: " + containerInfo);
    NetworkSettings networkSettings=containerInfo.getNetworkSettings();
    assertNotNull("No NetworkSettings available for docker container: " + rootDockerContainerId,networkSettings);
    Map<String,Object> ports=networkSettings.getPorts();
    String webPortText="8181/tcp";
    Object bindingObject=ports.get(webPortText);
    if (bindingObject instanceof List) {
      List<Map<String,String>> bindingList=(List<Map<String,String>>)bindingObject;
      assertTrue("Binding list for port 8181/tcp is empty for docker container: " + rootDockerContainerId,bindingList.size() > 0);
      assertNotNull("No HostConfig binding for 8181/tcp for docker container: " + rootDockerContainerId,bindingList);
      Map<String,String> binding=bindingList.get(0);
      String bindingText=assertMandatoryEntry(binding,"HostPort","Docker container " + rootDockerContainerId);
      assertTrue("Should have non blank bindingText for 8181/tcp",Strings.isNotBlank(bindingText));
      String jolokiaUrl="http://" + dockerHost + ":"+ bindingText+ "/jolokia";
      System.out.println("Got jolokia URL: " + jolokiaUrl);
      return new JolokiaFabricController(jolokiaUrl);
    }
 else {
      fail("Could not find binding for port " + webPortText + " in ports + "+ ports);
      return null;
    }
  }
 catch (  Exception e) {
    String message=Dockers.dockerErrorMessage(e);
    if (Strings.isNotBlank(message)) {
      throw new Exception("Docker failure: " + message + ". "+ e,e);
    }
 else {
      throw e;
    }
  }
}
