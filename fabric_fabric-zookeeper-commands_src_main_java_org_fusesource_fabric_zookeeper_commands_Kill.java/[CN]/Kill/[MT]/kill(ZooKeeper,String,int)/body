{
  long startTicks=System.currentTimeMillis();
  final CountDownLatch sessionLostLatch=new CountDownLatch(1);
  Watcher sessionLostWatch=new Watcher(){
    @Override public void process(    WatchedEvent event){
      sessionLostLatch.countDown();
    }
  }
;
  client.exists("/___CURATOR_KILL_SESSION___" + System.nanoTime(),sessionLostWatch);
  final CountDownLatch connectionLatch=new CountDownLatch(1);
  Watcher connectionWatcher=new Watcher(){
    @Override public void process(    WatchedEvent event){
      if (event.getState() == Event.KeeperState.SyncConnected) {
        connectionLatch.countDown();
      }
    }
  }
;
  ZooKeeper zk=new ZooKeeper(connectString,maxMs,connectionWatcher,client.getSessionId(),client.getSessionPasswd());
  try {
    if (!connectionLatch.await(maxMs,TimeUnit.MILLISECONDS)) {
      throw new Exception("KillSession could not establish duplicate session");
    }
    try {
      zk.close();
    }
  finally {
      zk=null;
    }
    while (client.getState().isConnected() && !sessionLostLatch.await(100,TimeUnit.MILLISECONDS)) {
      long elapsed=System.currentTimeMillis() - startTicks;
      if (elapsed > maxMs) {
        throw new Exception("KillSession timed out waiting for session to expire");
      }
    }
  }
  finally {
    if (zk != null) {
      zk.close();
    }
  }
}
