{
  assertValid();
  String containerId=options.getName();
  ContainerConfig containerConfig=createContainerConfig(options);
  Set<String> profiles=options.getProfiles();
  String versionId=options.getVersion();
  FabricService service=fabricService.get();
  Map<String,String> configOverlay=new HashMap<String,String>();
  Map<String,String> envVarsOverlay=new HashMap<String,String>();
  Map<String,String> ports=null;
  Map<String,String> dockerProviderConfig=new HashMap<String,String>();
  Version version=null;
  if (profiles != null && versionId != null) {
    version=service.getVersion(versionId);
    if (version != null) {
      for (      String profileId : profiles) {
        Profile profile=version.getProfile(profileId);
        if (profile != null) {
          Profile overlay=profile.getOverlay();
          Map<String,String> dockerConfig=overlay.getConfiguration(DockerConstants.DOCKER_PROVIDER_PID);
          if (dockerConfig != null) {
            configOverlay.putAll(dockerConfig);
          }
          Map<String,String> envVars=overlay.getConfiguration(DockerConstants.ENVIRONMENT_VARIABLES_PID);
          if (envVars != null) {
            envVarsOverlay.putAll(envVars);
          }
          if (ports == null || ports.size() == 0) {
            ports=overlay.getConfiguration(DockerConstants.PORTS_PID);
          }
        }
      }
      if (version.hasProfile(DockerConstants.DOCKER_PROVIDER_PROFILE_ID)) {
        Profile profile=version.getProfile(DockerConstants.DOCKER_PROVIDER_PROFILE_ID);
        if (profile != null) {
          Map<String,String> dockerConfig=profile.getOverlay().getConfiguration(DockerConstants.DOCKER_PROVIDER_PID);
          if (dockerConfig != null) {
            dockerProviderConfig.putAll(dockerConfig);
          }
        }
      }
    }
  }
  if (ports == null || ports.size() == 0) {
    if (version == null) {
      version=service.getDefaultVersion();
    }
    Profile dockerProfile=version.getProfile("docker");
    ports=dockerProfile.getConfiguration(DockerConstants.PORTS_PID);
    if (ports == null || ports.size() == 0) {
      LOG.warn("Could not a docker ports configuration for: " + DockerConstants.PORTS_PID);
      ports=new HashMap<String,String>();
    }
  }
  LOG.info("Got port configuration: " + ports);
  String image=containerConfig.getImage();
  if (Strings.isEmpty(image)) {
    image=configOverlay.get(DockerConstants.PROPERTIES.IMAGE);
    if (Strings.isEmpty(image)) {
      image=System.getenv(DockerConstants.ENV_VARS.FABRIC8_DOCKER_DEFAULT_IMAGE);
    }
    if (Strings.isEmpty(image)) {
      image=dockerProviderConfig.get(DockerConstants.PROPERTIES.IMAGE);
    }
    if (Strings.isEmpty(image)) {
      image=DockerConstants.DEFAULT_IMAGE;
    }
    containerConfig.setImage(image);
  }
  String[] cmd=containerConfig.getCmd();
  if (cmd == null || cmd.length == 0) {
    String value=configOverlay.get(DockerConstants.PROPERTIES.CMD);
    if (Strings.isEmpty(value)) {
      cmd=null;
    }
 else {
      cmd=new String[]{value};
    }
    containerConfig.setCmd(cmd);
  }
  String zookeeperUrl=service.getZookeeperUrl();
  String zookeeperPassword=service.getZookeeperPassword();
  if (zookeeperPassword != null) {
    zookeeperPassword=PasswordEncoder.encode(zookeeperPassword);
  }
  String localIp=service.getCurrentContainer().getLocalIp();
  if (!Strings.isEmpty(localIp)) {
    int idx=zookeeperUrl.lastIndexOf(':');
    if (idx > 0) {
      localIp+=zookeeperUrl.substring(idx);
    }
    zookeeperUrl=localIp;
  }
  envVarsOverlay.put(DockerConstants.ENV_VARS.KARAF_NAME,options.getName());
  if (!options.isEnsembleServer()) {
    if (envVarsOverlay.get(DockerConstants.ENV_VARS.ZOOKEEPER_URL) == null) {
      envVarsOverlay.put(DockerConstants.ENV_VARS.ZOOKEEPER_URL,zookeeperUrl);
    }
    if (envVarsOverlay.get(DockerConstants.ENV_VARS.ZOOKEEPER_PASSWORD) == null) {
      envVarsOverlay.put(DockerConstants.ENV_VARS.ZOOKEEPER_PASSWORD,zookeeperPassword);
    }
    if (envVarsOverlay.get(DockerConstants.ENV_VARS.ZOOKEEPER_PASSWORD_ENCODE) == null) {
      String zkPasswordEncode=System.getProperty("zookeeper.password.encode","true");
      envVarsOverlay.put(DockerConstants.ENV_VARS.ZOOKEEPER_PASSWORD_ENCODE,zkPasswordEncode);
    }
  }
  List<String> env=containerConfig.getEnv();
  if (env == null) {
    env=new ArrayList<String>();
  }
  Set<Map.Entry<String,String>> entries=envVarsOverlay.entrySet();
  for (  Map.Entry<String,String> entry : entries) {
    String key=entry.getKey();
    String value=entry.getValue();
    if (key != null && value != null) {
      env.add(key + "=" + value);
    }
  }
  Map<String,Object> exposedPorts=new HashMap<String,Object>();
  Set<Integer> usedPortByHost=findUsedPortByHostAndDocker();
  Map<String,Integer> internalPorts=options.getInternalPorts();
  Map<String,Integer> externalPorts=options.getExternalPorts();
  Map<String,String> emptyMap=new HashMap<String,String>();
  SortedMap<Integer,String> sortedInternalPorts=new TreeMap<Integer,String>();
  for (  Map.Entry<String,String> portEntry : ports.entrySet()) {
    String portName=portEntry.getKey();
    String portText=portEntry.getValue();
    if (portText != null && !Strings.isEmpty(portText)) {
      Integer port=null;
      try {
        port=Integer.parseInt(portText);
      }
 catch (      NumberFormatException e) {
        LOG.warn("Ignoring bad port number for " + portName + " value '"+ portText+ "' in PID: "+ DockerConstants.PORTS_PID);
      }
      if (port != null) {
        sortedInternalPorts.put(port,portName);
        internalPorts.put(portName,port);
        exposedPorts.put(portText + "/tcp",emptyMap);
      }
 else {
        LOG.info("No port for " + portName);
      }
    }
  }
  for (  Map.Entry<Integer,String> entry : sortedInternalPorts.entrySet()) {
    Integer port=entry.getKey();
    String portName=entry.getValue();
    int externalPort=createExternalPort(containerId,portName,usedPortByHost,options);
    externalPorts.put(portName,externalPort);
    env.add("FABRIC8_" + portName + "_PORT="+ port);
    env.add("FABRIC8_" + portName + "_PROXY_PORT="+ externalPort);
  }
  String dockerHost=dockerFactory.getDockerHost();
  LOG.info("Passing in manual ip: " + dockerHost);
  env.add(DockerConstants.ENV_VARS.FABRIC8_MANUALIP + "=" + dockerHost);
  env.add(DockerConstants.ENV_VARS.FABRIC8_GLOBAL_RESOLVER + "=" + ZkDefs.MANUAL_IP);
  env.add(DockerConstants.ENV_VARS.FABRIC8_FABRIC_ENVIRONMENT + "=" + DockerConstants.SCHEME);
  containerConfig.setExposedPorts(exposedPorts);
  containerConfig.setEnv(env);
  String name=options.getName();
  LOG.info("Creating container on docker: " + getDockerAddress() + " name: "+ name+ " env vars: "+ env);
  LOG.info("Creating container with config: " + containerConfig);
  ContainerCreateStatus status=docker.containerCreate(containerConfig,name);
  LOG.info("Got status: " + status);
  options=options.updateManualIp(dockerHost);
  CreateDockerContainerMetadata metadata=newInstance(containerConfig,status);
  metadata.setContainerName(containerId);
  metadata.setOverridenResolver(ZkDefs.MANUAL_IP);
  metadata.setCreateOptions(options);
  startDockerContainer(status.getId(),options);
  return metadata;
}
