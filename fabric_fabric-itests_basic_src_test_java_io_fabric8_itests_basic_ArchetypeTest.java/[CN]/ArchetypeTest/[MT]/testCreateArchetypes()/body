{
  List<ArchetypeInfo> archetypes=findArchetypes();
  File mavenSettingsFile=getMavenSettingsFile();
  assertFileExists(mavenSettingsFile);
  System.err.println(executeCommand("fabric:create -n"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  Set<Container> containers=new LinkedHashSet<Container>();
  try {
    createContainer(containers,"fabric",fabricProxy);
    FabricService fabricService=fabricProxy.getService();
    String wrongUrl="https://repo.fusesource.com/nexus/content/groups/public/";
    boolean isWrong=true;
    for (int i=0; i < 100; i++) {
      String mavenUploadUrl=fabricService.getMavenRepoUploadURI().toString();
      System.out.println("Maven upload URL: " + mavenUploadUrl);
      isWrong=mavenUploadUrl.equals(wrongUrl);
      if (isWrong) {
        Thread.sleep(500);
      }
 else {
        break;
      }
    }
    assertFalse("maven upload URL should not be: " + wrongUrl,isWrong);
    createContainer(containers,"mq-default",fabricProxy);
    for (    ArchetypeInfo archetype : archetypes) {
      File workDir=new File(System.getProperty("basedir","."),"generated-projects");
      workDir.mkdirs();
      Set<Container> tmpContainers;
      if (stopContainersAfterEachArchetype()) {
        tmpContainers=new LinkedHashSet<Container>();
      }
 else {
        tmpContainers=containers;
      }
      assertGenerateArchetype(archetype,workDir,mavenSettingsFile,tmpContainers,fabricProxy);
      if (stopContainersAfterEachArchetype()) {
        stopAndDestroyContainers(tmpContainers);
      }
    }
    SortedMap<String,String> sorted=new TreeMap<String,String>(System.getenv());
    Set<Map.Entry<String,String>> entries=sorted.entrySet();
    for (    Map.Entry<String,String> entry : entries) {
      System.out.println("   env:  " + entry.getKey() + " = "+ entry.getValue());
    }
    stopAndDestroyContainers(containers);
  }
 catch (  Exception e) {
    LOG.error("Caught: " + e,e);
    throw e;
  }
 finally {
    ContainerBuilder.destroy(containers);
    fabricProxy.close();
  }
}
