{
  MethodData rc=null;
synchronized (method_cache) {
    rc=method_cache.get(method);
  }
  if (rc == null) {
    StringBuilder sb=new StringBuilder();
    sb.append(method.getName());
    sb.append(",");
    Class<?>[] types=method.getParameterTypes();
    for (int i=0; i < types.length; i++) {
      if (i != 0) {
        sb.append(",");
      }
      sb.append(encodeClassName(types[i]));
    }
    Buffer signature=new UTF8Buffer(sb.toString()).buffer();
    SerializationStrategy serializationStrategy=ObjectSerializationStrategy.INSTANCE;
    final InvocationStrategy strategy;
    if (AsyncInvocationStrategy.isAsyncMethod(method)) {
      strategy=AsyncInvocationStrategy.INSTANCE;
    }
 else {
      strategy=BlockingInvocationStrategy.INSTANCE;
    }
    rc=new MethodData(strategy,serializationStrategy,signature);
synchronized (method_cache) {
      method_cache.put(method,rc);
    }
  }
  return rc;
}
