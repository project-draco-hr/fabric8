{
  LOG.info("Request: " + request.method() + " "+ request.uri()+ " from "+ request.remoteAddress());
  if (request.method().equals("PUT")) {
    String contentType=request.headers().get("Content-Type");
    contentType=contentType.toUpperCase();
    if (contentType == null || !contentType.startsWith("APPLICATION/JSON")) {
      request.response().setStatusCode(403);
      request.response().end("Expecting Content-Type of 'application/json'");
      LOG.error("Expecting Content-Type of 'application/json");
      return;
    }
    if (contentType == null || !contentType.endsWith("UTF-8")) {
      request.response().setStatusCode(403);
      request.response().end("Expecting charset of 'UTF-8'");
      request.response().close();
      LOG.error("Expecting charset of 'UTF-8'");
      return;
    }
  }
  request.bodyHandler(new Handler<Buffer>(){
    @Override public void handle(    Buffer event){
      try {
        String body=event.getString(0,event.length());
        String uri=request.uri().substring(1);
        if (uri.contains("?"))         uri=uri.substring(0,uri.indexOf("?"));
        String[] pathSegment=uri.split("/");
        IAsyncResultHandler<Void> voidHandler=new IAsyncResultHandler<Void>(){
          @Override public void handle(          IAsyncResult<Void> result){
            if (result.isError()) {
              Throwable e=result.getError();
              writeError(request,e);
            }
 else {
              request.response().setStatusCode(200);
              request.response().end();
            }
          }
        }
;
        if (uri.startsWith("rest/apimanager/applications")) {
          if (request.method().equals("PUT")) {
            Application application=getObjectMapper().readValue(body,Application.class);
            engine.getRegistry().registerApplication(application,voidHandler);
          }
 else           if (request.method().equals("DELETE")) {
            if (pathSegment.length < 6) {
              throw new UserException("Query Parse Exception , expecting /rest/apimanager/applications/{organizationId}/{applicationId}/{version}");
            }
            Application application=new Application();
            application.setOrganizationId(pathSegment[3]);
            application.setApplicationId(pathSegment[4]);
            application.setVersion(pathSegment[5]);
            engine.getRegistry().unregisterApplication(application,voidHandler);
          }
 else {
            throw new UserException("Method not Supported");
          }
        }
 else         if (uri.startsWith("rest/apimanager/services")) {
          if (request.method().equals("PUT")) {
            Service service=getObjectMapper().readValue(body,Service.class);
            engine.getRegistry().publishService(service,voidHandler);
            LOG.info("Published to Registry " + service.getEndpoint());
          }
 else           if (request.method().equals("DELETE")) {
            if (pathSegment.length < 6)             throw new UserException("Query Parse Exception , " + "expecting /rest/apimanager/applications/{organizationId}/{serviceId}/{version}");
            Service service=new Service();
            service.setOrganizationId(pathSegment[3]);
            service.setServiceId(pathSegment[4]);
            service.setVersion(pathSegment[5]);
            engine.getRegistry().retireService(service,voidHandler);
            LOG.info("Retired " + service.getEndpoint() + ", version "+ service.getVersion());
          }
 else           if (request.method().equals("GET")) {
            if (pathSegment.length < 7)             throw new UserException("Query Parse Exception , " + "expecting /rest/apimanager/applications/{organizationId}/{serviceId}/{version}/endpoint");
            String organizationId=pathSegment[3];
            String serviceId=pathSegment[4];
            String version=pathSegment[5];
            engine.getRegistry().getService(organizationId,serviceId,version,new IAsyncResultHandler<Service>(){
              @Override public void handle(              IAsyncResult<Service> result){
                if (result.isError()) {
                  Throwable e=result.getError();
                  writeError(request,e);
                }
 else {
                  Service service=result.getResult();
                  ServiceEndpoint serviceEndpoint=new ServiceEndpoint();
                  serviceEndpoint.setEndpoint(engine.serviceMapping(service));
                  try {
                    String json=getObjectMapper().writeValueAsString(serviceEndpoint);
                    request.response().headers().set("ContentType","application/json");
                    request.response().headers().set("Content-Length",String.valueOf(json.length()));
                    request.response().write(json);
                    request.response().setStatusCode(200);
                    request.response().end();
                  }
 catch (                  JsonProcessingException e) {
                    writeError(request,e);
                  }
                }
              }
            }
);
          }
 else {
            throw new UserException("Method not Supported");
          }
        }
 else         if (uri.startsWith("rest/apimanager/system/status")) {
          SystemResource systemResource=new SystemResource(engine);
          String json=getObjectMapper().writeValueAsString(systemResource.getStatus());
          request.response().headers().set("ContentType","application/json");
          request.response().headers().set("Content-Length",String.valueOf(json.length()));
          request.response().write(json);
          request.response().setStatusCode(200);
          request.response().end();
        }
 else {
          throw new UserException("No Such Service");
        }
      }
 catch (      UserException e) {
        LOG.error(e.getMessage(),e);
        request.response().setStatusCode(404);
        request.response().setStatusMessage(e.getMessage());
        request.response().end();
      }
catch (      Throwable e) {
        writeError(request,e);
      }
    }
  }
);
}
