{
  assertValid();
  try {
    ServiceLocator.awaitService(BootstrapComplete.class);
    LOGGER.info("Create fabric with: {}",options);
    stopBundles();
    RuntimeProperties runtimeProps=runtimeProperties.get();
    BootstrapConfiguration bootConfig=bootstrapConfiguration.get();
    BundleContext syscontext=bundleContext.getBundle(0).getBundleContext();
    if (options.isClean()) {
      bootConfig=cleanInternal(syscontext,bootConfig,runtimeProps);
    }
    BootstrapCreateHandler createHandler=new BootstrapCreateHandler(bootConfig,runtimeProps);
    createHandler.bootstrapFabric(name,homeDir,options);
    startBundles(options);
    long startTime=System.currentTimeMillis();
    long bootstrapTimeout=options.getBootstrapTimeout();
    ServiceLocator.awaitService(FabricComplete.class,bootstrapTimeout,TimeUnit.MILLISECONDS);
    long timeDiff=System.currentTimeMillis() - startTime;
    createHandler.waitForContainerAlive(name,syscontext,bootstrapTimeout - timeDiff);
    if (options.isWaitForProvision() && options.isAgentEnabled()) {
      long currentTime=System.currentTimeMillis();
      createHandler.waitForSuccessfulDeploymentOf(name,syscontext,bootstrapTimeout - (currentTime - startTime));
    }
  }
 catch (  RuntimeException rte) {
    throw rte;
  }
catch (  Exception ex) {
    throw new FabricException("Unable to create zookeeper server configuration",ex);
  }
}
