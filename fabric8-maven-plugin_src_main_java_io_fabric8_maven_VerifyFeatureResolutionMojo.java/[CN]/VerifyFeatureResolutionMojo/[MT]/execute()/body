{
  URL.setURLStreamHandlerFactory(new CustomBundleURLStreamHandlerFactory());
  System.setProperty("karaf.home","target/karaf");
  System.setProperty("karaf.data","target/karaf/data");
  ExecutorService executor=Executors.newFixedThreadPool(8);
  Hashtable<String,String> properties=new Hashtable<String,String>();
  if (additionalMetadata != null) {
    try (Reader reader=new FileReader(additionalMetadata)){
      Properties metadata=new Properties();
      metadata.load(reader);
      for (Enumeration<?> e=metadata.propertyNames(); e.hasMoreElements(); ) {
        Object key=e.nextElement();
        Object val=metadata.get(key);
        properties.put(key.toString(),val.toString());
      }
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Unable to load additional metadata from " + additionalMetadata,e);
    }
  }
  DownloadManager manager;
  final Map<String,Repository> repositories;
  Map<String,Feature[]> allFeatures=new HashMap<>();
  try {
    DictionaryPropertyResolver propertyResolver=new DictionaryPropertyResolver(properties);
    MavenConfigurationImpl config=new MavenConfigurationImpl(propertyResolver,"org.ops4j.pax.url.mvn");
    config.setSettings(new MavenSettingsImpl(config.getSettingsFileUrl(),config.useFallbackRepositories()));
    manager=new DownloadManager(config,executor);
    repositories=loadRepositories(manager,descriptors);
    for (    String repoUri : repositories.keySet()) {
      allFeatures.put(repoUri,repositories.get(repoUri).getFeatures());
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException("Unable to load features descriptors",e);
  }
  List<Feature> featuresToTest=new ArrayList<>();
  if (verifyTransitive) {
    for (    Feature[] features : allFeatures.values()) {
      featuresToTest.addAll(Arrays.asList(features));
    }
  }
 else {
    for (    String uri : descriptors) {
      featuresToTest.addAll(Arrays.asList(allFeatures.get(uri)));
    }
  }
  if (features != null && !features.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    for (    String feature : features) {
      if (sb.length() > 0) {
        sb.append("|");
      }
      String p=feature.replaceAll("\\.","\\\\.").replaceAll("\\*",".*");
      sb.append(p);
      if (!feature.contains("/")) {
        sb.append("/.*");
      }
    }
    Pattern pattern=Pattern.compile(sb.toString());
    for (Iterator<Feature> iterator=featuresToTest.iterator(); iterator.hasNext(); ) {
      Feature feature=iterator.next();
      String id=feature.getName() + "/" + feature.getVersion();
      if (!pattern.matcher(id).matches()) {
        iterator.remove();
      }
    }
  }
  for (  String fmk : framework) {
    properties.put("feature.framework." + fmk,fmk);
  }
  List<Throwable> failures=new ArrayList<>();
  for (  Feature feature : featuresToTest) {
    try {
      String id=feature.getName() + "/" + feature.getVersion();
      verifyResolution(manager,repositories,id,properties);
      getLog().info("Verification of feature " + id + " succeeded");
    }
 catch (    Exception e) {
      getLog().warn(e.getMessage());
      failures.add(e);
      if ("first".equals(fail)) {
        throw e;
      }
    }
  }
  if ("end".equals(fail) && !failures.isEmpty()) {
    throw new MojoExecutionException("Verification failures",new MultiException("Verification failures",failures));
  }
}
