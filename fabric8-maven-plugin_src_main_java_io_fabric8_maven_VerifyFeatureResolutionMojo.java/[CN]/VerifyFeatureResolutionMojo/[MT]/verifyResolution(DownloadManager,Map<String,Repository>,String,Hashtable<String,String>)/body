{
  try {
    properties.put("feature.totest",feature);
    boolean resolveOptionalImports=getResolveOptionalImports(properties);
    DeploymentBuilder builder=new DeploymentBuilder(manager,null,repositories.values(),-1);
    Map<String,Resource> downloadedResources=builder.download(getPrefixedProperties(properties,"feature."),getPrefixedProperties(properties,"bundle."),getPrefixedProperties(properties,"fab."),getPrefixedProperties(properties,"req."),getPrefixedProperties(properties,"override."),getPrefixedProperties(properties,"optional."),getMetadata(properties,"metadata#"));
    for (    String uri : getPrefixedProperties(properties,"resources.")) {
      builder.addResourceRepository(new MetadataRepository(new HttpMetadataProvider(uri)));
    }
    Resource systemBundle=getSystemBundleResource();
    try {
      Collection<Resource> resources=builder.resolve(systemBundle,resolveOptionalImports);
    }
 catch (    Exception e) {
      throw new MojoExecutionException("Feature resolution failed for " + feature + "\nMessage: "+ e.getMessage()+ "\nRepositories: "+ toString(new TreeSet<>(repositories.keySet()))+ "\nResources: "+ toString(new TreeSet<>(downloadedResources.keySet())),e);
    }
  }
 catch (  MojoExecutionException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MojoExecutionException("Error verifying feature " + feature + "\nMessage: "+ e.getMessage(),e);
  }
}
