{
  try {
    final ByteArrayInputStream bais=new ByteArrayInputStream((byte[])data);
    final DataInputStream dis=new DataInputStream(bais);
    final boolean isRequest=dis.readByte() == 0;
    final String correlation=dis.readUTF();
    final String serviceId=dis.readUTF();
    final ExportRegistration registration=exportedServicesPerId.get(serviceId);
    if (isRequest) {
      try {
        final Invocation invocation=(Invocation)registration.getXStream().fromXML(dis);
        Object service=bundleContext.getService(registration.getExportedService());
        try {
          Method method=service.getClass().getMethod(invocation.method,invocation.types);
          Object response=method.invoke(service,invocation.args);
          transport.offer(new RemoteResponse(correlation,serviceId,response));
        }
  finally {
          bundleContext.ungetService(registration.getExportedService());
        }
      }
 catch (      Throwable t) {
        try {
          if (t instanceof InvocationTargetException) {
            t=((InvocationTargetException)t).getTargetException();
          }
          transport.offer(new RemoteResponse(correlation,serviceId,t).toByteArray(registration.getXStream()));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      final boolean error=dis.readBoolean();
      final Object v=registration.getXStream().fromXML(dis);
      RemoteResponse response=error ? new RemoteResponse(correlation,serviceId,(Throwable)v) : new RemoteResponse(correlation,serviceId,v);
      AtomicReference<RemoteResponse> ref=requests.get(response.correlation);
synchronized (ref) {
        ref.set(response);
        ref.notifyAll();
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}
