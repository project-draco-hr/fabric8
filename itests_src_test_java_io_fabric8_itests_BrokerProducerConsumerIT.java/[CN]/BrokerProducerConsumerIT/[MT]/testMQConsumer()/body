{
  assertThat(client).replicationController(brokerReplicationControllerId).isNotNull();
  assertThat(client).replicationController(consumerReplicationControllerId).isNotNull();
  assertThat(client).pods().runningStatus().filterNamespace(session.getNamespace()).haveAtLeast(1,new Condition<Pod>(){
    @Override public boolean matches(    Pod podSchema){
      return true;
    }
  }
);
  Asserts.assertWaitFor(10 * 60 * 1000,new Block(){
    @Override public void invoke() throws Exception {
      J4pClient brokerClient=jolokiaClients.assertClientForReplicationController(brokerReplicationControllerId);
      J4pClient consumerClient=jolokiaClients.assertClientForReplicationController(consumerReplicationControllerId);
      assertThat(consumerClient).stringAttribute("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"","State").isEqualTo("Started");
      assertThat(brokerClient).longAttribute("org.apache.activemq:type=Broker,brokerName=default,destinationType=Queue,destinationName=TEST.FOO","EnqueueCount").isGreaterThan(1000);
      assertThat(brokerClient).longAttribute("org.apache.activemq:type=Broker,brokerName=default,destinationType=Queue,destinationName=TEST.FOO","DequeueCount").isGreaterThan(1000);
    }
  }
);
}
