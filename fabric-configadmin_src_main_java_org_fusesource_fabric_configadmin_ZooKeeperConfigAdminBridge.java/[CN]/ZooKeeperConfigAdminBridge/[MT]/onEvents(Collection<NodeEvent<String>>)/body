{
  LOGGER.entering(getClass().getName(),"onEvents",nodeEvents);
  try {
    if (!tracking) {
      final Set<String> pids=getPids();
      List<Configuration> configs=asList(getConfigAdmin().listConfigurations("(" + FABRIC_ZOOKEEPER_PID + "=*)"));
      for (      String pid : pids) {
        Dictionary c=load(pid);
        String p[]=parsePid(pid);
        Configuration config=getConfiguration(pid,p[0],p[1]);
        configs.remove(config);
        Dictionary props=config.getProperties();
        boolean changed=false;
        if (props != null) {
          for (Enumeration e=c.keys(); e.hasMoreElements(); ) {
            Object key=e.nextElement();
            Object val=c.get(key);
            Object oldVal=props.get(key);
            if (oldVal == null || !oldVal.equals(val)) {
              props.put(key,val);
              LOGGER.info(config.getPid() + " - property '" + key+ "' changed: "+ oldVal+ " -> "+ val);
              changed=true;
            }
          }
          props.remove(FABRIC_ZOOKEEPER_PID);
          props.remove(org.osgi.framework.Constants.SERVICE_PID);
          props.remove(ConfigurationAdmin.SERVICE_FACTORYPID);
          if (changed) {
            LOGGER.info(config.getPid() + " - updating configuration");
            config.update(props);
            saveProperties(props);
          }
 else {
            LOGGER.fine(config.getPid() + " - ignoring configuration (no changes)");
          }
        }
 else {
          LOGGER.info(config.getPid() + " - initializing configuration");
          config.update(c);
        }
      }
      for (      Configuration config : configs) {
        LOGGER.info(config.getPid() + " - deleting configuration");
        config.delete();
      }
    }
    LOGGER.exiting(getClass().getName(),"onEvents");
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,"Exception when tracking configurations",e);
  }
}
