{
  String packaging=getProjectPackaging(getSelectedProject(builder));
  List<String> choices=new ArrayList<String>();
  if (packaging == null || "jar".equals(packaging)) {
    choices.add(jarImages[0]);
  }
  if (packaging == null || "bundle".equals(packaging)) {
    choices.add(bundleImages[0]);
  }
  if (packaging == null || "war".equals(packaging)) {
    choices.add(warImages[0]);
    choices.add(warImages[1]);
  }
  from.setValueChoices(choices);
  from.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.from",event.getNewValue());
      main.setRequired(isMainRequired((String)event.getNewValue()));
    }
  }
);
  String existing=(String)builder.getUIContext().getAttributeMap().get("docker.from");
  if (existing == null) {
    if (choices.size() == 1) {
      from.setDefaultValue(choices.get(0));
    }
  }
 else {
    from.setDefaultValue(existing);
  }
  existing=(String)builder.getUIContext().getAttributeMap().get("docker.main");
  main.setDefaultValue(existing);
  main.setRequired(isMainRequired(from.getValue()));
  main.addValidator(new ClassNameValidator(true));
  main.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.main",event.getNewValue());
    }
  }
);
  builder.add(from).add(main);
}
