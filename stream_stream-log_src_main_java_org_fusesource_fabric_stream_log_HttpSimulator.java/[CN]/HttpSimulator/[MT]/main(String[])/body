{
  HttpSimulator simulator=new HttpSimulator();
  LinkedList<String> argl=new LinkedList<String>(Arrays.asList(args));
  while (!argl.isEmpty()) {
    try {
      String arg=argl.removeFirst();
      if ("--help".equals(arg)) {
        displayHelpAndExit(0);
      }
 else       if ("--producers".equals(arg)) {
        simulator.producers=Integer.parseInt(shift(argl));
      }
 else       if ("--broker".equals(arg)) {
        simulator.brokers.add(shift(argl));
      }
 else       if ("--destination".equals(arg)) {
        simulator.destinations.add(shift(argl));
      }
 else       if ("--batch-size".equals(arg)) {
        simulator.batchSize=Integer.parseInt(shift(argl));
      }
 else       if ("--batch-timeout".equals(arg)) {
        simulator.batchTimeout=Long.parseLong(shift(argl));
      }
 else       if ("--compress".equals(arg)) {
        simulator.compress=Boolean.parseBoolean(shift(argl));
      }
 else       if ("--entries-per-sec".equals(arg)) {
        simulator.entriesPerSec=Double.parseDouble(shift(argl));
      }
 else       if ("--entries-per-sec-sd".equals(arg)) {
        simulator.entriesPerSecSD=Double.parseDouble(shift(argl));
      }
 else       if ("--session-size".equals(arg)) {
        simulator.sessionSize=Long.parseLong(shift(argl));
      }
 else       if ("--session-size-sd".equals(arg)) {
        simulator.sessionSizeSD=Long.parseLong(shift(argl));
      }
 else       if ("--sample-time".equals(arg)) {
        simulator.sampleTime=Integer.parseInt(shift(argl));
      }
 else       if ("--warmup-time".equals(arg)) {
        simulator.warmupTime=Integer.parseInt(shift(argl));
      }
 else {
        System.err.println("Invalid usage: unknown option: " + arg);
        displayHelpAndExit(1);
      }
    }
 catch (    NumberFormatException e) {
      System.err.println("Invalid usage: argument not a number");
      displayHelpAndExit(1);
    }
  }
  if (simulator.brokers.isEmpty()) {
    System.err.println("At least one --broker option is required.");
    displayHelpAndExit(1);
  }
  if (simulator.destinations.isEmpty()) {
    System.err.println("At least one --destination option is required.");
    displayHelpAndExit(1);
  }
  try {
    simulator.execute();
    System.exit(0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}
