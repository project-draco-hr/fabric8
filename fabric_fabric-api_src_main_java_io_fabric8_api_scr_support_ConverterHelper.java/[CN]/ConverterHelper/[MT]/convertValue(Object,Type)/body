{
  Class<?> clazz=null;
  Class<?> componentType=Object.class;
  if (type instanceof ParameterizedType) {
    clazz=(Class<?>)((ParameterizedType)type).getRawType();
    componentType=(Class<?>)((ParameterizedType)type).getActualTypeArguments()[0];
  }
 else   if (type instanceof Class) {
    clazz=(Class)type;
  }
 else {
    throw new IllegalArgumentException();
  }
  if (value != null) {
    if (clazz.isInstance(value)) {
      return value;
    }
    if (clazz == String.class) {
      return value.toString();
    }
    if (clazz == Character.class || clazz == char.class) {
      String text=value.toString();
      if (text.length() > 0) {
        return text.charAt(0);
      }
    }
    if (clazz == Boolean.class || clazz == boolean.class) {
      return convertBoolean(value.toString());
    }
    if (clazz == Integer.class || clazz == int.class) {
      return convertInt(value.toString());
    }
    if (clazz == File.class) {
      return new File(value.toString());
    }
    if (clazz == URI.class) {
      return new URI(value.toString());
    }
    if (clazz == URL.class) {
      return new URL(value.toString());
    }
    String text=value.toString();
    if (clazz.isArray()) {
      String[] tokens=splitValues(text);
      componentType=clazz.getComponentType();
      Object array=Array.newInstance(componentType,tokens.length);
      int index=0;
      for (      String token : tokens) {
        Object item=convertValue(token,componentType);
        if (item != null) {
          Array.set(array,index++,item);
        }
      }
      return array;
    }
 else     if (List.class.isAssignableFrom(clazz)) {
      List list=new ArrayList();
      String[] tokens=splitValues(text);
      for (      String token : tokens) {
        Object item=convertValue(token,componentType);
        list.add(item);
      }
      return list;
    }
 else     if (Set.class.isAssignableFrom(clazz)) {
      Set set=new HashSet();
      String[] tokens=splitValues(text);
      for (      String token : tokens) {
        Object item=convertValue(token,componentType);
        set.add(item);
      }
      return set;
    }
    PropertyEditor editor=PropertyEditorManager.findEditor(clazz);
    if (editor != null) {
      editor.setAsText(text);
      return editor.getValue();
    }
  }
  return null;
}
