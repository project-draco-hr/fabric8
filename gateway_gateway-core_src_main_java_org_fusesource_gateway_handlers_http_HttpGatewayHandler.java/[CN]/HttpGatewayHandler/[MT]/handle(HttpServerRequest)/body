{
  String uri=request.uri();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Proxying request: " + uri);
  }
  HttpClient client=null;
  String remaining=null;
  String prefix=null;
  try {
    List<String> paths=serviceMap.getPaths();
    for (    String path : paths) {
      int idx=path.lastIndexOf('/');
      String pathPrefix=path;
      if (idx > 0) {
        pathPrefix=pathPrefix.substring(0,idx + 1);
      }
      if (uri.startsWith(pathPrefix) || (uri + "/").startsWith(pathPrefix)) {
        int pathPrefixLength=pathPrefix.length();
        if (pathPrefixLength < uri.length()) {
          remaining=uri.substring(pathPrefixLength);
        }
        List<ServiceDetails> services=serviceMap.getServices(path);
        if (!services.isEmpty()) {
          ServiceDetails serviceDetails=chooser.chooseService(request,services);
          if (serviceDetails != null) {
            List<String> urlStrings=serviceDetails.getServices();
            if (urlStrings.size() > 0) {
              String urlText=urlStrings.get(0);
              if (Strings.notEmpty(urlText)) {
                try {
                  URL url=new URL(urlText);
                  client=createClient(url);
                  prefix=url.getPath();
                  break;
                }
 catch (                MalformedURLException e) {
                  LOG.warn("Failed to parse URL: " + urlText + ". "+ e,e);
                }
              }
            }
          }
        }
      }
    }
    if (client != null) {
      String actualUrl=prefix != null ? prefix : "";
      if (remaining != null) {
        if (actualUrl.length() > 0 && !actualUrl.endsWith("/")) {
          actualUrl+="/";
        }
        actualUrl+=remaining;
      }
      final HttpClientRequest clientRequest=client.request(request.method(),actualUrl,new Handler<HttpClientResponse>(){
        public void handle(        HttpClientResponse clientResponse){
          if (LOG.isDebugEnabled()) {
            LOG.debug("Proxying response: " + clientResponse.statusCode());
          }
          request.response().setStatusCode(clientResponse.statusCode());
          request.response().headers().set(clientResponse.headers());
          request.response().setChunked(true);
          clientResponse.dataHandler(new Handler<Buffer>(){
            public void handle(            Buffer data){
              if (LOG.isDebugEnabled()) {
                LOG.debug("Proxying response body:" + data);
              }
              request.response().write(data);
            }
          }
);
          clientResponse.endHandler(new VoidHandler(){
            public void handle(){
              request.response().end();
            }
          }
);
        }
      }
);
      clientRequest.headers().set(request.headers());
      clientRequest.setChunked(true);
      request.dataHandler(new Handler<Buffer>(){
        public void handle(        Buffer data){
          if (LOG.isDebugEnabled()) {
            LOG.debug("Proxying request body:" + data);
          }
          clientRequest.write(data);
        }
      }
);
      request.endHandler(new VoidHandler(){
        public void handle(){
          if (LOG.isDebugEnabled()) {
            LOG.debug("end of the request");
          }
          clientRequest.end();
        }
      }
);
    }
 else {
      LOG.info("Could not find matching proxy path for " + uri + " from paths: "+ paths);
      request.response().setStatusCode(404);
      request.response().close();
    }
  }
 catch (  Throwable e) {
    LOG.error("Caught: " + e,e);
    request.response().setStatusCode(404);
    StringWriter buffer=new StringWriter();
    e.printStackTrace(new PrintWriter(buffer));
    request.response().setStatusMessage("Error: " + e + "\nStack Trace: "+ buffer);
    request.response().close();
  }
}
