{
  String uri=request.uri();
  System.out.println("Proxying request: " + uri);
  HttpClient client=null;
  String remaining=null;
  String prefix=null;
  List<String> paths=serviceMap.getPaths();
  for (  String path : paths) {
    if (uri.startsWith(path)) {
      remaining=uri.substring(path.length());
      List<ServiceDetails> services=serviceMap.getServices(path);
      if (!services.isEmpty()) {
        ServiceDetails serviceDetails=chooser.chooseService(request,services);
        if (serviceDetails != null) {
          List<String> urlStrings=serviceDetails.getServices();
          if (urlStrings.size() > 0) {
            String urlText=urlStrings.get(0);
            if (Strings.notEmpty(urlText)) {
              try {
                URL url=new URL(urlText);
                client=createClient(url);
                prefix=url.getPath();
                break;
              }
 catch (              MalformedURLException e) {
                LOG.warn("Failed to parse URL: " + urlText + ". "+ e,e);
              }
            }
          }
        }
      }
    }
  }
  if (client != null) {
    String actualUrl=prefix != null ? prefix : "";
    if (remaining != null) {
      if (actualUrl.length() > 0 && !actualUrl.endsWith("/")) {
        actualUrl+="/";
      }
      actualUrl+=remaining;
    }
    final HttpClientRequest clientRequest=client.request(request.method(),actualUrl,new Handler<HttpClientResponse>(){
      public void handle(      HttpClientResponse clientResponse){
        System.out.println("Proxying response: " + clientResponse.statusCode());
        request.response().setStatusCode(clientResponse.statusCode());
        request.response().headers().set(clientResponse.headers());
        request.response().setChunked(true);
        clientResponse.dataHandler(new Handler<Buffer>(){
          public void handle(          Buffer data){
            System.out.println("Proxying response body:" + data);
            request.response().write(data);
          }
        }
);
        clientResponse.endHandler(new VoidHandler(){
          public void handle(){
            request.response().end();
          }
        }
);
      }
    }
);
    clientRequest.headers().set(request.headers());
    clientRequest.setChunked(true);
    request.dataHandler(new Handler<Buffer>(){
      public void handle(      Buffer data){
        System.out.println("Proxying request body:" + data);
        clientRequest.write(data);
      }
    }
);
    request.endHandler(new VoidHandler(){
      public void handle(){
        System.out.println("end of the request");
        clientRequest.end();
      }
    }
);
  }
 else {
    request.response().setStatusCode(404);
    request.response().close();
  }
}
