{
  final DependencyTree sub11=DependencyTree.newBuilder("test","child1-sub1","1.0").build();
  final DependencyTree sub12=DependencyTree.newBuilder("test","child1-sub2","1.0").build();
  final DependencyTree child1=DependencyTree.newBuilder("test","child1","1.0",sub11,sub12).build();
  final DependencyTree child2=DependencyTree.newBuilder("test","child2","1.0").build();
  final DependencyTree root=DependencyTree.newBuilder("test","root","1.0",child1,child2).build();
  DependencyTreeFilters.prune(root,new Filter<DependencyTree>(){
    @Override public boolean matches(    DependencyTree dependencyTree){
      return dependencyTree == child1;
    }
  }
);
  assertEquals(1,root.getDescendants().size());
  assertTrue(root.getDescendants().contains(child2));
}
