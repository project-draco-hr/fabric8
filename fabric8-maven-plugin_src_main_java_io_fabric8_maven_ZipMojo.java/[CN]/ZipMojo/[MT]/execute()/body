{
  try {
    if (isIgnoreProject())     return;
    MavenProject rootProject=null;
    boolean generatingAggregatedZip=false;
    int projectsWithSameParentSize=0;
    List<MavenProject> fabricZipGoalProjects=new ArrayList<>();
    List<MavenProject> projectsWithSameParent=new ArrayList<>();
    if (reactorProjects != null) {
      List<MavenProject> pomZipProjects=new ArrayList<>();
      for (      MavenProject reactorProject : reactorProjects) {
        if (isPom(reactorProject)) {
          pomZipProjects.add(reactorProject);
        }
        List<Plugin> buildPlugins=reactorProject.getBuildPlugins();
        for (        Plugin buildPlugin : buildPlugins) {
          String artifactId=buildPlugin.getArtifactId();
          if ("fabric8-maven-plugin".equals(artifactId)) {
            Object goals=buildPlugin.getGoals();
            boolean hasZipGoal=goals != null && goals.toString().contains("zip");
            List<PluginExecution> executions=buildPlugin.getExecutions();
            for (            PluginExecution execution : executions) {
              List<String> execGoals=execution.getGoals();
              if (execGoals.contains("zip")) {
                hasZipGoal=true;
              }
            }
            getLog().debug("project " + reactorProject.getArtifactId() + " has zip goal: "+ hasZipGoal);
            fabricZipGoalProjects.add(reactorProject);
          }
        }
      }
      MavenProject project=getProject();
      MavenProject parentProject=project.getParent();
      for (      MavenProject zipGoalProject : fabricZipGoalProjects) {
        MavenProject zipGoalProjectParent=zipGoalProject.getParent();
        if (parentProject != null && Objects.equal(parentProject,zipGoalProjectParent)) {
          projectsWithSameParent.add(zipGoalProject);
        }
      }
      projectsWithSameParentSize=projectsWithSameParent.size();
      if (projectsWithSameParentSize > 1) {
        MavenProject lastProject=projectsWithSameParent.get(projectsWithSameParentSize - 1);
        if (Objects.equal(lastProject,project)) {
          rootProject=parentProject;
        }
      }
      if (rootProject != null) {
        if (aggregateZip) {
          generatingAggregatedZip=true;
        }
      }
    }
    boolean isPomProject=isPom(getProject());
    if (!generatingAggregatedZip && (!isPomProject || !aggregateZip)) {
      generateZip();
    }
 else {
      getLog().info("Not generating a zip right now - waiting until we generate the aggregated zip for all sub projects");
    }
    if (rootProject != null) {
      getLog().info("");
      getLog().info("Creating aggregated app zip");
      getLog().info("built the last fabric8:zip project so generating a combined zip for all " + projectsWithSameParentSize + " projects with a fabric8:zip goal: "+ projectsWithSameParent);
      getLog().info("Choosing root project " + rootProject.getArtifactId() + " for generation of aggregated zip");
      generateAggregatedZip(rootProject,fabricZipGoalProjects,projectsWithSameParent);
    }
  }
 catch (  MojoFailureException e) {
    throw e;
  }
catch (  MojoExecutionException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MojoExecutionException("Error executing",e);
  }
}
