{
  File projectBaseDir=rootProject.getBasedir();
  String rootProjectGroupId=rootProject.getGroupId();
  String rootProjectArtifactId=rootProject.getArtifactId();
  String rootProjectVersion=rootProject.getVersion();
  String aggregatedZipFileName="target/" + rootProjectArtifactId + "-"+ rootProjectVersion+ "-app.zip";
  File projectOutputFile=new File(projectBaseDir,aggregatedZipFileName);
  getLog().info("Generating " + projectOutputFile.getAbsolutePath() + " from root project "+ rootProjectArtifactId);
  File projectBuildDir=new File(projectBaseDir,reactorProjectOutputPath);
  if (projectOutputFile.exists()) {
    projectOutputFile.delete();
  }
  createAggregatedZip(projectBaseDir,projectBuildDir,reactorProjectOutputPath,projectOutputFile,includeReadMe,pomZipProjects);
  if (rootProject.getAttachedArtifacts() != null) {
    Artifact found=null;
    for (    Artifact artifact : rootProject.getAttachedArtifacts()) {
      if (artifactClassifier != null && artifact.hasClassifier() && artifact.getClassifier().equals(artifactClassifier)) {
        found=artifact;
        break;
      }
    }
    if (found != null) {
      rootProject.getAttachedArtifacts().remove(found);
    }
  }
  getLog().info("Attaching aggregated zip " + projectOutputFile + " to root project "+ rootProject.getArtifactId());
  projectHelper.attachArtifact(rootProject,artifactType,artifactClassifier,projectOutputFile);
  List<String> activeProfileIds=new ArrayList<>();
  List<Profile> activeProfiles=rootProject.getActiveProfiles();
  if (activeProfiles != null) {
    for (    Profile profile : activeProfiles) {
      String id=profile.getId();
      if (Strings.isNotBlank(id)) {
        activeProfileIds.add(id);
      }
    }
  }
  if (rootProject.hasLifecyclePhase("install")) {
    getLog().info("Installing aggregated zip " + projectOutputFile);
    InvocationRequest request=new DefaultInvocationRequest();
    request.setBaseDirectory(rootProject.getBasedir());
    request.setPomFile(new File("./pom.xml"));
    request.setGoals(Collections.singletonList("install:install-file"));
    request.setRecursive(false);
    request.setInteractive(false);
    request.setProfiles(activeProfileIds);
    Properties props=new Properties();
    props.setProperty("file",aggregatedZipFileName);
    props.setProperty("groupId",rootProjectGroupId);
    props.setProperty("artifactId",rootProjectArtifactId);
    props.setProperty("version",rootProjectVersion);
    props.setProperty("classifier","app");
    props.setProperty("packaging","zip");
    props.setProperty("generatePom","false");
    request.setProperties(props);
    getLog().info("Installing aggregated zip using: mvn install:install-file" + serializeMvnProperties(props));
    Invoker invoker=new DefaultInvoker();
    try {
      InvocationResult result=invoker.execute(request);
      if (result.getExitCode() != 0) {
        throw new IllegalStateException("Error invoking Maven goal install:install-file");
      }
    }
 catch (    MavenInvocationException e) {
      throw new MojoExecutionException("Error invoking Maven goal install:install-file",e);
    }
  }
  if (rootProject.hasLifecyclePhase("deploy")) {
    getLog().info("Deploying aggregated zip " + projectOutputFile + " to root project "+ rootProject.getArtifactId());
    getLog().info("Using deploy goal: " + deployFileGoal + " with active profiles: "+ activeProfileIds);
    InvocationRequest request=new DefaultInvocationRequest();
    request.setBaseDirectory(rootProject.getBasedir());
    request.setPomFile(new File("./pom.xml"));
    request.setGoals(Collections.singletonList(deployFileGoal));
    request.setRecursive(false);
    request.setInteractive(false);
    request.setProfiles(activeProfileIds);
    Properties props=new Properties();
    props.setProperty("file",aggregatedZipFileName);
    props.setProperty("groupId",rootProjectGroupId);
    props.setProperty("artifactId",rootProjectArtifactId);
    props.setProperty("version",rootProjectVersion);
    props.setProperty("classifier","app");
    props.setProperty("packaging","zip");
    props.setProperty("url",deploymentRepository.getUrl());
    props.setProperty("repositoryId",deploymentRepository.getId());
    props.setProperty("generatePom","false");
    request.setProperties(props);
    getLog().info("Deploying aggregated zip using: mvn deploy:deploy-file" + serializeMvnProperties(props));
    Invoker invoker=new DefaultInvoker();
    try {
      InvocationResult result=invoker.execute(request);
      if (result.getExitCode() != 0) {
        throw new IllegalStateException("Error invoking Maven goal deploy:deploy-file");
      }
    }
 catch (    MavenInvocationException e) {
      throw new MojoExecutionException("Error invoking Maven goal deploy:deploy-file",e);
    }
  }
}
