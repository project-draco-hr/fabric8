{
  final UIContext context=builder.getUIContext();
  copyFlowToProject.setValue(Boolean.TRUE);
  pipeline.setCompleter(new UICompleter<PipelineDTO>(){
    @Override public Iterable<PipelineDTO> getCompletionProposals(    UIContext context,    InputComponent<?,PipelineDTO> input,    String value){
      return getPipelines(context);
    }
  }
);
  pipeline.setValueConverter(new Converter<String,PipelineDTO>(){
    @Override public PipelineDTO convert(    String text){
      return getPipelineForValue(context,text);
    }
  }
);
  pipeline.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      String value=event.getNewValue() != null ? event.getNewValue().toString() : null;
      if (value != null) {
        String description=getDescriptionForFlow(value);
        pipeline.setNote(description != null ? description : "");
      }
 else {
        pipeline.setNote("");
      }
      boolean canCopy=Strings.isNotBlank(value);
      copyFlowToProject.setEnabled(canCopy);
    }
  }
);
  if (getCurrentSelectedProject(context) != null) {
    PipelineDTO defaultValue=getPipelineForValue(context,DEFAULT_MAVEN_FLOW);
    if (defaultValue != null) {
      pipeline.setDefaultValue(defaultValue);
      pipeline.setValue(defaultValue);
    }
  }
  chatRoom.setCompleter(new UICompleter<String>(){
    @Override public Iterable<String> getCompletionProposals(    UIContext context,    InputComponent<?,String> input,    String value){
      return filterCompletions(getChatRoomNames(),value);
    }
  }
);
  chatRoom.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      String value=event.getNewValue() != null ? event.getNewValue().toString() : null;
      if (value != null) {
        String description=getDescriptionForChatRoom(value);
        chatRoom.setNote(description != null ? description : "");
      }
 else {
        chatRoom.setNote("");
      }
    }
  }
);
  issueProjectName.setCompleter(new UICompleter<String>(){
    @Override public Iterable<String> getCompletionProposals(    UIContext context,    InputComponent<?,String> input,    String value){
      return filterCompletions(getIssueProjectNames(),value);
    }
  }
);
  issueProjectName.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      String value=event.getNewValue() != null ? event.getNewValue().toString() : null;
      if (value != null) {
        String description=getDescriptionForIssueProject(value);
        issueProjectName.setNote(description != null ? description : "");
      }
 else {
        issueProjectName.setNote("");
      }
    }
  }
);
  ProjectConfig config=null;
  Project project=getCurrentSelectedProject(context);
  File configFile=getProjectConfigFile(context,getSelectedProject(context));
  if (configFile != null && configFile.exists()) {
    config=ProjectConfigs.parseProjectConfig(configFile);
  }
  if (config != null) {
    PipelineDTO flow=getPipelineForValue(context,config.getPipeline());
    if (flow != null) {
      CommandHelpers.setInitialComponentValue(this.pipeline,flow);
    }
    CommandHelpers.setInitialComponentValue(chatRoom,config.getChatRoom());
    CommandHelpers.setInitialComponentValue(issueProjectName,config.getIssueProjectName());
    CommandHelpers.setInitialComponentValue(codeReview,config.getCodeReview());
  }
  inputComponents=CommandHelpers.addInputComponents(builder,pipeline,copyFlowToProject,chatRoom,issueProjectName,codeReview);
}
