{
  LOG.info("Creating the fabric8.yml file");
  String fileName=ProjectConfigs.FILE_NAME;
  Project project=getSelectedProject(context);
  File configFile=getProjectConfigFile(project);
  if (configFile == null) {
    return Results.fail("This command requires a project");
  }
  ProjectConfig config=null;
  boolean hasFile=false;
  if (configFile.exists()) {
    config=ProjectConfigs.parseProjectConfig(configFile);
    hasFile=true;
  }
  if (config == null) {
    config=new ProjectConfig();
  }
  CommandHelpers.putComponentValuesInAttributeMap(context,inputComponents);
  updateConfiguration(context,config);
  System.out.println("Result: " + config);
  String message;
  if (config.isEmpty() && !hasFile) {
    message="No " + fileName + " need be generated as there is no configuration";
    return Results.success(message);
  }
 else {
    String operation="Updated";
    if (!configFile.exists()) {
      operation="Created";
    }
    ProjectConfigs.saveConfig(config,configFile);
    message=operation + " " + fileName;
  }
  UIContext uiContext=context.getUIContext();
  Map<Object,Object> attributeMap=uiContext.getAttributeMap();
  String gitUrl=null;
  Object object=attributeMap.get(Project.class);
  String user=getStringAttribute(attributeMap,"gitUser");
  String named=null;
  File basedir=CommandHelpers.getBaseDir(project);
  if (object instanceof Project) {
    Project newProject=(Project)object;
    MetadataFacet facet=newProject.getFacet(MetadataFacet.class);
    if (facet != null) {
      named=facet.getProjectName();
      String email=getStringAttribute(attributeMap,"gitAuthorEmail");
      String address=getStringAttribute(attributeMap,"gitAddress");
      String htmlUrl=address + user + "/"+ named;
      String fullName=user + "/" + named;
      gitUrl=address + user + "/"+ named+ ".git";
    }
 else {
      LOG.error("No MetadataFacet for newly created project " + newProject);
    }
  }
 else {
    gitUrl=GitHelpers.extractGitUrl(basedir);
    if (basedir != null) {
      named=basedir.getName();
    }
  }
  ProjectConfigs.defaultEnvironments(config);
  String projectName=config.getBuildName();
  if (Strings.isNullOrBlank(projectName)) {
    projectName=named;
  }
  LOG.info("Project name is: " + projectName);
  if (Strings.isNotBlank(projectName)) {
    MavenFacet maven=project.getFacet(MavenFacet.class);
    Model pom=maven.getModel();
    if (pom != null) {
      Properties properties=pom.getProperties();
      boolean updated=false;
      updated=MavenHelpers.updatePomProperty(properties,"fabric8.label.project",projectName,updated);
      updated=MavenHelpers.updatePomProperty(properties,"fabric8.label.version","${project.version}",updated);
      if (updated) {
        LOG.info("Updating pom.xml properties!");
        maven.setModel(pom);
      }
 else {
        LOG.warn("Did not update pom.xml properties!");
      }
    }
 else {
      LOG.warn("No pom.xml found!");
    }
  }
  Boolean copyFlowToProjectValue=copyFlowToProject.getValue();
  if (copyFlowToProjectValue != null && copyFlowToProjectValue.booleanValue()) {
    if (basedir == null && !basedir.isDirectory()) {
      LOG.warn("Cannot copy the pipeline to the project as no basedir!");
    }
 else {
      String flow=this.pipeline.getValue();
      if (Strings.isNullOrBlank(flow)) {
        LOG.warn("Cannot copy the pipeline to the project as no pipeline selected!");
      }
 else {
        String flowText=getFlowContent(flow,uiContext);
        if (Strings.isNullOrBlank(flowText)) {
          LOG.warn("Cannot copy the pipeline to the project as no pipeline text could be loaded!");
        }
 else {
          flowText=Strings.replaceAllWithoutRegex(flowText,"GIT_URL","'" + gitUrl + "'");
          File newFile=new File(basedir,ProjectConfigs.LOCAL_FLOW_FILE_NAME);
          Files.writeToFile(newFile,flowText.getBytes());
          LOG.info("Written pipeline to " + newFile);
          if (config != null) {
            config.setPipeline(null);
            config.setUseLocalFlow(true);
          }
        }
      }
    }
  }
  final DevOpsConnector connector=new DevOpsConnector();
  connector.setProjectConfig(config);
  connector.setTryLoadConfigFileFromRemoteGit(false);
  connector.setUsername(user);
  connector.setPassword(getStringAttribute(attributeMap,"gitPassword"));
  connector.setBranch(getStringAttribute(attributeMap,"gitBranch","master"));
  connector.setBasedir(basedir);
  connector.setGitUrl(gitUrl);
  connector.setRepoName(named);
  connector.setRegisterWebHooks(true);
  connector.setTriggerJenkinsJob(true);
  LOG.info("Using connector: " + connector);
  try {
    connector.execute();
  }
 catch (  Exception e) {
    LOG.error("Failed to update DevOps resources: " + e,e);
  }
  return Results.success(message);
}
