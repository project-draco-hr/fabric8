{
  for (  Type type : restricted) {
    List<Object> children=type.getEncodingOrDescriptorOrFieldOrChoiceOrDoc();
    boolean isEnum=false;
    for (    Object child : children) {
      if (child instanceof Choice) {
        isEnum=true;
        break;
      }
    }
    if (!isEnum) {
      continue;
    }
    String enumType=type.getSource();
    while (enumType != null && !mapping.containsKey(enumType)) {
      enumType=restrictedMapping.get(enumType);
    }
    if (enumType == null) {
      Log.info("Skipping generation of enum %s, unknown type",type.getName());
      continue;
    }
    String name=toJavaClassName(type.getName());
    name=packagePrefix + "." + types+ "."+ name;
    JDefinedClass cls=cm._class(name,ClassType.ENUM);
    JMethod constructor=cls.constructor(JMod.PRIVATE);
    constructor.param(mapping.get(enumType),"value");
    enumType=mapping.get(enumType).getName();
    for (    Object child : children) {
      if (child instanceof Choice) {
        Choice choice=(Choice)child;
        JEnumConstant constant=cls.enumConstant(Utilities.toStaticName(choice.getName()));
        constant.arg(JExpr._new(cm.ref(enumType)).arg(choice.getValue()));
      }
    }
  }
}
