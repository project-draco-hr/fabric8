{
  String servletBasePath=sysprops.getProperty(SystemProperties.KARAF_DATA) + File.separator + "git"+ File.separator+ "servlet"+ File.separator;
  String fabricRepoPath=servletBasePath + "fabric";
  try {
    HttpContext base=httpService.get().createDefaultHttpContext();
    HttpContext secure=new GitSecureHttpContext(base,curator.get(),realm,role);
    File fabricRoot=new File(fabricRepoPath);
    if (!fabricRoot.exists()) {
      Git localGit=gitService.get().get();
      Git.cloneRepository().setTimeout(10).setBare(true).setNoCheckout(true).setCloneAllBranches(true).setDirectory(fabricRoot).setURI(localGit.getRepository().getDirectory().toURI().toString()).call().getRepository().close();
    }
    Dictionary<String,Object> initParams=new Hashtable<String,Object>();
    initParams.put("base-path",servletBasePath);
    initParams.put("repository-root",servletBasePath);
    initParams.put("export-all","true");
    httpService.get().registerServlet("/git",new FabricGitServlet(curator.get()),initParams,secure);
  }
 catch (  Throwable t) {
    throw FabricException.launderThrowable(t);
  }
}
