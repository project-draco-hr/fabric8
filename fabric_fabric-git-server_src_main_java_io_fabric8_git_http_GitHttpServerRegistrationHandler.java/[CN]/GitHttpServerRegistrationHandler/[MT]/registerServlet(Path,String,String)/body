{
  basePath=dataPath.resolve(Paths.get("git","servlet"));
  Path fabricRepoPath=basePath.resolve("fabric");
  String servletBase=basePath.toFile().getAbsolutePath();
  File fabricRoot=fabricRepoPath.toFile();
  if (!fabricRoot.exists()) {
    File localRepo=gitDataStore.get().getGit().getRepository().getDirectory();
    git=Git.cloneRepository().setTimeout(10).setBare(true).setNoCheckout(true).setCloneAllBranches(true).setDirectory(fabricRoot).setURI(localRepo.toURI().toString()).call();
  }
 else {
    git=Git.open(fabricRoot);
  }
  HttpContext base=httpService.get().createDefaultHttpContext();
  HttpContext secure=new GitSecureHttpContext(base,curator.get(),realm,role);
  Dictionary<String,Object> initParams=new Hashtable<String,Object>();
  initParams.put("base-path",servletBase);
  initParams.put("repository-root",servletBase);
  initParams.put("export-all","true");
  httpService.get().registerServlet("/git",new FabricGitServlet(git,curator.get()),initParams,secure);
}
