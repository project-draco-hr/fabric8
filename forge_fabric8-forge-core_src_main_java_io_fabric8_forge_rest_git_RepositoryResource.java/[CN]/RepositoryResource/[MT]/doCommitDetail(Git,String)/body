{
  RevCommit baseCommit=doGetCommit(git,commitId);
  if (baseCommit == null) {
    return null;
  }
 else {
    List<DiffInfo> diffs=new ArrayList<>();
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    Repository r=git.getRepository();
    DiffFormatter formatter=createDiffFormatter(r,buffer);
    RevTree commitTree=baseCommit.getTree();
    RevTree baseTree=null;
    ObjectId parentId=null;
    if (baseCommit.getParentCount() > 0) {
      final RevWalk rw=new RevWalk(r);
      parentId=baseCommit.getParent(0).getId();
      RevCommit parent=rw.parseCommit(parentId);
      baseTree=parent.getTree();
      rw.dispose();
    }
 else {
      baseTree=commitTree;
    }
    if (baseTree == null) {
      baseTree=baseCommit.getTree();
    }
    List<DiffEntry> diffEntries=formatter.scan(baseTree,commitTree);
    if (diffEntries.isEmpty()) {
      String previousCommit=commitId + "~1";
      ObjectId resolve=r.resolve(previousCommit);
      RevTree newTree=null;
      if (resolve != null) {
        final RevWalk rw=new RevWalk(r);
        RevCommit parent=rw.parseCommit(resolve);
        newTree=parent.getTree();
        rw.dispose();
      }
      if (baseTree == null || newTree == null || !Objects.equals(baseTree.getId(),newTree.getId())) {
        diffEntries=formatter.scan(newTree,commitTree);
      }
    }
    for (    DiffEntry diffEntry : diffEntries) {
      formatter.format(diffEntry);
      formatter.flush();
      String diff=buffer.toString();
      buffer.reset();
      DiffInfo diffInfo=createDiffInfo(diffEntry,diff);
      diffs.add(diffInfo);
    }
    CommitInfo commitInfo=createCommitInfo(baseCommit);
    return new CommitDetail(commitInfo,diffs);
  }
}
