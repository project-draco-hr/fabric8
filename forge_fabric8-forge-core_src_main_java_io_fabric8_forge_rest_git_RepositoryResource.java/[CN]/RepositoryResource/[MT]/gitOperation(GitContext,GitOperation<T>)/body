{
  return lockManager.withLock(gitFolder,new Callable<T>(){
    @Override public T call() throws Exception {
      projectFileSystem.cloneRepoIfNotExist(userDetails,basedir,cloneUrl);
      FileRepositoryBuilder builder=new FileRepositoryBuilder();
      Repository repository=builder.setGitDir(gitFolder).readEnvironment().findGitDir().build();
      Git git=new Git(repository);
      if (Strings.isNullOrBlank(origin)) {
        throw new IOException("Could not find remote git URL for folder " + gitFolder.getPath());
      }
      CredentialsProvider credentials=userDetails.createCredentialsProvider();
      disableSslCertificateChecks();
      LOG.info("Stashing local changes to the repo");
      boolean hasHead=true;
      try {
        git.log().all().call();
        hasHead=git.getRepository().getAllRefs().containsKey("HEAD");
      }
 catch (      NoHeadException e) {
        hasHead=false;
      }
      if (hasHead) {
        try {
          git.stashCreate().setPerson(personIdent).setWorkingDirectoryMessage("Stash before a write").setRef("HEAD").call();
        }
 catch (        Throwable e) {
          LOG.error("Failed to stash changes: " + e,e);
          Throwable cause=e.getCause();
          if (cause != null && cause != e) {
            LOG.error("Cause: " + cause,cause);
          }
        }
      }
      checkoutBranch(git);
      if (context.isRequirePull()) {
        doPull(git,context);
      }
      T result=operation.call(git,context);
      if (Strings.isNullOrBlank(message)) {
        message="";
      }
      if (context.isRequireCommit()) {
        doAddCommitAndPushFiles(git,userDetails,personIdent,branch,origin,message,isPushOnCommit());
      }
      return result;
    }
  }
);
}
