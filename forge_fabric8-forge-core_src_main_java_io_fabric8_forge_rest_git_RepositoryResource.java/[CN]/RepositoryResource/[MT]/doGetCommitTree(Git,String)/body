{
  Repository repository=git.getRepository();
  List<CommitTreeInfo> list=new ArrayList<CommitTreeInfo>();
  RevCommit commit=CommitUtils.getCommit(repository,commitId);
  if (commit != null) {
    RevWalk rw=new RevWalk(repository);
    try {
      if (commit.getParentCount() == 0) {
        TreeWalk treeWalk=new TreeWalk(repository);
        treeWalk.reset();
        treeWalk.setRecursive(true);
        treeWalk.addTree(commit.getTree());
        while (treeWalk.next()) {
          String pathString=treeWalk.getPathString();
          ObjectId objectId=treeWalk.getObjectId(0);
          int rawMode=treeWalk.getRawMode(0);
          list.add(new CommitTreeInfo(pathString,pathString,0,rawMode,objectId.getName(),commit.getId().getName(),DiffEntry.ChangeType.ADD));
        }
        treeWalk.release();
      }
 else {
        RevCommit parent=rw.parseCommit(commit.getParent(0).getId());
        DiffFormatter df=new DiffFormatter(DisabledOutputStream.INSTANCE);
        df.setRepository(repository);
        df.setDiffComparator(RawTextComparator.DEFAULT);
        df.setDetectRenames(true);
        List<DiffEntry> diffs=df.scan(parent.getTree(),commit.getTree());
        for (        DiffEntry diff : diffs) {
          String objectId=diff.getNewId().name();
          if (diff.getChangeType().equals(DiffEntry.ChangeType.DELETE)) {
            list.add(new CommitTreeInfo(diff.getOldPath(),diff.getOldPath(),0,diff.getNewMode().getBits(),objectId,commit.getId().getName(),diff.getChangeType()));
          }
 else           if (diff.getChangeType().equals(DiffEntry.ChangeType.RENAME)) {
            list.add(new CommitTreeInfo(diff.getOldPath(),diff.getNewPath(),0,diff.getNewMode().getBits(),objectId,commit.getId().getName(),diff.getChangeType()));
          }
 else {
            list.add(new CommitTreeInfo(diff.getNewPath(),diff.getNewPath(),0,diff.getNewMode().getBits(),objectId,commit.getId().getName(),diff.getChangeType()));
          }
        }
      }
    }
 catch (    Throwable e) {
      LOG.warn("Failed to walk tree for commit " + commitId + ". "+ e,e);
    }
 finally {
      rw.dispose();
    }
  }
  return list;
}
