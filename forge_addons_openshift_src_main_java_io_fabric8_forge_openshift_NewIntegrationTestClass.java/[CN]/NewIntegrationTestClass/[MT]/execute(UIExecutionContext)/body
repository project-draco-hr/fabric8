{
  Project project=getSelectedProject(context);
  ensureMavenDependencyAdded(project,dependencyInstaller,"io.fabric8","arquillian-fabric8","test");
  ensureMavenDependencyAdded(project,dependencyInstaller,"org.jboss.arquillian.junit","arquillian-junit-container","test");
  ensureMavenDependencyAdded(project,dependencyInstaller,"org.jboss.shrinkwrap.resolver","shrinkwrap-resolver-impl-maven","test");
  JavaSourceFacet facet=project.getFacet(JavaSourceFacet.class);
  String generatePackageName=targetPackage.getValue();
  String generateClassName=className.getValue();
  JavaClassSource javaClass=Roaster.create(JavaClassSource.class);
  javaClass.setName(generateClassName);
  if (Strings.isNotBlank(generatePackageName)) {
    javaClass.setPackage(generatePackageName);
    generateClassName=generatePackageName + "." + generateClassName;
  }
  javaClass.addImport("io.fabric8.arquillian.kubernetes.Session");
  javaClass.addImport("io.fabric8.kubernetes.api.KubernetesClient");
  javaClass.addImport("io.fabric8.kubernetes.api.model.Pod");
  javaClass.addImport("org.assertj.core.api.Condition");
  javaClass.addImport("org.jboss.arquillian.junit.Arquillian");
  javaClass.addImport("org.jboss.arquillian.test.api.ArquillianResource");
  javaClass.addImport("org.junit.Test");
  javaClass.addImport("org.junit.runner.RunWith");
  javaClass.addImport("io.fabric8.kubernetes.assertions.Assertions.assertThat").setStatic(true);
  javaClass.addAnnotation("RunWith").setLiteralValue("Arquillian.class");
  javaClass.getJavaDoc().setText("Tests that the Kubernetes resources (Services, Replication Controllers and Pods)\n" + "can be provisioned and start up correctly.\n\n" + "This test creates a new Kubernetes Namespace for the duration of the test case");
  javaClass.addField().setProtected().setType("KubernetesClient").setName("kubernetes").addAnnotation("ArquillianResource");
  javaClass.addField().setProtected().setType("Session").setName("session").addAnnotation("ArquillianResource");
  String testBody="assertThat(kubernetes).pods()\n" + "        .runningStatus()\n" + "        .filterNamespace(session.getNamespace())\n"+ "        .haveAtLeast(1, new Condition<Pod>() {\n"+ "            @Override\n"+ "            public boolean matches(Pod pod) {\n"+ "                return true;\n"+ "            }\n"+ "        });";
  javaClass.addMethod().setPublic().setReturnTypeVoid().setName("testKubernetesProvisionsAtLeastOnePod").setBody(testBody).addThrows("Exception").addAnnotation("Test");
  facet.saveTestJavaSource(javaClass);
  return Results.success("Created new class " + generateClassName);
}
