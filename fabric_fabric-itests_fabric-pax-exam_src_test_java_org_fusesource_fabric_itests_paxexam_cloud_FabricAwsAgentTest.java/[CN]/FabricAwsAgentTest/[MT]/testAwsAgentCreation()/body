{
  if (!isReady()) {
    System.err.println("Amazon is not setup correctly. This test will not run.");
    System.err.println("To prpoerly run this test, you need to setup with maven the following properties:");
    System.err.println("fabricitest.aws.identity \t The aws access id");
    System.err.println("fabricitest.aws.credential \t The aws access key");
    System.err.println("fabricitest.aws.image  \t The aws (java ready) image");
    System.err.println("fabricitest.aws.user  \t The user under which the agent will run");
    return;
  }
  System.err.println(executeCommand("features:install jclouds-aws-ec2 fabric-jclouds jclouds-commands"));
  executeCommands("config:edit org.jclouds.compute-ec2","config:propset provider aws-ec2 ","config:propset identity " + identity,"config:propset credential " + credential,"config:propset jclouds.regions eu-west-1,us-west-1,us-east-1","config:update");
  ComputeService computeService=getOsgiService(ComputeService.class,3 * DEFAULT_TIMEOUT);
  setUpSecurityGroup(computeService,2181);
  Thread.sleep(3 * DEFAULT_TIMEOUT);
  System.err.println(executeCommand(String.format("fabric:agent-create --ensemble-server --url jclouds://aws-ec2?imageId=%s&locationId=%s&group=%s&user=%s --profile default ensemble1",image,location,group,user),10 * 60000L,false));
  String publicIp=getNodePublicIp(computeService);
  assertNotNull(publicIp);
  Thread.sleep(DEFAULT_TIMEOUT);
  System.err.println(executeCommand("fabric:join " + publicIp + ":2181",10 * 60000L,false));
  String agentList=executeCommand("fabric:agent-list");
  System.err.println(agentList);
  assertTrue(agentList.contains("root") && agentList.contains("ensemble1"));
}
