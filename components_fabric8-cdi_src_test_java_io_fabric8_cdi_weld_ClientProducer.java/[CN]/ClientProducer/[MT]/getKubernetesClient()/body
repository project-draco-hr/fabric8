{
  KubernetesMockClient mock=new KubernetesMockClient();
  mock.getMasterUrl().andReturn(new URL("https://kubernetes.default.svc")).anyTimes();
  mock.rootPaths().andReturn(new RootPathsBuilder().addToPaths("/api","/api/v1beta3","/api/v1","/controllers","/healthz","/healthz/ping","/logs/","/metrics","/ready","/osapi","/osapi/v1beta3","/oapi","/oapi/v1","/swaggerapi/").build()).anyTimes();
  mock.services().inNamespace("default").withName("service1").get().andReturn(new ServiceBuilder().withNewMetadata().withName("service1").endMetadata().withNewSpec().addNewPort().withProtocol("TCP").withPort(80).withNewTargetPort(9090).endPort().withPortalIP("172.30.17.2").endSpec().build()).anyTimes();
  mock.services().inNamespace("default").withName("service2").get().andReturn(new ServiceBuilder().withNewMetadata().withName("service2").endMetadata().withNewSpec().addNewPort().withProtocol("TCP").withPort(80).withNewTargetPort(8080).endPort().withPortalIP("172.30.17.2").endSpec().build()).anyTimes();
  mock.services().inNamespace("default").withName("service3").get().andReturn(new ServiceBuilder().withNewMetadata().withName("service3").endMetadata().withNewSpec().addNewPort().withProtocol("TCP").withPort(443).withNewTargetPort(443).endPort().withPortalIP("172.30.17.2").endSpec().build()).anyTimes();
  mock.services().inNamespace("default").withName("multiport").get().andReturn(new ServiceBuilder().withNewMetadata().withName("multiport").endMetadata().withNewSpec().addNewPort().withName("port1").withProtocol("TCP").withPort(8081).withNewTargetPort(8081).endPort().addNewPort().withName("port2").withProtocol("TCP").withPort(8082).withNewTargetPort(8082).endPort().addNewPort().withName("port3").withProtocol("TCP").withPort(8083).withNewTargetPort(8083).endPort().withPortalIP("172.30.17.2").endSpec().build()).anyTimes();
  Endpoints service1Endpoints=new EndpointsBuilder().withNewMetadata().withName("service1").withNamespace("default").endMetadata().addNewSubset().addNewPort().withName("port").withPort(8080).endPort().addNewAddresse().withIp("10.0.0.1").endAddresse().endSubset().addNewSubset().addNewPort().withName("port").withPort(8080).endPort().addNewAddresse().withIp("10.0.0.2").endAddresse().endSubset().build();
  Endpoints multiPortEndpoint=new EndpointsBuilder().withNewMetadata().withName("multiport").withNamespace("default").endMetadata().addNewSubset().addNewAddresse().withIp("172.30.17.2").endAddresse().addNewPort("port1",8081,"TCP").addNewPort("port2",8082,"TCP").addNewPort("port3",8083,"TCP").endSubset().build();
  mock.endpoints().inNamespace("default").withName("service1").get().andReturn(service1Endpoints).anyTimes();
  mock.endpoints().inNamespace("default").list().andReturn(new EndpointsListBuilder().addToItems(multiPortEndpoint,service1Endpoints).build()).anyTimes();
  mock.adapt(OpenShiftClient.class).andReturn(getOpenShiftClient()).anyTimes();
  mock.getNamespace().andAnswer(new IAnswer<String>(){
    @Override public String answer() throws Throwable {
      return Utils.getEnvVar("KUBERNETES_NAMESPACE",null);
    }
  }
).anyTimes();
  return mock.replay();
}
