{
  final Vertx vertx=vertxService.getVertx();
  Assert.assertNotNull(vertx);
  System.out.println("test");
  vertx.createHttpServer().requestHandler(new Handler<HttpServerRequest>(){
    public void handle(    final HttpServerRequest req){
      final HttpClient client=vertx.createHttpClient().setHost("localhost").setPort(9002);
      client.setKeepAlive(false);
      client.setPipelining(false);
      System.out.println("Proxying request: " + req.uri());
      final HttpClientRequest cReq=client.request(req.method(),req.uri(),new Handler<HttpClientResponse>(){
        public void handle(        HttpClientResponse cRes){
          System.out.println("Proxying response: " + cRes.statusCode());
          req.response().setStatusCode(cRes.statusCode());
          MultiMap headers=cRes.headers();
          headers.set("Connection","close");
          req.response().headers().set(headers);
          req.response().setChunked(true);
          cRes.dataHandler(new Handler<Buffer>(){
            public void handle(            Buffer data){
              System.out.println("3. Proxying response body:" + data);
              req.response().write(data);
            }
          }
);
          cRes.endHandler(new VoidHandler(){
            public void handle(){
              System.out.println("4 end");
              req.response().end();
            }
          }
);
        }
      }
);
      MultiMap headers=req.headers();
      headers.set("Connection","close");
      cReq.headers().set(headers);
      cReq.setChunked(true);
      req.dataHandler(new Handler<Buffer>(){
        public void handle(        Buffer data){
          System.out.println("1. Proxying request body:" + data);
          cReq.write(data);
        }
      }
);
      req.endHandler(new VoidHandler(){
        public void handle(){
          System.out.println("2. end of the request");
          cReq.end();
        }
      }
);
    }
  }
).listen(8080);
  System.out.println("end");
}
