{
  try {
    final MetricsStorageService svc=storage.get();
    if (mbeanServer == null || svc == null) {
      return;
    }
    if (query.lock != null && !query.lock.isMaster()) {
      return;
    }
    Subject subject=new Subject();
    subject.getPrincipals().add(new RolePrincipal("viewer"));
    QueryResult qrs=Subject.doAsPrivileged(subject,new PrivilegedAction<QueryResult>(){
      @Override public QueryResult run(){
        try {
          return JmxUtils.execute(query.server,query.query,mbeanServer);
        }
 catch (        Throwable e) {
          LOG.error("Error sending metrics",e);
        }
        return null;
      }
    }
,AccessController.getContext());
    if (qrs != null) {
      boolean forceSend=query.query.getMinPeriod() == query.query.getPeriod() || qrs.getTimestamp().getTime() - query.lastSent >= TimeUnit.SECONDS.toMillis(query.query.getMinPeriod());
      if (!forceSend && query.lastResult != null) {
        if (qrs.getResults().equals(query.lastResult.getResults())) {
          query.lastResult=qrs;
          query.lastResultSent=false;
        }
        if (!query.lastResultSent) {
          renderAndSend(svc,query.lastResult);
        }
      }
      query.lastResult=qrs;
      query.lastResultSent=true;
      query.lastSent=qrs.getTimestamp().getTime();
      renderAndSend(svc,qrs);
    }
  }
 catch (  Throwable e) {
    LOG.error("Error sending metrics",e);
  }
}
