{
  Map<String,byte[]> fileConfigurations=profile.getFileConfigurations();
  byte[] bytes=fileConfigurations.get(GRAPH_JSON);
  if (bytes != null && bytes.length > 0) {
    try {
      Map object=new ObjectMapper().readValue(bytes,Map.class);
      for (      Map q : (List<Map>)object.get(QUERIES)) {
        String name=(String)q.get(NAME);
        String template=(String)q.get(TEMPLATE);
        String metadata=(String)q.get(METADATA);
        String lock=(String)q.get(LOCK);
        int period=DEFAULT.equals(q.get(PERIOD)) ? defaultDelay : q.get(PERIOD) != null ? ((Number)q.get(PERIOD)).intValue() : defaultDelay;
        int minPeriod=DEFAULT.equals(q.get(MIN_PERIOD)) ? defaultDelay : q.get(MIN_PERIOD) != null ? ((Number)q.get(MIN_PERIOD)).intValue() : period;
        Set<Request> requests=new HashSet<Request>();
        for (        Map mb : (List<Map>)q.get(REQUESTS)) {
          if (mb.containsKey(ATTRS)) {
            String mname=(String)mb.get(NAME);
            String mobj=(String)mb.get(OBJ);
            List<String> mattrs=(List<String>)mb.get(ATTRS);
            requests.add(new MBeanAttrs(mname,mobj,mattrs));
          }
 else           if (mb.containsKey(OPER)) {
            String mname=(String)mb.get(NAME);
            String mobj=(String)mb.get(OBJ);
            String moper=(String)mb.get(OPER);
            List<Object> margs=(List<Object>)mb.get(ARGS);
            List<String> msig=(List<String>)mb.get(SIG);
            requests.add(new MBeanOpers(mname,mobj,moper,margs,msig));
          }
 else {
            throw new IllegalArgumentException("Unknown request " + MetricsJSON.toJson(mb));
          }
        }
        queries.add(new Query(name,requests,template,metadata,lock,period,minPeriod));
      }
    }
 catch (    Throwable t) {
      LOG.warn("Unable to load queries from profile " + profile.getId(),t);
    }
  }
  ProfileService profileService=fabricService.adapt(ProfileService.class);
  Version version=profileService.getVersion(profile.getVersion());
  for (  String parentId : profile.getParentIds()) {
    loadProfile(version.getRequiredProfile(parentId),queries);
  }
}
