{
  String testZkProfilebase="zkprofile";
  String testGitProfilebase="gitprofile";
  System.err.println(executeCommand("fabric:create -n"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
    String gitRepoUrl=GitUtils.getMasterUrl(bundleContext,curator);
    assertNotNull(gitRepoUrl);
    GitUtils.waitForBranchUpdate(curator,"1.0");
    Git.cloneRepository().setURI(gitRepoUrl).setCloneAllBranches(true).setDirectory(testrepo).setCredentialsProvider(getCredentialsProvider()).call();
    Git git=Git.open(testrepo);
    GitUtils.configureBranch(git,"origin",gitRepoUrl,"1.0");
    git.fetch().setCredentialsProvider(getCredentialsProvider());
    GitUtils.checkoutBranch(git,"origin","1.0");
    assertTrue(new File(testrepo,"fabric/profiles/default.profile").exists());
    for (int v=0; v < 2; v++) {
      for (int i=1; i < 2; i++) {
        String gitProfile=testGitProfilebase + v + "p"+ i;
        String zkProfile=testZkProfilebase + v + "p"+ i;
        createAndTestProfileInGit(fabricService,curator,git,"1." + v,gitProfile);
        createAndTestProfileInDataStore(fabricService,curator,git,"1." + v,zkProfile);
      }
    }
  }
  finally {
    fabricProxy.close();
  }
}
