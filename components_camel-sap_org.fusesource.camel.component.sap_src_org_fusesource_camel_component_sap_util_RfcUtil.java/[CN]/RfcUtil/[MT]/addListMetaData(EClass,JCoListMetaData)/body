{
  if (jcoListMetaData == null)   return;
  EcoreFactory ecoreFactory=EcoreFactory.eINSTANCE;
  EPackage ePackage=eClass.getEPackage();
  for (int i=0; i < jcoListMetaData.getFieldCount(); i++) {
    EStructuralFeature structuralFeature;
    if (jcoListMetaData.isStructure(i)) {
      JCoRecordMetaData jcoRecordMetaData=jcoListMetaData.getRecordMetaData(i);
      EClass structureClass=getStructureClass(ePackage,jcoRecordMetaData);
      EReference reference=ecoreFactory.createEReference();
      reference.setEType(structureClass);
      reference.setContainment(true);
      structuralFeature=reference;
      addAnnotation(structuralFeature,eNS_URI,RfcNS_CLASS_NAME_OF_FIELD_KEY,EObject.class.getName());
    }
 else     if (jcoListMetaData.isTable(i)) {
      JCoRecordMetaData jcoRecordMetaData=jcoListMetaData.getRecordMetaData(i);
      EClass tableClass=getTableClass(ePackage,jcoRecordMetaData);
      EReference reference=ecoreFactory.createEReference();
      reference.setEType(tableClass);
      reference.setContainment(true);
      structuralFeature=reference;
      addAnnotation(structuralFeature,eNS_URI,RfcNS_CLASS_NAME_OF_FIELD_KEY,EObject.class.getName());
    }
 else {
      EAttribute attribute=ecoreFactory.createEAttribute();
      attribute.setEType(getEDataType(jcoListMetaData.getType(i)));
      structuralFeature=attribute;
      addAnnotation(structuralFeature,eNS_URI,RfcNS_CLASS_NAME_OF_FIELD_KEY,jcoListMetaData.getClassNameOfField(i));
    }
    structuralFeature.setName(jcoListMetaData.getName(i));
    if (!jcoListMetaData.isOptional(i))     structuralFeature.setLowerBound(1);
    if (jcoListMetaData.getDefault(i) != null)     structuralFeature.setDefaultValueLiteral(jcoListMetaData.getDefault(i));
    addAnnotation(structuralFeature,GenNS_URI,GenNS_DOCUMENTATION_KEY,jcoListMetaData.getDescription(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_DESCRIPTION_KEY,jcoListMetaData.getDescription(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_TYPE_KEY,Integer.toString(jcoListMetaData.getType(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_TYPE_AS_STRING_KEY,jcoListMetaData.getTypeAsString(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_RECORD_TYPE_NAME_KEY,jcoListMetaData.getRecordTypeName(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_LENGTH_KEY,Integer.toString(jcoListMetaData.getLength(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_BYTE_LENGTH_KEY,Integer.toString(jcoListMetaData.getByteLength(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_UNICODE_BYTE_LENGTH_KEY,Integer.toString(jcoListMetaData.getUnicodeByteLength(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_DECIMALS_KEY,Integer.toString(jcoListMetaData.getDecimals(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_DEFAULT_KEY,jcoListMetaData.getDefault(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_RECORD_FIELD_NAME_KEY,jcoListMetaData.getRecordFieldName(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_ABAP_OBJECT_KEY,Boolean.toString(jcoListMetaData.isAbapObject(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_NESTED_TYPE1_STRUCTURE_KEY,Boolean.toString(jcoListMetaData.isNestedType1Structure(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_STRUCTURE_KEY,Boolean.toString(jcoListMetaData.isStructure(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_TABLE_KEY,Boolean.toString(jcoListMetaData.isTable(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_IMPORT_KEY,Boolean.toString(jcoListMetaData.isImport(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_EXPORT_KEY,Boolean.toString(jcoListMetaData.isExport(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_CHANGING_KEY,Boolean.toString(jcoListMetaData.isChanging(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_OPTIONAL_KEY,Boolean.toString(jcoListMetaData.isOptional(i)));
    eClass.getEStructuralFeatures().add(structuralFeature);
  }
}
