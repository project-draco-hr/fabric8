{
  EcoreFactory ecoreFactory=EcoreFactory.eINSTANCE;
  EPackage ePackage=eClass.getEPackage();
  for (int i=0; i < jcoRecordMetaData.getFieldCount(); i++) {
    EStructuralFeature structuralFeature;
    if (jcoRecordMetaData.isStructure(i)) {
      JCoRecordMetaData jcoSubRecordMetaData=jcoRecordMetaData.getRecordMetaData(i);
      EClass structureClass=getStructureClass(ePackage,jcoSubRecordMetaData);
      EReference reference=ecoreFactory.createEReference();
      structuralFeature=reference;
      reference.setEType(structureClass);
      reference.setContainment(true);
      addAnnotation(structuralFeature,eNS_URI,RfcNS_CLASS_NAME_OF_FIELD_KEY,EObject.class.getName());
    }
 else     if (jcoRecordMetaData.isTable(i)) {
      JCoRecordMetaData jcoSubRecordMetaData=jcoRecordMetaData.getRecordMetaData(i);
      EClass tableClass=getTableClass(ePackage,jcoSubRecordMetaData);
      EReference reference=ecoreFactory.createEReference();
      structuralFeature=reference;
      reference.setEType(tableClass);
      reference.setContainment(true);
      addAnnotation(structuralFeature,eNS_URI,RfcNS_CLASS_NAME_OF_FIELD_KEY,EObject.class.getName());
    }
 else {
      EAttribute attribute=ecoreFactory.createEAttribute();
      structuralFeature=attribute;
      attribute.setEType(getEDataType(jcoRecordMetaData.getType(i)));
      addAnnotation(structuralFeature,eNS_URI,RfcNS_CLASS_NAME_OF_FIELD_KEY,jcoRecordMetaData.getClassNameOfField(i));
    }
    structuralFeature.setName(jcoRecordMetaData.getName(i));
    addAnnotation(structuralFeature,GenNS_URI,GenNS_DOCUMENTATION_KEY,jcoRecordMetaData.getDescription(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_DESCRIPTION_KEY,jcoRecordMetaData.getDescription(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_TYPE_KEY,Integer.toString(jcoRecordMetaData.getType(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_TYPE_AS_STRING_KEY,jcoRecordMetaData.getTypeAsString(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_RECORD_TYPE_NAME_KEY,jcoRecordMetaData.getRecordTypeName(i));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_LENGTH_KEY,Integer.toString(jcoRecordMetaData.getLength(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_BYTE_LENGTH_KEY,Integer.toString(jcoRecordMetaData.getByteLength(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_UNICODE_BYTE_LENGTH_KEY,Integer.toString(jcoRecordMetaData.getUnicodeByteLength(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_DECIMALS_KEY,Integer.toString(jcoRecordMetaData.getDecimals(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_ABAP_OBJECT_KEY,Boolean.toString(jcoRecordMetaData.isAbapObject(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_NESTED_TYPE1_STRUCTURE_KEY,Boolean.toString(jcoRecordMetaData.isNestedType1Structure(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_STRUCTURE_KEY,Boolean.toString(jcoRecordMetaData.isStructure(i)));
    addAnnotation(structuralFeature,eNS_URI,RfcNS_IS_TABLE_KEY,Boolean.toString(jcoRecordMetaData.isTable(i)));
    eClass.getEStructuralFeatures().add(structuralFeature);
  }
}
