{
  String imageId=null;
  String hardwareId=null;
  String locationId=null;
  String group=null;
  String instanceType=SMALLEST;
  try {
    String providerName=agentUri.getHost();
    ComputeService computeService=computeServiceMap.get(providerName);
    if (computeService == null) {
      throw new FabricException("Not compute Service found for provider:" + providerName);
    }
    if (agentUri.getQuery() != null) {
      Map<String,String> parameters=parseQuery(agentUri.getQuery());
      if (parameters != null) {
        imageId=parameters.get(IMAGE_ID);
        group=parameters.get(GROUP);
        locationId=parameters.get(LOCATION_ID);
        hardwareId=parameters.get(HARDWARE_ID);
        if (parameters.get(INSTANCE_TYPE) != null) {
          instanceType=parameters.get(INSTANCE_TYPE);
        }
      }
    }
    TemplateBuilder builder=computeService.templateBuilder();
    builder.any();
    if (SMALLEST.equals(instanceType)) {
      builder.smallest();
    }
    if (FASTEST.equals(INSTANCE_TYPE)) {
      builder.fastest();
    }
    if (BIGGEST.equals(instanceType)) {
      builder.biggest();
    }
    if (locationId != null) {
      builder.locationId(locationId);
    }
    if (imageId != null) {
      builder.imageId(imageId);
    }
    if (hardwareId != null) {
      builder.hardwareId(hardwareId);
    }
    Set<? extends NodeMetadata> metadatas=null;
    String script=buildStartupScript(mavenProxy.getAddress(),name,zooKeeperUrl);
    metadatas=computeService.createNodesInGroup(group,1,builder.build());
    if (metadatas != null) {
      for (      NodeMetadata nodeMetadata : metadatas) {
        String id=nodeMetadata.getId();
        computeService.runScriptOnNode(id,script);
      }
    }
  }
 catch (  FabricException e) {
    throw e;
  }
catch (  Exception e) {
    throw new FabricException(e);
  }
}
