{
  System.err.println(executeCommand("fabric:create -n"));
  Set<ContainerProxy> containers=null;
  ServiceProxy<CuratorFramework> curatorProxy=ServiceProxy.createServiceProxy(bundleContext,CuratorFramework.class);
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    containers=ContainerBuilder.create(fabricProxy).withName("feature-camel").withProfiles("feature-camel").assertProvisioningResult().build();
    FabricService fabricService=fabricProxy.getService();
    CuratorFramework curator=curatorProxy.getService();
    assertProvisionedFeature(fabricService,curator,containers,"camel-http","feature-camel","camel-http");
    assertProvisionedFeature(fabricService,curator,containers,"camel-jetty","feature-camel","camel-jetty");
    assertProvisionedFeature(fabricService,curator,containers,"camel-jms","feature-camel","camel-jms");
    assertProvisionedFeature(fabricService,curator,containers,"camel-ftp","feature-camel","camel-ftp");
    assertProvisionedFeature(fabricService,curator,containers,"camel-quartz","feature-camel","camel-quartz");
  }
  finally {
    ContainerBuilder.destroy(containers);
    curatorProxy.close();
    fabricProxy.close();
  }
}
