{
  System.err.println(executeCommand("fabric:create -n"));
  Set<Container> containers=ContainerBuilder.create().withName("feature-camel").withProfiles("feature-camel").assertProvisioningResult().build();
  try {
    ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
    ServiceProxy<CuratorFramework> curatorProxy=ServiceProxy.createServiceProxy(bundleContext,CuratorFramework.class);
    try {
      FabricService fabricService=fabricProxy.getService();
      CuratorFramework curator=curatorProxy.getService();
      assertProvisionedFeature(fabricService,curator,containers,"camel-http","feature-camel","camel-http");
      assertProvisionedFeature(fabricService,curator,containers,"camel-jetty","feature-camel","camel-jetty");
      assertProvisionedFeature(fabricService,curator,containers,"camel-jms","feature-camel","camel-jms");
      assertProvisionedFeature(fabricService,curator,containers,"camel-ftp","feature-camel","camel-ftp");
      assertProvisionedFeature(fabricService,curator,containers,"camel-quartz","feature-camel","camel-quartz");
    }
  finally {
      fabricProxy.close();
      curatorProxy.close();
    }
  }
  finally {
    ContainerBuilder.destroy(containers);
  }
}
