{
  System.err.println(CommandSupport.executeCommand("fabric:create --force --clean -n"));
  ModuleContext moduleContext=RuntimeLocator.getRequiredRuntime().getModuleContext();
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(moduleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    AdminService adminService=ServiceLocator.awaitService(AdminService.class);
    String version=System.getProperty("fabric.version");
    System.out.println(CommandSupport.executeCommand("admin:create --featureURL mvn:io.fabric8/fabric8-karaf/" + version + "/xml/features --feature fabric-git --feature fabric-agent --feature fabric-boot-commands basic_cnt_d"));
    System.out.println(CommandSupport.executeCommand("admin:create --featureURL mvn:io.fabric8/fabric8-karaf/" + version + "/xml/features --feature fabric-git --feature fabric-agent --feature fabric-boot-commands basic_cnt_e"));
    try {
      System.out.println(CommandSupport.executeCommand("admin:start basic_cnt_d"));
      System.out.println(CommandSupport.executeCommand("admin:start basic_cnt_e"));
      ProvisionSupport.instanceStarted(Arrays.asList("basic_cnt_d","basic_cnt_e"),ProvisionSupport.PROVISION_TIMEOUT);
      System.out.println(CommandSupport.executeCommand("admin:list"));
      String joinCommand="fabric:join -f --zookeeper-password " + fabricService.getZookeeperPassword() + " "+ fabricService.getZookeeperUrl();
      String response="";
      for (int i=0; i < 10 && !response.contains("true"); i++) {
        response=CommandSupport.executeCommand("ssh:ssh -l karaf -P karaf -p " + adminService.getInstance("basic_cnt_d").getSshPort() + " localhost "+ WAIT_FOR_JOIN_SERVICE);
        Thread.sleep(1000);
      }
      response="";
      for (int i=0; i < 10 && !response.contains("true"); i++) {
        response=CommandSupport.executeCommand("ssh:ssh -l karaf -P karaf -p " + adminService.getInstance("basic_cnt_e").getSshPort() + " localhost "+ WAIT_FOR_JOIN_SERVICE);
        Thread.sleep(1000);
      }
      System.err.println(CommandSupport.executeCommand("ssh:ssh -l karaf -P karaf -p " + adminService.getInstance("basic_cnt_d").getSshPort() + " localhost "+ joinCommand));
      System.err.println(CommandSupport.executeCommand("ssh:ssh -l karaf -P karaf -p " + adminService.getInstance("basic_cnt_e").getSshPort() + " localhost "+ joinCommand));
      ProvisionSupport.containersExist(Arrays.asList("basic.cntD","basic.cntE"),ProvisionSupport.PROVISION_TIMEOUT);
      Container cntD=fabricService.getContainer("basic_cnt_d");
      Container cntE=fabricService.getContainer("basic_cnt_e");
      ProvisionSupport.containerStatus(Arrays.asList(cntD,cntE),"success",ProvisionSupport.PROVISION_TIMEOUT);
      EnsembleSupport.addToEnsemble(fabricService,cntD,cntE);
      System.out.println(CommandSupport.executeCommand("fabric:container-list"));
      EnsembleSupport.removeFromEnsemble(fabricService,cntD,cntE);
      System.out.println(CommandSupport.executeCommand("fabric:container-list"));
    }
  finally {
      System.out.println(CommandSupport.executeCommand("admin:stop basic_cnt_d"));
      System.out.println(CommandSupport.executeCommand("admin:stop basic_cnt_e"));
    }
  }
  finally {
    fabricProxy.close();
  }
}
