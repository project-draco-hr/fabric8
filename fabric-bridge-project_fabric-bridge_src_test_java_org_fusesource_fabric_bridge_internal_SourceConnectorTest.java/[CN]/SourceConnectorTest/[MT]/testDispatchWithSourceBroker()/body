{
  connector.getOutboundDestinations().setDefaultStagingLocation(false);
  connector.setRemoteBrokerConfig(null);
  connector.afterPropertiesSet();
  connector.start();
  final long startNanos=System.nanoTime();
  for (  String sourceName : TEST_SOURCES) {
    sendMessages(TEST_LOCAL_BROKER_URL,sourceName,TEST_NUM_MESSAGES,null);
  }
  receiveMessages(TEST_LOCAL_BROKER_URL,BridgeDestinationsConfig.DEFAULT_STAGING_QUEUE_NAME,TEST_NUM_MESSAGES * TEST_SOURCES.length,new BaseMatcher<TextMessage>(){
    @Override public boolean matches(    Object message){
      boolean retVal=false;
      try {
        retVal=((TextMessage)message).getStringProperty(BridgeDestinationsConfig.DEFAULT_DESTINATION_NAME_HEADER).matches("source[1-3]");
      }
 catch (      JMSException e) {
        fail(e.getMessage());
      }
      return retVal;
    }
    @Override public void describeTo(    Description description){
      description.appendText("TextMessage containing " + BridgeDestinationsConfig.DEFAULT_DESTINATION_NAME_HEADER + " property");
    }
  }
);
  final long stopNanos=System.nanoTime();
  LOG.info("Test took " + TimeUnit.NANOSECONDS.toMillis(stopNanos - startNanos) + " milliseconds");
}
