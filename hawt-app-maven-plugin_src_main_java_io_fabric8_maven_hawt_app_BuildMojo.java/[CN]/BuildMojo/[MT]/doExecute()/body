{
  DependencyStatusSets results=this.getDependencySets(false,false);
  File libDir=new File(assembly,"lib");
  libDir.mkdirs();
  File binDir=new File(assembly,"bin");
  binDir.mkdirs();
  ArrayList<String> classpath=new ArrayList<String>();
  if (project.getArtifact().getFile() != null) {
    File target=new File(libDir,project.getArtifact().getFile().getName());
    classpath.add(target.getName());
    try {
      FileUtils.copyFile(project.getArtifact().getFile(),target);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Could not copy artifact to lib dir",e);
    }
  }
  for (  Artifact artifact : results.getResolvedDependencies()) {
    File file=artifact.getFile().getAbsoluteFile();
    try {
      File target=new File(libDir,file.getName());
      int dupCounter=1;
      while (classpath.contains(target.getName())) {
        target=new File(libDir,"dup" + dupCounter + "-"+ file.getName());
        dupCounter++;
      }
      classpath.add(target.getName());
      FileUtils.copyFile(artifact.getFile(),target);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Could not copy artifact to lib dir",e);
    }
  }
  try {
    String classpathTxt=StringUtils.join(classpath.iterator(),"\n") + "\n";
    FileUtils.fileWrite(new File(libDir,"classpath"),classpathTxt);
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Could create the classpath file",e);
  }
  HashMap<String,String> interpolations=new HashMap<String,String>();
  interpolations.put("hawtapp.mvn.main.property",javaMainClass != null ? javaMainClass : "");
  File targetRun=new File(binDir,"run.sh");
  copyResource("bin/run.sh",targetRun,interpolations);
  chmodExecutable(targetRun);
  if (source != null && source.exists()) {
    try {
      FileUtils.copyDirectoryStructure(source,assembly);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Could copy the hawt-app resources",e);
    }
  }
  ((TarArchiver)archiver).setCompression(TarArchiver.TarCompressionMethod.gzip);
  archiver.setDestFile(archive);
  archiver.addFileSet(fileSet(assembly).prefixed(archivePrefix).includeExclude(null,new String[]{"bin/*"}).includeEmptyDirs(true));
  archiver.setFileMode(0755);
  archiver.addFileSet(fileSet(assembly).prefixed(archivePrefix).includeExclude(new String[]{"bin/*"},null).includeEmptyDirs(true));
  try {
    archiver.createArchive();
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Could not create the " + archive + " file",e);
  }
  projectHelper.attachArtifact(project,"tar.gz",archiveClassifier,archive);
}
