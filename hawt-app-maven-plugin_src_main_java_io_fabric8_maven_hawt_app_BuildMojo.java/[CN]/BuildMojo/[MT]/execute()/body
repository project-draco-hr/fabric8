{
  File libDir=new File(assembly,"lib");
  libDir.mkdirs();
  File binDir=new File(assembly,"bin");
  binDir.mkdirs();
  ArrayList<String> classpath=new ArrayList<String>();
  ArrayList<Artifact> artifacts=null;
  try {
    artifacts=collectClassPath();
  }
 catch (  DependencyGraphBuilderException e) {
    throw new MojoExecutionException("Could not get classpath",e);
  }
  System.out.println(artifacts);
  if (project.getArtifact().getFile() != null) {
    File target=new File(libDir,project.getArtifact().getFile().getName());
    classpath.add(target.getName());
    try {
      FileUtils.copyFile(project.getArtifact().getFile(),target);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Could not copy artifact to lib dir",e);
    }
  }
  Map artifactMap=project.getArtifactMap();
  for (  Artifact x : artifacts) {
    Artifact artifact=(Artifact)artifactMap.get(ArtifactUtils.versionlessKey(x));
    if (artifact == null || artifact.getFile() == null) {
      continue;
    }
    File file=artifact.getFile().getAbsoluteFile();
    try {
      File target=new File(libDir,file.getName());
      int dupCounter=1;
      while (classpath.contains(target.getName())) {
        target=new File(libDir,"dup" + dupCounter + "-"+ file.getName());
        dupCounter++;
      }
      classpath.add(target.getName());
      FileUtils.copyFile(artifact.getFile(),target);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Could not copy artifact to lib dir",e);
    }
  }
  try {
    String classpathTxt=StringUtils.join(classpath.iterator(),"\n") + "\n";
    FileUtils.fileWrite(new File(libDir,"classpath"),classpathTxt);
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Could create the classpath file",e);
  }
  HashMap<String,String> interpolations=new HashMap<String,String>();
  interpolations.put("hawtapp.mvn.main.property",javaMainClass != null ? javaMainClass : "");
  File targetRun=new File(binDir,"run.sh");
  copyResource("bin/run.sh",targetRun,interpolations);
  chmodExecutable(targetRun);
  if (source != null && source.exists()) {
    try {
      FileUtils.copyDirectoryStructure(source,assembly);
    }
 catch (    IOException e) {
      throw new MojoExecutionException("Could copy the hawt-app resources",e);
    }
  }
  Archiver archiver;
  String archiveExtension;
  if (archive.getName().endsWith(".tar")) {
    archiver=tarArchiver;
    archiveExtension="tar";
  }
 else   if (archive.getName().endsWith(".tar.gz")) {
    ((TarArchiver)tarArchiver).setCompression(TarArchiver.TarCompressionMethod.gzip);
    archiver=tarArchiver;
    archiveExtension="tar.gz";
  }
 else   if (archive.getName().endsWith(".zip")) {
    archiver=zipArchiver;
    archiveExtension="zip";
  }
 else {
    throw new MojoExecutionException("Invalid archive extension.  Should be zip | tar | tar.gz");
  }
  archiver.setDestFile(archive);
  archiver.addFileSet(fileSet(assembly).prefixed(archivePrefix).includeExclude(null,new String[]{"bin/*"}).includeEmptyDirs(true));
  archiver.setFileMode(0755);
  archiver.addFileSet(fileSet(assembly).prefixed(archivePrefix).includeExclude(new String[]{"bin/*"},null).includeEmptyDirs(true));
  try {
    archiver.createArchive();
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Could not create the " + archive + " file",e);
  }
  projectHelper.attachArtifact(project,archiveExtension,archiveClassifier,archive);
}
