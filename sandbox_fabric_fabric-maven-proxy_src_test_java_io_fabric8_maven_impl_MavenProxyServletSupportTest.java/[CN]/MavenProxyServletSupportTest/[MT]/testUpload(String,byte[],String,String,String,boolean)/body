{
  final String old=System.getProperty("karaf.data");
  System.setProperty("karaf.data",new File("target").getCanonicalPath());
  FileUtils.deleteDirectory(new File("target/tmp"));
  Server server=new Server(0);
  server.setHandler(new AbstractHandler(){
    @Override public void handle(    String target,    Request baseRequest,    HttpServletRequest request,    HttpServletResponse response) throws IOException, ServletException {
      response.setStatus(HttpServletResponse.SC_NO_CONTENT);
    }
  }
);
  server.start();
  try {
    int localPort=server.getConnectors()[0].getLocalPort();
    List<String> remoteRepos=Arrays.asList("http://relevant.not/maven2@id=central");
    RuntimeProperties props=new MockRuntimeProperties();
    MavenUploadProxyServlet servlet=new MavenUploadProxyServlet(props,"target/tmp",remoteRepos,false,"always","warn","http","localhost",localPort,"fuse","fuse",null,projectDeployer);
    HttpServletRequest request=EasyMock.createMock(HttpServletRequest.class);
    EasyMock.expect(request.getPathInfo()).andReturn(path);
    EasyMock.expect(request.getInputStream()).andReturn(new ServletInputStream(){
      private int i;
      @Override public int read() throws IOException {
        if (i >= contents.length) {
          return -1;
        }
        return (contents[i++] & 0xFF);
      }
    }
);
    EasyMock.expect(request.getHeader("X-Location")).andReturn(location);
    EasyMock.expect(request.getParameter("profile")).andReturn(profile);
    EasyMock.expect(request.getParameter("version")).andReturn(version);
    final Map<String,String> headers=new HashMap<>();
    HttpServletResponse rm=EasyMock.createMock(HttpServletResponse.class);
    HttpServletResponse response=new HttpServletResponseWrapper(rm){
      @Override public void addHeader(      String name,      String value){
        headers.put(name,value);
      }
    }
;
    response.setStatus(EasyMock.anyInt());
    EasyMock.expectLastCall().anyTimes();
    response.setContentLength(EasyMock.anyInt());
    EasyMock.expectLastCall().anyTimes();
    response.setContentType((String)EasyMock.anyObject());
    EasyMock.expectLastCall().anyTimes();
    response.setDateHeader((String)EasyMock.anyObject(),EasyMock.anyLong());
    EasyMock.expectLastCall().anyTimes();
    response.setHeader((String)EasyMock.anyObject(),(String)EasyMock.anyObject());
    EasyMock.expectLastCall().anyTimes();
    EasyMock.replay(request,rm);
    servlet.start();
    servlet.doPut(request,response);
    EasyMock.verify(request,rm);
    Assert.assertEquals(hasLocationHeader,headers.containsKey("X-Location"));
    return headers;
  }
  finally {
    server.stop();
    if (old != null) {
      System.setProperty("karaf.data",old);
    }
  }
}
