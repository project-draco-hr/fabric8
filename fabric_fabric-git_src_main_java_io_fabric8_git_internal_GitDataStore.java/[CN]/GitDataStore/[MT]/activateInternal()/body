{
  try {
    super.activateInternal();
    GitService optionalService=gitService.getOptional();
    if (configuredUrl != null) {
      gitListener.onRemoteUrlChanged(configuredUrl);
      remoteUrl=configuredUrl;
    }
 else     if (optionalService != null) {
      optionalService.addGitListener(gitListener);
      remoteUrl=optionalService.getRemoteUrl();
      gitListener.onRemoteUrlChanged(remoteUrl);
    }
    forceGetVersions();
    LOG.info("starting to pull from remote repository every " + gitPullPeriod + " millis");
    threadPool.scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        LOG.debug("Performing timed pull");
        pull();
        push();
      }
    }
,gitPullPeriod,gitPullPeriod,TimeUnit.MILLISECONDS);
  }
 catch (  Exception ex) {
    throw new FabricException("Failed to start GitDataStore:",ex);
  }
}
