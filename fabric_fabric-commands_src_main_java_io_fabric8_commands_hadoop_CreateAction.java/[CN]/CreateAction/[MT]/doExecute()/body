{
  Container[] containers=fabricService.getContainers();
  if (nameNode == null || dataNodes.isEmpty()) {
    throw new IllegalArgumentException("The name node and at least one data node must be specified");
  }
  if (!taskTrackers.isEmpty() && jobTracker == null) {
    throw new IllegalArgumentException("Can not specify task trackers if no job tracker is specified");
  }
  if (taskTrackers.isEmpty() && jobTracker != null) {
    throw new IllegalArgumentException("At least one task tracker node must be specified");
  }
  if (!createChildren) {
    if (findContainer(containers,nameNode) == null) {
      throw new IllegalStateException("Container " + nameNode + " does not exists");
    }
    if (secondaryNameNode != null && findContainer(containers,secondaryNameNode) == null) {
      throw new IllegalStateException("Container " + secondaryNameNode + " does not exists");
    }
    for (    String n : dataNodes) {
      if (findContainer(containers,n) == null) {
        throw new IllegalStateException("Container " + n + " does not exists");
      }
    }
    if (jobTracker != null && findContainer(containers,jobTracker) == null) {
      throw new IllegalStateException("Container " + jobTracker + " does not exists");
    }
    for (    String n : taskTrackers) {
      if (findContainer(containers,n) == null) {
        throw new IllegalStateException("Container " + n + " does not exists");
      }
    }
  }
  ProfileService profileService=fabricService.adapt(ProfileService.class);
  for (  String p : Arrays.asList("hadoop-" + name,"hadoop-" + name + "-namenode","hadoop-" + name + "-secondary-namenode","hadoop-" + name + "-datanode","hadoop-" + name + "-job-tracker","hadoop-" + name + "-task-tracker","insight-hdfs-" + name)) {
    Profile profile=null;
    try {
      profile=fabricService.getDefaultVersion().getProfile(p);
    }
 catch (    Throwable t) {
    }
    if (profile != null) {
      String versionId=profile.getVersion();
      String profileId=profile.getId();
      if (force) {
        profileService.deleteProfile(fabricService,versionId,profileId,force);
      }
 else {
        throw new IllegalStateException("Profile " + profileId + " already exists. Use --force to recreate the profiles.");
      }
    }
  }
  Version version=fabricService.getDefaultVersion();
  Profile hadoop=version.getRequiredProfile("hadoop");
  Map<String,Map<String,String>> configs;
  String versionId=version.getId();
  ProfileBuilder builder=ProfileBuilder.Factory.create(versionId,"hadoop-" + name);
  builder.addParent(hadoop);
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.hadoop",new HashMap<String,String>());
  configs.get("io.fabric8.hadoop").put("fs.default.name","hdfs://${zk:" + nameNode + "/ip}:9000");
  configs.get("io.fabric8.hadoop").put("dfs.http.address","hdfs://${zk:" + nameNode + "/ip}:9002");
  Profile cluster=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  builder=ProfileBuilder.Factory.create(versionId,"hadoop-" + name + "-namenode");
  builder.addParent(cluster);
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.hadoop",new HashMap<String,String>());
  configs.get("io.fabric8.hadoop").put("nameNode","true");
  Profile nameNodeProfile=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  builder=ProfileBuilder.Factory.create(versionId,"hadoop-" + name + "-secondary-namenode");
  builder.addParent(cluster);
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.hadoop",new HashMap<String,String>());
  configs.get("io.fabric8.hadoop").put("secondaryNameNode","true");
  Profile secondaryNameNodeProfile=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  builder=ProfileBuilder.Factory.create(versionId,"hadoop-" + name + "-datanode");
  builder.addParent(cluster);
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.hadoop",new HashMap<String,String>());
  configs.get("io.fabric8.hadoop").put("dataNode","true");
  Profile dataNodeProfile=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  builder=ProfileBuilder.Factory.create(versionId,"hadoop-" + name + "-job-tracker");
  builder.addParent(cluster);
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.hadoop",new HashMap<String,String>());
  configs.get("io.fabric8.hadoop").put("jobTracker","true");
  Profile jobTrackerProfile=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  builder=ProfileBuilder.Factory.create(versionId,"hadoop-" + name + "-task-tracker");
  builder.addParent(cluster);
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.hadoop",new HashMap<String,String>());
  configs.get("io.fabric8.hadoop").put("taskTracker","true");
  Profile taskTrackerProfile=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  builder=ProfileBuilder.Factory.create(versionId,"insight-hdfs-" + name);
  builder.addParent(version.getRequiredProfile("insight-hdfs"));
  configs=new HashMap<String,Map<String,String>>();
  configs.put("io.fabric8.insight.elasticsearch-default",new HashMap<String,String>());
  configs.get("io.fabric8.insight.elasticsearch-default").put("gateway.hdfs.uri","hdfs://${zk:" + nameNode + "/ip}:9000");
  Profile insightProfile=profileService.createProfile(builder.setConfigurations(configs).getProfile());
  Container nameNodeContainer=findContainer(containers,nameNode);
  if (nameNodeContainer == null && createChildren) {
    nameNodeContainer=createChild(nameNode);
  }
  addProfile(nameNodeContainer,nameNodeProfile);
  if (secondaryNameNode != null) {
    Container secondaryNameNodeContainer=findContainer(containers,secondaryNameNode);
    if (secondaryNameNodeContainer == null && createChildren) {
      secondaryNameNodeContainer=createChild(secondaryNameNode);
    }
    addProfile(secondaryNameNodeContainer,secondaryNameNodeProfile);
  }
  for (  String n : dataNodes) {
    Container cont=findContainer(containers,n);
    if (cont == null) {
      cont=createChild(n);
    }
    addProfile(cont,dataNodeProfile);
  }
  if (jobTracker != null) {
    Container jobTrackerContainer=findContainer(containers,jobTracker);
    if (jobTrackerContainer == null && createChildren) {
      jobTrackerContainer=createChild(jobTracker);
    }
    addProfile(jobTrackerContainer,jobTrackerProfile);
  }
  for (  String n : taskTrackers) {
    Container cont=findContainer(containers,n);
    if (cont == null) {
      cont=createChild(n);
    }
    addProfile(cont,taskTrackerProfile);
  }
  return null;
}
