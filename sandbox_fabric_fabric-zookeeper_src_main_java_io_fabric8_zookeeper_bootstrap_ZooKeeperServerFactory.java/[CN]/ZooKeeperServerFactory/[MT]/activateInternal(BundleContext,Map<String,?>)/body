{
  LOGGER.info("Creating zookeeper server with: {}",configuration);
  Properties props=new Properties();
  for (  Entry<String,?> entry : configuration.entrySet()) {
    props.put(entry.getKey(),entry.getValue());
  }
  String dataDir=props.getProperty("dataDir");
  if (dataDir != null && !Paths.get(dataDir).isAbsolute()) {
    dataDir=runtimeProperties.get().getDataPath().resolve(dataDir).toFile().getAbsolutePath();
    props.setProperty("dataDir",dataDir);
  }
  props.put("clientPortAddress",bootstrapConfiguration.get().getBindAddress());
  String serverId=(String)props.get("server.id");
  if (serverId != null) {
    props.remove("server.id");
    File myId=new File(dataDir,"myid");
    if (myId.exists() && !myId.delete()) {
      throw new IOException("Failed to delete " + myId);
    }
    if (myId.getParentFile() == null || (!myId.getParentFile().exists() && !myId.getParentFile().mkdirs())) {
      throw new IOException("Failed to create " + myId.getParent());
    }
    FileOutputStream fos=new FileOutputStream(myId);
    try {
      fos.write((serverId + "\n").getBytes());
    }
  finally {
      fos.close();
    }
  }
  QuorumPeerConfig peerConfig=getPeerConfig(props);
  if (!peerConfig.getServers().isEmpty()) {
    NIOServerCnxnFactory cnxnFactory=new NIOServerCnxnFactory();
    cnxnFactory.configure(peerConfig.getClientPortAddress(),peerConfig.getMaxClientCnxns());
    QuorumPeer quorumPeer=new QuorumPeer();
    quorumPeer.setClientPortAddress(peerConfig.getClientPortAddress());
    quorumPeer.setTxnFactory(new FileTxnSnapLog(new File(peerConfig.getDataLogDir()),new File(peerConfig.getDataDir())));
    quorumPeer.setQuorumPeers(peerConfig.getServers());
    quorumPeer.setElectionType(peerConfig.getElectionAlg());
    quorumPeer.setMyid(peerConfig.getServerId());
    quorumPeer.setTickTime(peerConfig.getTickTime());
    quorumPeer.setMinSessionTimeout(peerConfig.getMinSessionTimeout());
    quorumPeer.setMaxSessionTimeout(peerConfig.getMaxSessionTimeout());
    quorumPeer.setInitLimit(peerConfig.getInitLimit());
    quorumPeer.setSyncLimit(peerConfig.getSyncLimit());
    quorumPeer.setQuorumVerifier(peerConfig.getQuorumVerifier());
    quorumPeer.setCnxnFactory(cnxnFactory);
    quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));
    quorumPeer.setLearnerType(peerConfig.getPeerType());
    try {
      LOGGER.debug("Starting quorum peer \"%s\" on address %s",quorumPeer.getMyid(),peerConfig.getClientPortAddress());
      quorumPeer.start();
      LOGGER.debug("Started quorum peer \"%s\"",quorumPeer.getMyid());
    }
 catch (    Exception e) {
      LOGGER.warn(String.format("Failed to start quorum peer \"%s\", reason : %s ",quorumPeer.getMyid(),e.getMessage()));
      quorumPeer.shutdown();
      throw e;
    }
    ClusteredServer server=new ClusteredServer(quorumPeer);
    registration=context.registerService(QuorumStats.Provider.class,server,null);
    return server;
  }
 else {
    ServerConfig serverConfig=getServerConfig(peerConfig);
    ZooKeeperServer zkServer=new ZooKeeperServer();
    FileTxnSnapLog ftxn=new FileTxnSnapLog(new File(serverConfig.getDataLogDir()),new File(serverConfig.getDataDir()));
    zkServer.setTxnLogFactory(ftxn);
    zkServer.setTickTime(serverConfig.getTickTime());
    zkServer.setMinSessionTimeout(serverConfig.getMinSessionTimeout());
    zkServer.setMaxSessionTimeout(serverConfig.getMaxSessionTimeout());
    NIOServerCnxnFactory cnxnFactory=new NIOServerCnxnFactory(){
      protected void configureSaslLogin() throws IOException {
      }
    }
;
    cnxnFactory.configure(serverConfig.getClientPortAddress(),serverConfig.getMaxClientCnxns());
    try {
      LOGGER.debug("Starting ZooKeeper server on address %s",peerConfig.getClientPortAddress());
      cnxnFactory.startup(zkServer);
      LOGGER.debug("Started ZooKeeper server");
    }
 catch (    Exception e) {
      LOGGER.warn(String.format("Failed to start ZooKeeper server, reason : %s",e));
      cnxnFactory.shutdown();
      throw e;
    }
    SimpleServer server=new SimpleServer(zkServer,cnxnFactory);
    registration=context.registerService(ServerStats.Provider.class,server,null);
    return server;
  }
}
