{
  StringBuilder sb=new StringBuilder();
  sb.append("#!/bin/bash").append("\n");
  sb.append(RUN_FUNCTION).append("\n");
  sb.append(DOWNLOAD_FUNCTION).append("\n");
  sb.append(MAVEN_DOWNLOAD_FUNCTION).append("\n");
  sb.append(UPDATE_PKGS).append("\n");
  sb.append(INSTALL_CURL).append("\n");
  sb.append(INSTALL_JDK).append("\n");
  sb.append(VALIDATE_REQUIREMENTS).append("\n");
  sb.append(EXIT_IF_NOT_EXISTS).append("\n");
  sb.append(COPY_NODE_METADATA).append("\n");
  sb.append(KARAF_CHECK).append("\n");
  sb.append(REPLACE_IN_FILE).append("\n");
  sb.append("run mkdir -p ~/containers/ ").append("\n");
  sb.append("run cd ~/containers/ ").append("\n");
  sb.append("run mkdir -p ").append(options.getName()).append("\n");
  sb.append("run cd ").append(options.getName()).append("\n");
  if (options.isAdminAccess()) {
    sb.append("update-pkgs").append("\n");
    sb.append("install_openjdk").append("\n");
    sb.append("install_curl").append("\n");
  }
  sb.append("validate_requirements").append("\n");
  extractTargzIntoDirectory(sb,options.getProxyUri(),"org.fusesource.fabric","fuse-fabric",FabricConstants.FABRIC_VERSION);
  sb.append("run cd `").append(FIRST_FABRIC_DIRECTORY).append("`\n");
  List<String> lines=new ArrayList<String>();
  lines.add(ZkDefs.GLOBAL_RESOLVER_PROPERTY + "=" + options.getResolver());
  appendFile(sb,"etc/system.properties",lines);
  replaceLineInFile(sb,"etc/system.properties","karaf.name=root","karaf.name=" + options.getName());
  replaceLineInFile(sb,"etc/org.apache.karaf.shell.cfg","sshPort=8101","sshPort=" + DEFAULT_SSH_PORT);
  appendFile(sb,"etc/system.properties",Arrays.asList("\n"));
  for (  Map.Entry<String,Properties> entry : options.getSystemProperties().entrySet()) {
    Properties sysprops=entry.getValue();
    for (    Object type : sysprops.keySet()) {
      Object value=sysprops.get(type);
      appendFile(sb,"etc/system.properties",Arrays.asList(type + "=" + value));
    }
  }
  if (options.getPreferredAddress() != null) {
    appendFile(sb,"etc/system.properties",Arrays.asList(HostUtils.PREFERED_ADDRESS_PROPERTY_NAME + "=" + options.getPreferredAddress()));
  }
  if (options.isEnsembleServer()) {
    appendFile(sb,"etc/system.properties",Arrays.asList(ZooKeeperClusterService.ENSEMBLE_AUTOSTART + "=true"));
    appendFile(sb,"etc/system.properties",Arrays.asList(ZooKeeperClusterService.PROFILES_AUTOIMPORT_PATH + "=${karaf.home}/fabric/import/"));
  }
 else   if (options.getZookeeperUrl() != null) {
    appendFile(sb,"etc/system.properties",Arrays.asList("zookeeper.url = " + options.getZookeeperUrl()));
  }
  if (options.getJvmOpts() != null && !options.getJvmOpts().isEmpty()) {
    sb.append("run export JAVA_OPTS=").append(options.getJvmOpts()).append("\n");
  }
  appendToLineInFile(sb,"etc/org.apache.karaf.features.cfg","featuresBoot=","fabric-agent,");
  if (options.getProxyUri() != null) {
    appendToLineInFile(sb,"etc/org.ops4j.pax.url.mvn.cfg","repositories=",options.getProxyUri().toString() + ",");
  }
  if (options.isEnsembleServer()) {
    CreateContainerMetadata metadata=options.getMetadataMap().get(options.getName());
    if (metadata != null) {
      byte[] metadataPayload=toBytes(metadata);
      if (metadataPayload != null && metadataPayload.length > 0) {
        sb.append("copy_node_metadata ").append(options.getName()).append(" ").append(new String(Base64Encoder.encode(metadataPayload))).append("\n");
      }
    }
  }
  sb.append("run nohup bin/start").append("\n");
  sb.append("karaf_check `pwd`").append("\n");
  return sb.toString();
}
