{
  StringBuilder sb=new StringBuilder();
  sb.append("[ ");
  for (  Container container : containers) {
    sb.append(container.getId()).append(" ");
  }
  sb.append("]");
  System.out.println("Testing profile:" + profileName + " on container:"+ sb.toString()+ " by adding feature:"+ featureNames);
  FabricService fabricService=getFabricService();
  Version version=fabricService.getDefaultVersion();
  Profile defaultProfile=version.getProfile("default");
  Profile targetProfile=version.getProfile(profileName);
  for (  Container container : containers) {
    container.setProfiles(new Profile[]{defaultProfile});
  }
  Provision.containerStatus(containers,PROVISION_TIMEOUT);
  for (  String featureName : featureNames.split(" ")) {
    System.out.println(executeCommand("fabric:profile-edit --features " + featureName + " "+ targetProfile.getId()));
  }
  for (  Container container : containers) {
    if (!defaultProfile.configurationEquals(targetProfile)) {
      setData(getCurator(),ZkPath.CONTAINER_PROVISION_RESULT.getPath(container.getId()),"switching profile");
    }
    container.setProfiles(new Profile[]{targetProfile});
  }
  Provision.containerStatus(containers,PROVISION_TIMEOUT);
  System.out.println(executeCommand("fabric:profile-display " + profileName));
  System.out.println(executeCommand("fabric:container-list"));
  for (  Container container : containers) {
    for (    String symbolicName : expectedSymbolicNames.split(" ")) {
      System.out.println(executeCommand("container-connect -u admin -p admin " + container.getId() + " osgi:list -s -t 0"));
      int i=0;
      String bundles=null;
      while (i < maxTry) {
        bundles=executeCommand("container-connect -u admin -p admin " + container.getId() + " osgi:list -s -t 0 | grep "+ symbolicName);
        System.out.flush();
        if (bundles != null) {
          i=Integer.MAX_VALUE;
        }
 else {
          System.out.println("Waiting for container to provision so we sleep for 3 seconds at attempt #" + i);
          i++;
          Thread.sleep(3000);
        }
      }
      Assert.assertNotNull(bundles);
      Assert.assertTrue("Expected to find symbolic name:" + symbolicName,bundles.contains(symbolicName));
      System.out.println(bundles);
    }
  }
  for (  Container container : containers) {
    if (!defaultProfile.configurationEquals(targetProfile)) {
      setData(getCurator(),ZkPath.CONTAINER_PROVISION_RESULT.getPath(container.getId()),"switching profile");
    }
    container.setProfiles(new Profile[]{defaultProfile});
  }
  Provision.containerStatus(containers,PROVISION_TIMEOUT);
  for (  String featureName : featureNames.split(" ")) {
    System.out.println(executeCommand("fabric:profile-edit --delete --features " + featureName + " "+ targetProfile.getId()));
  }
}
