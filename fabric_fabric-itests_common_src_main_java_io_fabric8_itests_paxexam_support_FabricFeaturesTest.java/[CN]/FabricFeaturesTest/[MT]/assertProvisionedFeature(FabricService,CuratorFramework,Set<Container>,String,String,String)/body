{
  StringBuilder sb=new StringBuilder();
  sb.append("[ ");
  for (  Container container : containers) {
    sb.append(container.getId()).append(" ");
  }
  sb.append("]");
  System.out.println("Testing profile:" + profileName + " on container:"+ sb.toString()+ " by adding feature:"+ featureNames);
  Version version=fabricService.getDefaultVersion();
  Profile defaultProfile=version.getProfile("default");
  Profile targetProfile=version.getProfile(profileName);
  for (  Container container : containers) {
    container.setProfiles(new Profile[]{defaultProfile});
  }
  Provision.containerStatus(containers,PROVISION_TIMEOUT);
  for (  String featureName : featureNames.split(" ")) {
    System.out.println(executeCommand("fabric:profile-edit --features " + featureName + " "+ targetProfile.getId()));
  }
  System.out.println(executeCommand("fabric:profile-display " + profileName));
  for (  Container container : containers) {
    setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(container.getId()),"switching profile");
    container.setProfiles(new Profile[]{targetProfile});
  }
  Provision.containerStatus(containers,PROVISION_TIMEOUT);
  System.out.println(executeCommand("fabric:container-list"));
  Assert.assertTrue(Provision.waitForCondition(containers,new ContainerCondition(){
    @Override public Boolean checkConditionOnContainer(    Container c){
      for (      String symbolicName : expectedSymbolicNames.split(" ")) {
        String bundles=executeCommand("container-connect -u admin -p admin " + c.getId() + " osgi:list -s -t 0 | grep "+ symbolicName);
        if (bundles != null) {
          return bundles.contains(symbolicName);
        }
      }
      return false;
    }
  }
,PROVISION_TIMEOUT));
  for (  Container container : containers) {
    if (!defaultProfile.configurationEquals(targetProfile)) {
      setData(curator,ZkPath.CONTAINER_PROVISION_RESULT.getPath(container.getId()),"switching profile");
    }
    container.setProfiles(new Profile[]{defaultProfile});
  }
  Provision.containerStatus(containers,PROVISION_TIMEOUT);
  for (  String featureName : featureNames.split(" ")) {
    System.out.println(executeCommand("fabric:profile-edit --delete --features " + featureName + " "+ targetProfile.getId()));
  }
}
