{
  System.out.println(executeCommand("fabric:create -n --wait-for-provisioning"));
  ServiceProxy<FabricService> fabricProxy=ServiceProxy.createServiceProxy(bundleContext,FabricService.class);
  try {
    FabricService fabricService=fabricProxy.getService();
    Set<ContainerProxy> containers=ContainerBuilder.create(fabricProxy).withName("feature-camel").withProfiles("feature-camel").assertProvisioningResult().build();
    try {
      CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
      assertProvisionedFeature(fabricService,curator,containers,"camel-http","feature-camel","camel-http");
      assertProvisionedFeature(fabricService,curator,containers,"camel-jetty","feature-camel","camel-jetty");
      assertProvisionedFeature(fabricService,curator,containers,"camel-jms","feature-camel","camel-jms");
      assertProvisionedFeature(fabricService,curator,containers,"camel-ftp","feature-camel","camel-ftp");
      assertProvisionedFeature(fabricService,curator,containers,"camel-quartz","feature-camel","camel-quartz");
    }
  finally {
      ContainerBuilder.destroy(containers);
    }
  }
  finally {
    fabricProxy.close();
  }
}
