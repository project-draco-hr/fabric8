{
  final Set<CreateJCloudsContainerMetadata> result=new LinkedHashSet<CreateJCloudsContainerMetadata>();
  ComputeService computeService=computeServiceMap.get(options.getProviderName());
  if (computeService == null) {
    Iterable<? extends Module> modules=ImmutableSet.of();
    Properties props=new Properties();
    props.put("provider",options.getProviderName());
    props.put("identity",options.getIdentity());
    props.put("credential",options.getCredential());
    if (!Strings.isNullOrEmpty(options.getOwner()) && options.getProviderName().equals("aws-ec2")) {
      props.put("jclouds.ec2.ami-owners",options.getOwner());
    }
    RestContextFactory restFactory=new RestContextFactory();
    ComputeServiceContext context=new ComputeServiceContextFactory(restFactory).createContext(options.getProviderName(),options.getIdentity(),options.getCredential(),modules,props);
    computeService=context.getComputeService();
  }
  TemplateBuilder builder=computeService.templateBuilder();
  builder.any();
switch (options.getInstanceType()) {
case Smallest:
    builder.smallest();
  break;
case Biggest:
builder.biggest();
break;
case Fastest:
builder.fastest();
}
if (options.getLocationId() != null) {
builder.locationId(options.getLocationId());
}
if (options.getImageId() != null) {
builder.imageId(options.getImageId());
}
if (options.getHardwareId() != null) {
builder.hardwareId(options.getHardwareId());
}
Set<? extends NodeMetadata> metadatas=null;
metadatas=computeService.createNodesInGroup(options.getGroup(),options.getNumber(),builder.build());
Thread.sleep(5000);
int suffix=1;
StringBuilder buffer=new StringBuilder();
boolean first=true;
if (metadatas != null) {
for (NodeMetadata nodeMetadata : metadatas) {
Credentials credentials=null;
if (options.getUser() != null) {
credentials=new Credentials(options.getUser(),nodeMetadata.getCredentials().credential);
}
 else {
credentials=nodeMetadata.getCredentials();
}
String id=nodeMetadata.getId();
Set<String> publicAddresses=nodeMetadata.getPublicAddresses();
String containerName=options.getName();
if (options.getNumber() > 1) {
containerName+=suffix++;
}
CreateJCloudsContainerMetadata jCloudsContainerMetadata=new CreateJCloudsContainerMetadata();
jCloudsContainerMetadata.setNodeId(nodeMetadata.getId());
jCloudsContainerMetadata.setContainerName(containerName);
jCloudsContainerMetadata.setPublicAddresses(nodeMetadata.getPublicAddresses());
jCloudsContainerMetadata.setHostname(nodeMetadata.getHostname());
try {
String script=buildStartupScript(options.name(containerName));
if (credentials != null) {
computeService.runScriptOnNode(id,script,RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));
}
 else {
computeService.runScriptOnNode(id,script);
}
}
 catch (Throwable t) {
jCloudsContainerMetadata.setFailure(t);
}
result.add(jCloudsContainerMetadata);
}
}
return result;
}
