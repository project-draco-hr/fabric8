{
  final Set<CreateJCloudsContainerMetadata> result=new LinkedHashSet<CreateJCloudsContainerMetadata>();
  try {
    options.getCreationStateListener().onStateChange("Looking up for compute service.");
    ComputeService computeService=getOrCreateComputeService(options);
    if (computeService == null) {
      throw new IllegalStateException("Compute service could not be found or created.");
    }
    TemplateBuilder builder=computeService.templateBuilder();
    builder.any();
switch (options.getInstanceType()) {
case Smallest:
      builder.smallest();
    break;
case Biggest:
  builder.biggest();
break;
case Fastest:
builder.fastest();
break;
default :
builder.fastest();
}
StringBuilder overviewBuilder=new StringBuilder();
overviewBuilder.append(String.format("Creating %s nodes in the cloud. Using",options.getNumber()));
if (!Strings.isNullOrEmpty(options.getImageId())) {
overviewBuilder.append(" image id: ").append(options.getImageId());
builder.imageId(options.getImageId());
}
 else if (!Strings.isNullOrEmpty(options.getOsFamily())) {
overviewBuilder.append(" operating system: ").append(options.getOsFamily());
builder.osFamily(OsFamily.fromValue(options.getOsFamily()));
if (!Strings.isNullOrEmpty(options.getOsVersion())) {
overviewBuilder.append(" and version: ").append(options.getOsVersion());
builder.osVersionMatches(options.getOsVersion());
}
}
 else {
throw new IllegalArgumentException("Required Image id or Operation System and version predicates.");
}
overviewBuilder.append(".");
if (!Strings.isNullOrEmpty(options.getLocationId())) {
overviewBuilder.append(" On location: ").append(options.getLocationId()).append(".");
builder.locationId(options.getLocationId());
}
if (!Strings.isNullOrEmpty(options.getHardwareId())) {
builder.hardwareId(options.getHardwareId());
}
AdminAccess.Builder adminAccess=AdminAccess.builder();
TemplateOptions templateOptions=computeService.templateOptions();
applyProviderSpecificOptions(templateOptions,options);
if (options.isAdminAccess()) {
if (!Strings.isNullOrEmpty(options.getPublicKeyFile())) {
File publicKey=new File(options.getPublicKeyFile());
if (publicKey.exists()) {
adminAccess.adminPublicKey(publicKey);
}
 else {
templateOptions.runScript(AdminAccess.standard());
LOGGER.warn("Public key has been specified file: {} files cannot be found. Ignoring.",publicKey.getAbsolutePath());
}
}
if (!Strings.isNullOrEmpty(options.getUser())) {
adminAccess.adminUsername(options.getUser());
}
templateOptions.runScript(adminAccess.build());
}
builder=builder.options(templateOptions);
Set<? extends NodeMetadata> metadatas=null;
overviewBuilder.append(" It may take a while ...");
options.getCreationStateListener().onStateChange(overviewBuilder.toString());
metadatas=computeService.createNodesInGroup(options.getGroup(),options.getNumber(),builder.build());
if (metadatas != null) {
for (NodeMetadata metadata : metadatas) {
options.getCreationStateListener().onStateChange(String.format("Node %s has been created.",metadata.getName()));
}
}
Thread.sleep(5000);
int suffix=1;
if (metadatas != null) {
String originalName=new String(options.getName());
CountDownLatch countDownLatch=new CountDownLatch(options.getNumber());
for (NodeMetadata nodeMetadata : metadatas) {
String containerName;
if (options.getNumber() > 1) {
containerName=originalName + (suffix++);
}
 else {
containerName=originalName;
}
CloudContainerInstallationTask installationTask=new CloudContainerInstallationTask(containerName,nodeMetadata,options,computeService,firewallManagerFactory,templateOptions,result,countDownLatch);
executorService.execute(installationTask);
}
countDownLatch.await(10,TimeUnit.MINUTES);
}
}
 catch (Throwable t) {
if (options != null && options.getNumber() > 0) {
for (int i=result.size(); i < options.getNumber(); i++) {
CreateJCloudsContainerMetadata failureMetdata=new CreateJCloudsContainerMetadata();
failureMetdata.setFailure(t);
result.add(failureMetdata);
}
}
}
return result;
}
