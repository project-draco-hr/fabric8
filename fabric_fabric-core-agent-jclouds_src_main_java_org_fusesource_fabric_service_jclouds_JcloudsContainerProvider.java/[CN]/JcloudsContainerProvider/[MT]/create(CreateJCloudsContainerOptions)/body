{
  final Set<CreateJCloudsContainerMetadata> result=new LinkedHashSet<CreateJCloudsContainerMetadata>();
  ComputeService computeService=getOrCreateComputeService(options);
  TemplateBuilder builder=computeService.templateBuilder();
  builder.any();
switch (options.getInstanceType()) {
case Smallest:
    builder.smallest();
  break;
case Biggest:
builder.biggest();
break;
case Fastest:
builder.fastest();
}
if (!Strings.isNullOrEmpty(options.getImageId())) {
builder.imageId(options.getImageId());
}
 else if (!Strings.isNullOrEmpty(options.getOsFamily()) && !Strings.isNullOrEmpty(options.getOsFamily())) {
builder.osFamily(OsFamily.fromValue(options.getOsFamily()));
builder.osVersionMatches(options.getOsVersion());
}
if (!Strings.isNullOrEmpty(options.getLocationId())) {
builder.locationId(options.getLocationId());
}
if (!Strings.isNullOrEmpty(options.getHardwareId())) {
builder.hardwareId(options.getHardwareId());
}
AdminAccess.Builder adminAccess=AdminAccess.builder();
TemplateOptions templateOptions=computeService.templateOptions();
if (!Strings.isNullOrEmpty(options.getPublicKeyFile())) {
File publicKey=new File(options.getPublicKeyFile());
if (publicKey.exists()) {
adminAccess.adminPublicKey(publicKey);
}
 else {
templateOptions.runScript(AdminAccess.standard());
LOGGER.warn("Public key has been specified file: {} files cannot be found. Ignoring.",publicKey.getAbsolutePath());
}
}
if (!Strings.isNullOrEmpty(options.getUser())) {
adminAccess.adminUsername(options.getUser());
}
templateOptions.runScript(adminAccess.build());
builder.options(templateOptions);
Set<? extends NodeMetadata> metadatas=null;
metadatas=computeService.createNodesInGroup(options.getGroup(),options.getNumber(),builder.build());
Thread.sleep(5000);
int suffix=1;
if (metadatas != null) {
String originalName=new String(options.getName());
for (NodeMetadata nodeMetadata : metadatas) {
try {
String source=getOriginatingIp();
Rule jmxRule=Rule.create().source(source).destination(nodeMetadata).ports(4444,1099);
Rule sshRule=Rule.create().source(source).destination(nodeMetadata).port(8101);
Rule httpRule=Rule.create().source(source).destination(nodeMetadata).port(8181);
Rule zookeeperRule=Rule.create().source("0.0.0.0/0").destination(nodeMetadata).port(2181);
FirewallManager firewallManager=firewallManagerFactory.getFirewallManager(computeService);
firewallManager.addRules(jmxRule,sshRule,httpRule,zookeeperRule);
}
 catch (FirewallNotSupportedOnProviderException e) {
LOGGER.warn("Firewall manager not supported. Firewall will have to be manually configured.");
}
catch (IOException e) {
LOGGER.warn("Could not lookup originating ip. Firewall will have to be manually configured.",e);
}
LoginCredentials credentials=nodeMetadata.getCredentials();
if (!Strings.isNullOrEmpty(options.getUser()) && credentials != null) {
credentials=credentials.toBuilder().user(options.getUser()).build();
}
 else {
credentials=nodeMetadata.getCredentials();
}
String id=nodeMetadata.getId();
Set<String> publicAddresses=nodeMetadata.getPublicAddresses();
String containerName;
if (options.getNumber() > 1) {
containerName=originalName + (suffix++);
}
 else {
containerName=originalName;
}
CreateJCloudsContainerMetadata jCloudsContainerMetadata=new CreateJCloudsContainerMetadata();
jCloudsContainerMetadata.setCreateOptions(options);
jCloudsContainerMetadata.setNodeId(nodeMetadata.getId());
jCloudsContainerMetadata.setContainerName(containerName);
jCloudsContainerMetadata.setPublicAddresses(publicAddresses);
jCloudsContainerMetadata.setHostname(nodeMetadata.getHostname());
if (credentials != null) {
jCloudsContainerMetadata.setIdentity(credentials.identity);
jCloudsContainerMetadata.setCredential(credentials.credential);
}
Properties addresses=new Properties();
if (publicAddresses != null && !publicAddresses.isEmpty()) {
String publicAddress=publicAddresses.toArray(new String[publicAddresses.size()])[0];
addresses.put("publicip",publicAddress);
}
options.getSystemProperties().put(ContainerProviderUtils.ADDRESSES_PROPERTY_KEY,addresses);
try {
String script=buildInstallAndStartScript(options.name(containerName));
ExecResponse response=null;
if (credentials != null) {
response=computeService.runScriptOnNode(id,script,templateOptions.overrideLoginCredentials(credentials).runAsRoot(false));
}
 else {
response=computeService.runScriptOnNode(id,script,templateOptions);
}
if (response == null) {
jCloudsContainerMetadata.setFailure(new Exception("No response received for fabric install script."));
}
 else if (response.getOutput() != null && response.getOutput().contains("Command failed")) {
jCloudsContainerMetadata.setFailure(new Exception(response.getError()));
}
}
 catch (Throwable t) {
jCloudsContainerMetadata.setFailure(t);
}
options.getSystemProperties().clear();
result.add(jCloudsContainerMetadata);
}
}
return result;
}
