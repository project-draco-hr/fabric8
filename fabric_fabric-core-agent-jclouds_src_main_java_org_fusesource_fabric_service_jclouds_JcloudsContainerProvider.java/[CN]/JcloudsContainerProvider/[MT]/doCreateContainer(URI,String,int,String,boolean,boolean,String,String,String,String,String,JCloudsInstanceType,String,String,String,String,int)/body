{
  ComputeService computeService=computeServiceMap.get(providerName);
  if (computeService == null) {
    Iterable<? extends Module> modules=ImmutableSet.of();
    Properties props=new Properties();
    props.put("provider",providerName);
    props.put("identity",identity);
    props.put("credential",credential);
    if (!Strings.isNullOrEmpty(owner)) {
      props.put("jclouds.ec2.ami-owners",owner);
    }
    RestContextFactory restFactory=new RestContextFactory();
    ComputeServiceContext context=new ComputeServiceContextFactory(restFactory).createContext(providerName,identity,credential,modules,props);
    computeService=context.getComputeService();
  }
  TemplateBuilder builder=computeService.templateBuilder();
  builder.any();
switch (instanceType) {
case Smallest:
    builder.smallest();
  break;
case Biggest:
builder.biggest();
break;
case Fastest:
builder.fastest();
}
if (locationId != null) {
builder.locationId(locationId);
}
if (imageId != null) {
builder.imageId(imageId);
}
if (hardwareId != null) {
builder.hardwareId(hardwareId);
}
Set<? extends NodeMetadata> metadatas=null;
Credentials credentials=null;
if (user != null && credentials == null) {
credentials=new Credentials(user,null);
}
metadatas=computeService.createNodesInGroup(group,number,builder.build());
int suffix=1;
StringBuilder buffer=new StringBuilder();
boolean first=true;
if (metadatas != null) {
for (NodeMetadata nodeMetadata : metadatas) {
String id=nodeMetadata.getId();
Set<String> publicAddresses=nodeMetadata.getPublicAddresses();
for (String pa : publicAddresses) {
if (first) {
first=false;
}
 else {
buffer.append(",");
}
buffer.append(pa + ":" + returnPort);
}
String containerName=name;
if (number > 1) {
containerName+=suffix++;
}
String script=buildStartupScript(proxyUri,containerName,"~/",zooKeeperUrl,DEFAULT_SSH_PORT,isEnsembleServer,debugContainer);
if (credentials != null) {
computeService.runScriptOnNode(id,script,RunScriptOptions.Builder.overrideCredentialsWith(credentials).runAsRoot(false));
}
 else {
computeService.runScriptOnNode(id,script);
}
}
}
return buffer.toString();
}
