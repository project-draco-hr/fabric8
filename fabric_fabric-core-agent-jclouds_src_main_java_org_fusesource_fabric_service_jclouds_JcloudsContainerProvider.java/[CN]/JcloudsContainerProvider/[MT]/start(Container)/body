{
  CreateContainerMetadata metadata=container.getMetadata();
  if (!(metadata instanceof CreateJCloudsContainerMetadata)) {
    throw new IllegalStateException("Container doesn't have valid create container metadata type");
  }
 else {
    CreateJCloudsContainerMetadata jCloudsContainerMetadata=(CreateJCloudsContainerMetadata)metadata;
    CreateJCloudsContainerOptions options=jCloudsContainerMetadata.getCreateOptions();
    try {
      String nodeId=jCloudsContainerMetadata.getNodeId();
      ComputeService computeService=getOrCreateComputeService(options);
      NodeMetadata nodeMetadata=computeService.getNodeMetadata(nodeId);
      LoginCredentials credentials=nodeMetadata.getCredentials();
      LoginCredentials.Builder loginBuilder;
      if (options.getUser() != null) {
        if (credentials == null) {
          loginBuilder=LoginCredentials.builder();
        }
 else {
          loginBuilder=credentials.toBuilder();
        }
        if (options.getPassword() != null) {
          credentials=loginBuilder.user(options.getUser()).password(options.getPassword()).build();
        }
 else {
          credentials=loginBuilder.user(options.getUser()).build();
        }
      }
      String script=buildStartScript(options.name(container.getId()));
      ExecResponse response=null;
      if (credentials != null) {
        response=computeService.runScriptOnNode(nodeId,script,RunScriptOptions.Builder.overrideLoginCredentials(credentials).runAsRoot(false));
      }
 else {
        response=computeService.runScriptOnNode(nodeId,script);
      }
      if (response == null) {
        jCloudsContainerMetadata.setFailure(new Exception("No response received for fabric install script."));
      }
 else       if (response.getOutput() != null && response.getOutput().contains(ContainerProviderUtils.FAILURE_PREFIX)) {
        jCloudsContainerMetadata.setFailure(new Exception(ContainerProviderUtils.parseScriptFailure(response.getOutput())));
      }
    }
 catch (    Throwable t) {
      jCloudsContainerMetadata.setFailure(t);
    }
  }
}
