{
  Long ver=Long.parseLong(map.getMetadata().getResourceVersion());
  String pid=map.getMetadata().getLabels().get(pidLabel);
  String[] p=parsePid(pid);
  try {
    final Configuration config=getConfiguration(configAdmin.get(),pid,p[0],p[1]);
    final Map<String,String> configMapData=map.getData();
    if (configMapData == null) {
      LOGGER.debug("Ignoring configuration pid={}, (empty)",config.getPid());
      return;
    }
    final Dictionary<String,Object> props=config.getProperties();
    final Hashtable<String,Object> configAdmCfg=props != null ? new Hashtable<String,Object>() : null;
    Hashtable<String,Object> configMapCfg=new Hashtable<>();
    String pidCfg=configMapData.get(FABRIC8_CONFIG_PID_CFG);
    if (pidCfg == null) {
      pidCfg=pid + ".cfg";
    }
    String cfgString=configMapData.get(pidCfg);
    if (Utils.isNotNullOrEmpty(cfgString)) {
      java.util.Properties cfg=new java.util.Properties();
      cfg.load(new StringReader(cfgString));
      for (      Map.Entry<Object,Object> entry : cfg.entrySet()) {
        configMapCfg.put((String)entry.getKey(),entry.getValue());
      }
    }
 else {
      for (      Map.Entry<String,String> entry : map.getData().entrySet()) {
        configMapCfg.put(entry.getKey(),entry.getValue());
      }
    }
    boolean meta=configMapData.containsKey(FABRIC8_CONFIG_META) ? Boolean.valueOf(configMapData.get(FABRIC8_CONFIG_META)) : configMeta;
    boolean merge=configMapData.containsKey(FABRIC8_CONFIG_MERGE) ? Boolean.valueOf(configMapData.get(FABRIC8_CONFIG_MERGE)) : configMerge;
    if (configAdmCfg != null) {
      Long oldVer=(Long)props.get(FABRIC8_K8S_META_RESOURCE_VERSION);
      if (oldVer != null && (oldVer >= ver)) {
        LOGGER.debug("Ignoring configuration pid={}, oldVersion={} newVersion={} (no changes)",config.getPid(),oldVer,ver);
        return;
      }
      for (Enumeration<String> e=props.keys(); e.hasMoreElements(); ) {
        String key=e.nextElement();
        Object val=props.get(key);
        configAdmCfg.put(key,val);
      }
    }
    if (shouldUpdate(configAdmCfg,configMapCfg)) {
      LOGGER.debug("Updating configuration pid={}",config.getPid());
      if (meta) {
        configMapCfg.put(FABRIC8_PID,pid);
        configMapCfg.put(FABRIC8_K8S_META_RESOURCE_VERSION,ver);
        configMapCfg.put(FABRIC8_K8S_META_NAME,map.getMetadata().getName());
        configMapCfg.put(FABRIC8_K8S_META_NAMESPACE,map.getMetadata().getNamespace());
      }
      if (merge && configAdmCfg != null) {
        for (        Map.Entry<String,Object> entry : configMapCfg.entrySet()) {
          if (!CM_META_KEYS.contains(entry.getKey())) {
            configAdmCfg.put(entry.getKey(),entry.getValue());
          }
        }
        configMapCfg=configAdmCfg;
      }
      config.update(configMapCfg);
    }
 else {
      LOGGER.debug("Ignoring configuration pid={} (no changes)",config.getPid());
    }
  }
 catch (  Exception e) {
    LOGGER.warn("",e);
  }
}
