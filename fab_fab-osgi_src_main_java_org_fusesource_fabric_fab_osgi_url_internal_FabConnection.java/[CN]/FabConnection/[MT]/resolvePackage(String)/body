{
  List<DependencyTree> dependencies=classPathResolver.getSharedDependencies();
  for (  DependencyTree dependency : dependencies) {
    try {
      Set<String> packages=dependency.getPackages();
      if (packages.contains(packageName)) {
        if (dependency.isBundle()) {
          String exportPackages=dependency.getManfiestEntry("Export-Package");
          if (notEmpty(exportPackages)) {
            Map<String,Map<String,String>> values=new Analyzer().parseHeader(exportPackages);
            Map<String,String> map=values.get(packageName);
            if (map != null) {
              String version=map.get("version");
              if (version != null) {
                return toVersionRange(version);
              }
            }
          }
        }
        String version=dependency.getVersion();
        if (version != null) {
          String osgiVersion=VersionCleaner.clean(version);
          return toVersionRange(osgiVersion);
        }
      }
    }
 catch (    IOException e) {
      LOG.warn("Failed to get the packages on dependency: " + dependency + ". "+ e,e);
    }
  }
  return null;
}
