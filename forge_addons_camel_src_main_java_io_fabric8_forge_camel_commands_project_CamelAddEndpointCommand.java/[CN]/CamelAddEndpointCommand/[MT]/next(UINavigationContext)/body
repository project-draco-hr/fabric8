{
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  String previous=(String)attributeMap.get("componentName");
  if (previous != null && previous.equals(componentName.getValue())) {
    NavigationResult navigationResult=(NavigationResult)attributeMap.get("navigationResult");
    if (navigationResult != null) {
      return navigationResult;
    }
  }
  attributeMap.put("componentName",componentName.getValue());
  attributeMap.put("instanceName",instanceName.getValue());
  attributeMap.put("routeBuilder",routeBuilder.getValue());
  attributeMap.put("mode","add");
  attributeMap.put("kind","java");
  String camelComponentName=componentName.getValue();
  CamelCatalog catalog=new DefaultCamelCatalog();
  String json=catalog.componentJSonSchema(camelComponentName);
  if (json == null) {
    throw new IllegalArgumentException("Could not find catalog entry for component name: " + camelComponentName);
  }
  List<EndpointOptionByGroup> groups=createUIInputsForCamelComponent(camelComponentName,null,MAX_OPTIONS,componentFactory,converterFactory);
  List<InputComponent> allInputs=new ArrayList<>();
  for (  EndpointOptionByGroup group : groups) {
    allInputs.addAll(group.getInputs());
  }
  NavigationResultBuilder builder=Results.navigationBuilder();
  int pages=groups.size();
  for (int i=0; i < pages; i++) {
    boolean last=i == pages - 1;
    EndpointOptionByGroup current=groups.get(i);
    ConfigureEndpointPropertiesStep step=new ConfigureEndpointPropertiesStep(projectFactory,dependencyInstaller,camelComponentName,current.getGroup(),allInputs,current.getInputs(),last,i,pages);
    builder.add(step);
  }
  NavigationResult navigationResult=builder.build();
  attributeMap.put("navigationResult",navigationResult);
  return navigationResult;
}
