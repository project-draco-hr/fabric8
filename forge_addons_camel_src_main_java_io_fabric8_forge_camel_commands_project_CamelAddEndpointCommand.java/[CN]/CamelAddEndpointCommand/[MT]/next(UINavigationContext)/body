{
  Map<Object,Object> attributeMap=context.getUIContext().getAttributeMap();
  NavigationResult navigationResult=(NavigationResult)attributeMap.get("navigationResult");
  if (navigationResult != null) {
    return navigationResult;
  }
  attributeMap.put("componentName",componentName.getValue());
  attributeMap.put("instanceName",instanceName.getValue());
  attributeMap.put("routeBuilder",routeBuilder.getValue());
  attributeMap.put("mode","add");
  attributeMap.put("kind","java");
  String camelComponentName=componentName.getValue();
  CamelCatalog catalog=new DefaultCamelCatalog();
  String json=catalog.componentJSonSchema(camelComponentName);
  if (json == null) {
    throw new IllegalArgumentException("Could not find catalog entry for component name: " + camelComponentName);
  }
  List<InputComponent> allInputs=createUIInputsForCamelComponent(camelComponentName,null,componentFactory,converterFactory);
  int size=allInputs.size();
  NavigationResultBuilder builder=Results.navigationBuilder();
  int pages=size % 10 == 0 ? size / 10 : size / 10 + 1;
  for (int i=0; i < pages; i++) {
    int from=i * 10;
    int delta=Math.min(10,size - from);
    int to=from + delta;
    boolean last=i == pages - 1;
    List<InputComponent> inputs=allInputs.subList(from,to);
    ConfigureEndpointPropertiesStep step=new ConfigureEndpointPropertiesStep(projectFactory,dependencyInstaller,camelComponentName,allInputs,inputs,last,i,pages);
    builder.add(step);
  }
  navigationResult=builder.build();
  attributeMap.put("navigationResult",navigationResult);
  return navigationResult;
}
