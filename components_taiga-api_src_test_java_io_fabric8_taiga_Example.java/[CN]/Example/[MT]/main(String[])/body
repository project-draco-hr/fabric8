{
  String projectName="admin-beer";
  if (args.length > 0) {
    projectName=args[0];
  }
  try {
    KubernetesClient kubernetes=new DefaultKubernetesClient();
    TaigaClient taiga=TaigaKubernetes.createTaiga(kubernetes,KubernetesHelper.defaultNamespace());
    System.out.println("Connecting to taiga on: " + taiga.getAddress());
    ProjectDTO myProject=taiga.getProjectBySlug(projectName);
    System.out.println("Found project: " + myProject + " by slug: "+ projectName);
    System.out.println("Project id for slug: " + myProject + " is: "+ taiga.getProjectIdForSlug(projectName));
    ProjectDTO notExist=taiga.getProjectBySlug("does-not-exist");
    System.out.println("Found non existing project: " + notExist);
    Map<String,ModuleDTO> modules=taiga.getModulesForProject(projectName);
    System.out.println("Available modules for " + projectName + " are: "+ modules.keySet());
    ModuleDTO gogsModule=taiga.moduleForProject(projectName,TaigaModule.GOGS);
    System.out.println("Gogs module for " + projectName + " is "+ gogsModule);
    ProjectDTO autoCreateProject=taiga.getOrCreateProject("thingy");
    System.out.println("getOrCreateProject: " + autoCreateProject);
    List<ProjectDTO> projects=taiga.getProjects();
    for (    ProjectDTO project : projects) {
      System.out.println("Project " + project.getId() + " has slug: "+ project.getSlug()+ " name "+ project.getName());
    }
  }
 catch (  Exception e) {
    System.out.println("Caught: " + e);
    e.printStackTrace();
  }
}
