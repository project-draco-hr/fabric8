{
  IZKClient zooKeeper=((FabricServiceImpl)fabricService).getZooKeeper();
  zooKeeper.registerListener(this);
  this.connected=true;
  if (exportedBrokerConfig == null) {
    LOG.warn("The property exportedBrokerConfig is not set, exporting property localBrokerConfig");
  }
 else   if ((exportedBrokerConfig.getBrokerUrl() == null && exportedBrokerConfig.getConnectionFactory() == null) || (exportedBrokerConfig.getBrokerUrl() != null && exportedBrokerConfig.getConnectionFactory() != null)) {
    throw new IllegalArgumentException("Either a exported broker url or connection factory must be provided");
  }
  if (versionName == null) {
    versionName=fabricService.getDefaultVersion().getName();
  }
  LOG.info("Looking for profile " + gatewayProfileName + " under version "+ versionName);
  Version version=fabricService.getVersion(versionName);
  gatewayProfile=version.getProfile(gatewayProfileName);
  if (gatewayProfile == null) {
    throw new IllegalArgumentException("Gateway connector profile " + gatewayProfileName + " does not exist");
  }
  RemoteBridge gatewayBridge;
  int attempts=gatewayConnectRetries;
  do {
    gatewayBridge=ZkConfigHelper.getGatewayConfig(gatewayProfile,applicationContext);
    if (gatewayBridge == null) {
      LOG.warn("Gateway configuration not found in profile " + gatewayProfileName + ", waiting for "+ gatewayStartupDelay+ " seconds, retries remaining "+ attempts);
      Thread.sleep(gatewayStartupDelay * 1000L);
    }
  }
 while (--attempts > 0);
  if (gatewayBridge == null) {
    String msg="Gateway configuration not found in profile " + gatewayProfileName;
    LOG.error(msg);
    throw new IllegalStateException(msg);
  }
  super.setRemoteBrokerConfig(gatewayBridge.getRemoteBrokerConfig());
  if (this.getInboundDestinations() != null) {
    if (gatewayBridge.getOutboundDestinations() == null) {
      LOG.info("Using inbound destinations from Bridge, " + "Gateway has no default destinations");
    }
 else {
      LOG.warn("Using inbound destinations from Bridge, " + "Gateway default destinations will be ignored");
    }
  }
 else {
    if (gatewayBridge.getOutboundDestinations() != null) {
      LOG.info("No inbound destinations in Bridge, " + "Gateway destinations will be used");
    }
 else {
      LOG.warn("No inbound destinations in Bridge or Gateway, " + "Bridge will be unidirectional from Bridge To Gateway");
    }
  }
  super.setInboundDestinations(this.getInboundDestinations() != null ? this.getInboundDestinations() : gatewayBridge.getOutboundDestinations());
  super.afterPropertiesSet();
}
