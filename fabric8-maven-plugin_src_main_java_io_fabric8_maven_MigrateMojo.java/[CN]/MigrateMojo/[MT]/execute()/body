{
  init();
  File json=getKubernetesJson();
  if (Files.isFile(json)) {
    try {
      Object dto=KubernetesHelper.loadJson(json);
      if (dto == null) {
        throw new MojoFailureException("Cannot load kubernetes json: " + json);
      }
      Set<HasMetadata> entities=new TreeSet<>(new HasMetadataComparator());
      ConfigMap parameterConfigMap=null;
      if (dto instanceof Template) {
        Template template=(Template)dto;
        List<HasMetadata> objects=template.getObjects();
        if (objects != null) {
          entities.addAll(objects);
        }
        List<io.fabric8.openshift.api.model.Parameter> parameters=template.getParameters();
        if (parameters != null && parameters.size() > 0) {
          JsonSchema schema=new JsonSchema();
          Map<String,String> configMapData=new TreeMap<>();
          for (          io.fabric8.openshift.api.model.Parameter parameter : parameters) {
            String name=parameter.getName();
            String value=parameter.getValue();
            if (value == null) {
              value="";
            }
            JsonSchemaProperty property=schema.getOrCreateProperty(name);
            String generate=parameter.getGenerate();
            if (Strings.isNotBlank(generate)) {
              property.setGenerate(generate);
            }
            Boolean required=parameter.getRequired();
            if (required != null && required.booleanValue()) {
              schema.addRequired(name);
            }
            String description=parameter.getDescription();
            if (Strings.isNotBlank(description)) {
              property.setDescription(description);
            }
            if (Strings.isNotBlank(value)) {
              property.setDefaultValue(value);
            }
            configMapData.put(convertToConfigMapKey(name),value);
          }
          String jsonSchemaJson=KubernetesHelper.toPrettyJson(schema);
          getLog().info("Generated ConfigMap JSON Schema: " + jsonSchemaJson);
          parameterConfigMap=new ConfigMapBuilder().withNewMetadataLike(template.getMetadata()).addToAnnotations(Annotations.Config.JSON_SCHEMA,jsonSchemaJson).endMetadata().build();
          parameterConfigMap.setData(configMapData);
          migrateEntity(parameterConfigMap,parameterConfigMap);
          entities.add(parameterConfigMap);
        }
      }
 else {
        entities.addAll(KubernetesHelper.toItemList(dto));
      }
      outputDir.mkdirs();
      for (      HasMetadata entity : entities) {
        entity=migrateEntity(entity,parameterConfigMap);
        String name=KubernetesHelper.getName(entity);
        String kind=shortenKind(KubernetesHelper.getKind(entity).toLowerCase());
        File outFile=new File(outputDir,name + "-" + kind+ ".yml");
        if (entity instanceof ConfigMap || entity instanceof Secret) {
          KubernetesHelper.saveYaml(entity,outFile);
        }
 else {
          KubernetesHelper.saveYamlNotEmpty(entity,outFile);
        }
        getLog().info("Generated migration file: " + outFile);
      }
      tryAddFilesToGit(".");
      File basedir=getProject().getBasedir();
      if (updatePom) {
        updatePomFile(new File(basedir,"pom.xml"));
      }
      String[] filesToDelete={"uses.fmp2","src/main/fabric8/templateParameters.properties","src/main/fabric8/env.properties","src/main/fabric8/kubernetes.json"};
      for (      String fileName : filesToDelete) {
        File file=new File(basedir,fileName);
        if (file.exists()) {
          file.delete();
        }
      }
      deleteModelProcessorJavaFiles(new File(basedir,"src/main/java"));
    }
 catch (    Exception e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
}
