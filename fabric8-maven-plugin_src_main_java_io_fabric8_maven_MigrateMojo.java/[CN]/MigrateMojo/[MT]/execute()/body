{
  init();
  File json=getKubernetesJson();
  if (Files.isFile(json)) {
    try {
      Object dto=KubernetesHelper.loadJson(json);
      if (dto == null) {
        throw new MojoFailureException("Cannot load kubernetes json: " + json);
      }
      Set<HasMetadata> entities=new TreeSet<>(new HasMetadataComparator());
      ConfigMap parameterConfigMap=null;
      if (dto instanceof Template) {
        Template template=(Template)dto;
        List<HasMetadata> objects=template.getObjects();
        if (objects != null) {
          entities.addAll(objects);
        }
        List<io.fabric8.openshift.api.model.Parameter> parameters=template.getParameters();
        if (parameters != null && parameters.size() > 0) {
          parameterConfigMap=new ConfigMapBuilder().withNewMetadataLike(template.getMetadata()).endMetadata().build();
          Map<String,String> configMapData=new HashMap<>();
          for (          io.fabric8.openshift.api.model.Parameter parameter : parameters) {
            String name=parameter.getName();
            String value=parameter.getValue();
            if (value == null) {
              value="";
            }
            configMapData.put(convertToConfigMapKey(name),value);
          }
          parameterConfigMap.setData(configMapData);
          migrateEntity(parameterConfigMap,parameterConfigMap);
          entities.add(parameterConfigMap);
        }
      }
 else {
        entities.addAll(KubernetesHelper.toItemList(dto));
      }
      for (      HasMetadata entity : entities) {
        entity=migrateEntity(entity,parameterConfigMap);
        String name=KubernetesHelper.getName(entity);
        String kind=shortenKind(KubernetesHelper.getKind(entity).toLowerCase());
        File outFile=new File(outputDir,name + "-" + kind+ ".yml");
        if (entity instanceof ConfigMap || entity instanceof Secret) {
          KubernetesHelper.saveYaml(entity,outFile);
        }
 else {
          KubernetesHelper.saveYamlNotEmpty(entity,outFile);
        }
        getLog().info("Generated migration file: " + outFile);
      }
      tryAddFilesToGit(".");
      if (updatePom) {
        updatePomFile(new File(getProject().getBasedir(),"pom.xml"));
      }
      File useFmp2File=new File(getProject().getBasedir(),"uses.fmp2");
      if (useFmp2File.exists()) {
        useFmp2File.delete();
      }
    }
 catch (    Exception e) {
      throw new MojoExecutionException(e.getMessage(),e);
    }
  }
}
