{
  LOG.info("Getting the current project");
  final Project project=getCurrentSelectedProject(builder.getUIContext());
  LOG.info("Got the current project");
  String packaging=getProjectPackaging(project);
  boolean springBoot=hasSpringBootMavenPlugin(project);
  final List<String> choices=new ArrayList<String>();
  if (packaging == null || springBoot || "jar".equals(packaging)) {
    choices.addAll(Arrays.asList(jarImages));
  }
  if (packaging == null || "bundle".equals(packaging)) {
    choices.add(bundleImages[0]);
  }
  if (!springBoot && (packaging == null || "war".equals(packaging))) {
    choices.addAll(Arrays.asList(warImages));
  }
  from.setCompleter(new UICompleter<String>(){
    @Override public Iterable<String> getCompletionProposals(    UIContext context,    InputComponent<?,String> input,    String value){
      return choices;
    }
  }
);
  if (choices.size() > 0) {
    String defaultChoice=choices.get(0);
    if (defaultChoice != null) {
      from.setDefaultValue(defaultChoice);
    }
  }
  from.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.from",event.getNewValue());
    }
  }
);
  builder.add(from);
  if (packaging == null || (!packaging.equals("war") && !packaging.equals("ear"))) {
    boolean jarImage=DockerSetupHelper.isJarImage(from.getValue());
    main.setEnabled(jarImage);
    if (project != null) {
      main.setDefaultValue(DockerSetupHelper.defaultMainClass(project));
    }
    main.addValidator(new ClassNameOrMavenPropertyValidator(true));
    main.addValueChangeListener(new ValueChangeListener(){
      @Override public void valueChanged(      ValueChangeEvent event){
        builder.getUIContext().getAttributeMap().put("docker.main",event.getNewValue());
      }
    }
);
    builder.add(main);
  }
  container.setDefaultValue(new Callable<String>(){
    @Override public String call() throws Exception {
      String from=(String)builder.getUIContext().getAttributeMap().get("docker.from");
      if (from != null) {
        return asContainer(from);
      }
      return null;
    }
  }
);
  icon.setValueChoices(new Iterable<String>(){
    @Override public Iterator<String> iterator(){
      Set<String> choices=new LinkedHashSet<String>();
      choices.add("activemq");
      choices.add("camel");
      choices.add("java");
      choices.add("jetty");
      choices.add("karaf");
      choices.add("mule");
      choices.add("tomcat");
      choices.add("tomee");
      choices.add("weld");
      choices.add("wildfly");
      return choices.iterator();
    }
  }
);
  icon.setDefaultValue(new Callable<String>(){
    @Override public String call() throws Exception {
      if (!findCamelArtifacts(project).isEmpty()) {
        return "camel";
      }
      if (container.getValue() != null) {
        for (        String choice : icon.getValueChoices()) {
          if (choice.equals(container.getValue())) {
            return choice;
          }
        }
      }
      return "java";
    }
  }
);
  group.setDefaultValue(new Callable<String>(){
    @Override public String call() throws Exception {
      return null;
    }
  }
);
  builder.add(profiles).add(test).add(icon).add(group).add(container);
}
