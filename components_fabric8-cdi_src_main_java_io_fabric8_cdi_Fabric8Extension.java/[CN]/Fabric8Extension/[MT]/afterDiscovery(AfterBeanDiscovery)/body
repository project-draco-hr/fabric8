{
  event.addBean(new KubernetesClientBean());
  List<FactoryMethodContext> reverseFactories=new ArrayList<>(FactoryMethodContext.sort(factories));
  Collections.reverse(reverseFactories);
  for (  final FactoryMethodContext factoryMethodContext : reverseFactories) {
    ServiceBean.doWith(factoryMethodContext.getReturnType(),new ServiceBean.Callback(){
      @Override public ServiceBean apply(      ServiceBean bean){
        String serviceId=bean.getServiceName();
        String serviceProtocol=bean.getServiceProtocol();
        Boolean serviceExternal=bean.getServiceExternal();
        if (!String.class.equals(factoryMethodContext.getSourceType())) {
          ServiceBean.getBean(serviceId,serviceProtocol,null,serviceExternal,(Class<Object>)factoryMethodContext.getSourceType());
        }
        return bean.withProducer(new FactoryMethodProducer(factoryMethodContext.getBean(),factoryMethodContext.getFactoryMethod(),serviceId,serviceProtocol,serviceExternal));
      }
    }
);
  }
  for (  ServiceUrlBean bean : ServiceUrlBean.getBeans()) {
    event.addBean(bean);
  }
  for (  ServiceUrlCollectionBean bean : ServiceUrlCollectionBean.getBeans()) {
    event.addBean(bean);
  }
  for (  ServiceBean bean : ServiceBean.getBeans()) {
    if (bean.getProducer() != null) {
      event.addBean(bean);
    }
  }
  for (  ConfigurationBean b : ConfigurationBean.getBeans()) {
    event.addBean(b);
  }
}
