{
  LOGGER.debug("Begin clean fabric");
  try {
    Configuration[] configs=configAdmin.get().listConfigurations("(|(service.factoryPid=io.fabric8.zookeeper.server)(service.pid=io.fabric8.zookeeper))");
    File karafData=new File(data);
    final CountDownLatch unregisterLatch=new CountDownLatch(1);
    ServiceListener listener=new ServiceListener(){
      @Override public void serviceChanged(      ServiceEvent event){
        if (event.getType() == ServiceEvent.UNREGISTERING) {
          LOGGER.debug("Unregistering BootstrapConfiguration");
          syscontext.removeServiceListener(this);
          unregisterLatch.countDown();
        }
      }
    }
;
    String filter="(objectClass=" + BootstrapConfiguration.class.getName() + ")";
    bootConfig.getComponentContext().getBundleContext().addServiceListener(listener,filter);
    LOGGER.debug("Disable BootstrapConfiguration");
    ComponentContext componentContext=bootConfig.getComponentContext();
    componentContext.disableComponent(BootstrapConfiguration.COMPONENT_NAME);
    if (!unregisterLatch.await(30,TimeUnit.SECONDS))     throw new TimeoutException("Timeout for unregistering BootstrapConfiguration service");
    registrationHandler.removeRegistrationCallback();
    cleanConfigurations(configs);
    cleanZookeeperDirectory(karafData);
    cleanGitDirectory(karafData);
    final CountDownLatch registerLatch=new CountDownLatch(1);
    final AtomicReference<ServiceReference<?>> sref=new AtomicReference<ServiceReference<?>>();
    listener=new ServiceListener(){
      @Override public void serviceChanged(      ServiceEvent event){
        if (event.getType() == ServiceEvent.REGISTERED) {
          LOGGER.debug("Registered BootstrapConfiguration");
          syscontext.removeServiceListener(this);
          sref.set(event.getServiceReference());
          registerLatch.countDown();
        }
      }
    }
;
    syscontext.addServiceListener(listener,"(objectClass=" + BootstrapConfiguration.class.getName() + ")");
    LOGGER.debug("Enable BootstrapConfiguration");
    componentContext.enableComponent(BootstrapConfiguration.COMPONENT_NAME);
    if (!registerLatch.await(30,TimeUnit.SECONDS))     throw new TimeoutException("Timeout for registering BootstrapConfiguration service");
    return (BootstrapConfiguration)syscontext.getService(sref.get());
  }
 catch (  RuntimeException rte) {
    throw rte;
  }
catch (  TimeoutException toe) {
    throw toe;
  }
catch (  Exception ex) {
    throw new FabricException("Unable to delete zookeeper configuration",ex);
  }
 finally {
    LOGGER.debug("End clean fabric");
  }
}
