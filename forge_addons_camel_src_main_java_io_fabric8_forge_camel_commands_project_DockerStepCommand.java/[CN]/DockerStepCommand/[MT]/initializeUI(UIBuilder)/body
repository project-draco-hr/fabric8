{
  String packaging=getProjectPackaging(getSelectedProject(builder));
  List<String> choices=new ArrayList<String>();
  if (packaging == null || "jar".equals(packaging)) {
    choices.add(jarImages[0]);
  }
  if (packaging == null || "bundle".equals(packaging)) {
    choices.add(bundleImages[0]);
  }
  if (packaging == null || "war".equals(packaging)) {
    choices.add(warImages[0]);
    choices.add(warImages[1]);
  }
  from.setValueChoices(choices);
  String defaultChoice=DockerSetupHelper.defaultDockerImage(getSelectedProject(builder));
  if (defaultChoice != null && choices.contains(defaultChoice)) {
    from.setDefaultValue(defaultChoice);
  }
  from.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.from",event.getNewValue());
    }
  }
);
  main.setRequired(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      for (      String jar : jarImages) {
        if (jar.equals(from.getValue())) {
          return true;
        }
      }
      return false;
    }
  }
);
  main.setEnabled(main.isRequired());
  main.setDefaultValue(DockerSetupHelper.defaultMainClass(getSelectedProject(builder)));
  main.addValidator(new ClassNameValidator(true));
  main.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.main",event.getNewValue());
    }
  }
);
  builder.add(from).add(main);
}
