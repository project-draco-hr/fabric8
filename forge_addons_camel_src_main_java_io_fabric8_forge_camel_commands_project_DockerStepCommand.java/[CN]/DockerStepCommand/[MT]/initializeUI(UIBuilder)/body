{
  from.setValueChoices(new Iterable<String>(){
    @Override public Iterator<String> iterator(){
      String packaging=getProjectPackaging(getSelectedProject(builder));
      Set<String> choices=new LinkedHashSet<String>();
      if (packaging == null || "jar".equals(packaging)) {
        choices.add(jarImages[0]);
      }
      if (packaging == null || "bundle".equals(packaging)) {
        choices.add(bundleImages[0]);
      }
      if (packaging == null || "war".equals(packaging)) {
        choices.add(warImages[0]);
        choices.add(warImages[1]);
      }
      return choices.iterator();
    }
  }
);
  from.setDefaultValue(new Callable<String>(){
    @Override public String call() throws Exception {
      return DockerSetupHelper.defaultDockerImage(getSelectedProject(builder));
    }
  }
);
  from.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.from",event.getNewValue());
    }
  }
);
  main.setRequired(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      for (      String jar : jarImages) {
        if (jar.equals(from.getValue())) {
          return true;
        }
      }
      return false;
    }
  }
);
  main.setEnabled(main.isRequired());
  main.addValidator(new ClassNameValidator(true));
  main.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChanged(    ValueChangeEvent event){
      builder.getUIContext().getAttributeMap().put("docker.main",event.getNewValue());
    }
  }
);
  builder.add(from).add(main);
}
