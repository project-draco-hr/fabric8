{
  StringBuffer buf=new StringBuffer("\tat ");
  buf.append(element);
  try {
    String className=getClassNameMethod.invoke(element,(Object[])null).toString();
    Object classDetails=classMap.get(className);
    if (classDetails != null) {
      buf.append(classDetails);
    }
 else {
      Class cls=findClass(className);
      int detailStart=buf.length();
      buf.append('[');
      String mavenCoordinates=MavenCoordHelper.getMavenCoordinates(cls);
      if (!Strings.isEmpty(mavenCoordinates)) {
        buf.append(mavenCoordinates);
      }
 else {
        try {
          CodeSource source=cls.getProtectionDomain().getCodeSource();
          if (source != null) {
            URL locationURL=source.getLocation();
            if (locationURL != null) {
              if ("file".equals(locationURL.getProtocol())) {
                String path=locationURL.getPath();
                if (path != null) {
                  int lastSlash=path.lastIndexOf('/');
                  int lastBack=path.lastIndexOf(File.separatorChar);
                  if (lastBack > lastSlash) {
                    lastSlash=lastBack;
                  }
                  if (lastSlash <= 0 || lastSlash == path.length() - 1) {
                    buf.append(locationURL);
                  }
 else {
                    buf.append(path.substring(lastSlash + 1));
                  }
                }
              }
 else {
                buf.append(locationURL);
              }
            }
          }
        }
 catch (        SecurityException ex) {
        }
        buf.append(':');
        Package pkg=cls.getPackage();
        if (pkg != null) {
          String implVersion=pkg.getImplementationVersion();
          if (implVersion != null) {
            buf.append(implVersion);
          }
        }
      }
      buf.append(']');
      classMap.put(className,buf.substring(detailStart));
    }
  }
 catch (  Exception ex) {
  }
  return buf.toString();
}
