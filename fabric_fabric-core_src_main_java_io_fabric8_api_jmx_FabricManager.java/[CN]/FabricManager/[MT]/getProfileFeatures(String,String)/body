{
  Profile profile=getFabricService().getVersion(versionId).getProfile(profileId);
  Profile overlay=profile.getOverlay(true);
  Map<String,Boolean> isParentFeature=new HashMap<String,Boolean>();
  for (  String feature : profile.getFeatures()) {
    isParentFeature.put(feature,Boolean.FALSE);
  }
  for (  String feature : overlay.getFeatures()) {
    if (isParentFeature.get(feature) == null) {
      isParentFeature.put(feature,Boolean.TRUE);
    }
  }
  Map<String,Object> rc=new HashMap<String,Object>();
  List<Map<String,Object>> featureDefs=new ArrayList<Map<String,Object>>();
  for (  Map.Entry<String,Boolean> featureEntry : isParentFeature.entrySet()) {
    Map<String,Object> featureDef=new HashMap<String,Object>();
    featureDef.put("id",featureEntry.getKey());
    featureDef.put("isParentFeature",featureEntry.getValue());
    featureDefs.add(featureDef);
  }
  rc.put("featureDefinitions",featureDefs);
  List<Map<String,Object>> repositoryDefs=new ArrayList<Map<String,Object>>();
  for (  String repo : overlay.getRepositories()) {
    Map<String,Object> repoDef=new HashMap<String,Object>();
    repoDef.put("id",repo);
    Closeable closeable=null;
    try {
      URL url=new URL(repo);
      InputStream os=url.openStream();
      closeable=os;
      InputStream is=new BufferedInputStream(url.openStream());
      closeable=is;
      char[] buffer=new char[8192];
      StringBuilder data=new StringBuilder();
      Reader in=new InputStreamReader(is,"UTF-8");
      closeable=in;
      for (; ; ) {
        int stat=in.read(buffer,0,buffer.length);
        if (stat < 0) {
          break;
        }
        data.append(buffer,0,stat);
      }
      repoDef.put("data",data.toString());
    }
 catch (    Throwable t) {
      repoDef.put("error",t.getMessage());
    }
 finally {
      try {
        if (closeable != null) {
          closeable.close();
        }
      }
 catch (      Throwable t) {
      }
    }
    repositoryDefs.add(repoDef);
  }
  rc.put("repositoryDefinitions",repositoryDefs);
  return rc;
}
