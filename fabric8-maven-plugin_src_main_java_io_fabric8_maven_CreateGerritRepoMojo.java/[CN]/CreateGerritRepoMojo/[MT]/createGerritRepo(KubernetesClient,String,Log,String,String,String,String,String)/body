{
  if (Strings.isNullOrBlank(gerritUser)) {
    gerritUser="admin";
  }
  if (Strings.isNullOrBlank(gerritPwd)) {
    gerritPwd="secret";
  }
  String gerritAddress=KubernetesHelper.getServiceURL(kubernetes,ServiceNames.GERRIT,namespace,"http",true);
  log.info("Found gerrit address: " + gerritAddress + " for namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getMasterUrl());
  if (Strings.isNullOrBlank(gerritAddress)) {
    throw new MojoExecutionException("No address for service " + ServiceNames.GERRIT + " in namespace: "+ namespace+ " on Kubernetes address: "+ kubernetes.getMasterUrl());
  }
  log.info("Querying Gerrit for namespace: " + namespace + " on Kubernetes address: "+ kubernetes.getMasterUrl());
  DefaultHttpClient httpclient=new DefaultHttpClient();
  DefaultHttpClient httpclientPost=new DefaultHttpClient();
  String GERRIT_URL=gerritAddress + "/a/projects/" + repoName;
  HttpGet httpget=new HttpGet(GERRIT_URL);
  System.out.println("Requesting : " + httpget.getURI());
  try {
    HttpResponse response=httpclient.execute(httpget);
    System.out.println(response.getStatusLine());
    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {
      Header authHeader=response.getFirstHeader(AUTH.WWW_AUTH);
      System.out.println("authHeader = " + authHeader);
      DigestScheme digestScheme=new DigestScheme();
      digestScheme.processChallenge(authHeader);
      UsernamePasswordCredentials creds=new UsernamePasswordCredentials("admin","secret");
      httpget.addHeader(digestScheme.authenticate(creds,httpget,null));
      HttpPost httpPost=new HttpPost(GERRIT_URL);
      httpPost.addHeader(digestScheme.authenticate(creds,httpPost,null));
      httpPost.addHeader("Content-Type","application/json");
      CreateRepositoryDTO createRepoDTO=new CreateRepositoryDTO();
      createRepoDTO.setDescription("my cool git repo");
      createRepoDTO.setName(repoName);
      createRepoDTO.setCreate_empty_commit(Boolean.valueOf(empty_commit));
      ObjectMapper mapper=new ObjectMapper();
      String json=mapper.writeValueAsString(createRepoDTO);
      HttpEntity entity=new StringEntity(json);
      httpPost.setEntity(entity);
      ResponseHandler<String> responseHandler=new BasicResponseHandler();
      String responseBody=httpclientPost.execute(httpPost,responseHandler);
      System.out.println("responseBody : " + responseBody);
    }
  }
 catch (  MalformedChallengeException e) {
    e.printStackTrace();
  }
catch (  AuthenticationException e) {
    e.printStackTrace();
  }
catch (  ConnectException e) {
    System.out.println("Gerrit Server is not responding");
  }
catch (  HttpResponseException e) {
    System.out.println("Response from Gerrit Server : " + e.getMessage());
    throw new MojoExecutionException("Repository " + repoName + " already exists !");
  }
 finally {
    httpclient.getConnectionManager().shutdown();
    httpclientPost.getConnectionManager().shutdown();
  }
  return false;
}
