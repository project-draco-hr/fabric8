{
  final List<String> locations=new ArrayList<String>();
  final CountDownLatch latch=new CountDownLatch(repos.size() * artifacts.size());
  for (  final String repo : repos) {
    for (    final String artifact : artifacts) {
      executor.submit(new Runnable(){
        @Override public void run(){
          try {
            String[] mvn=artifact.split(":");
            URL base=new URL(repo + (repo.endsWith("/") ? "" : "/") + mvn[0].replace('.','/')+ "/"+ mvn[1]+ "/");
            URL metadata=new URL(base,"maven-metadata.xml");
            URLConnection con=metadata.openConnection();
            if (metadata.getUserInfo() != null) {
              con.setRequestProperty("Authorization","Basic " + Base64Encoder.encode(metadata.getUserInfo().getBytes()));
            }
            InputStream is=con.getInputStream();
            try {
              Document doc=dbf.newDocumentBuilder().parse(is);
              NodeList versions=doc.getDocumentElement().getElementsByTagName("version");
              for (int i=0; i < versions.getLength(); i++) {
                Node version=versions.item(i);
                String v=version.getTextContent();
synchronized (locations) {
                  locations.add(repo + "|" + mvn[0]+ "|"+ mvn[1]+ "|"+ v);
                }
              }
            }
  finally {
              close(is);
            }
          }
 catch (          FileNotFoundException e) {
          }
catch (          Exception e) {
            LOGGER.info("Error in " + repo + " - "+ artifact+ ": "+ e.getMessage(),e);
          }
 finally {
            latch.countDown();
          }
        }
      }
);
    }
  }
  latch.await();
  return locations;
}
