{
  final Map<String,Set<String>> missingArtifacts=getMissingArtifacts();
  final Set<Patch> patches=new TreeSet<Patch>();
  final CountDownLatch latch=new CountDownLatch(locations.size());
  for (  final String location : new ArrayList<String>(locations)) {
    executor.submit(new Runnable(){
      @Override public void run(){
        try {
          File metadata=download(location,"patch","patch");
          Properties props=loadProperties(metadata);
          File issues=download(location,"xml","issues");
          List<Issue> issueList=loadIssues(issues);
          PatchDescriptor descriptor=new PatchDescriptor(props);
          Set<String> bundles=new TreeSet<String>();
          for (          String url : descriptor.getBundles()) {
            String mvn=getMavenArtifact(url);
            String[] p=mvn.split(":");
            bundles.add(p[0] + ":" + p[1]);
          }
          String[] mvn=location.split("\\|");
          Set<String> artifacts=missingArtifacts.get(mvn[1] + ":" + mvn[2]);
          if (artifacts != null) {
            bundles.addAll(artifacts);
          }
          Patch patch=new PatchImpl(descriptor.getId(),location,bundles,issueList);
synchronized (patches) {
            patches.add(patch);
          }
        }
 catch (        FileNotFoundException e) {
synchronized (locations) {
            locations.remove(location);
          }
        }
catch (        Exception e) {
          LOGGER.info("Error downloading patch " + location,e);
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  latch.await();
  return patches;
}
