{
  final Map<String,Set<String>> missingArtifacts=getMissingArtifacts();
  final Set<Patch> patches=new TreeSet<Patch>();
  final CountDownLatch latch=new CountDownLatch(locations.size());
  for (  final String location : new ArrayList<String>(locations)) {
    executor.submit(new Runnable(){
      @Override public void run(){
        try {
          File metadata=download(location,"patch","patch");
          Properties props=new Properties();
          FileInputStream fis=new FileInputStream(metadata);
          try {
            props.load(fis);
          }
  finally {
            close(fis);
          }
          File issues=download(location,"xml","issues");
          List<Issue> issueList=new ArrayList<Issue>();
          fis=new FileInputStream(issues);
          try {
            Element root=dbf.newDocumentBuilder().parse(fis).getDocumentElement();
            for (Node child=root.getFirstChild(); child != null; child=child.getNextSibling()) {
              if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equals(ISSUE)) {
                Element el=(Element)child;
                String desc=el.getAttribute(ISSUE_DESCRIPTION);
                List<String> keys=new ArrayList<String>();
                List<String> arts=new ArrayList<String>();
                for (Node child2=el.getFirstChild(); child2 != null; child2=child2.getNextSibling()) {
                  if (child2.getNodeType() == Node.ELEMENT_NODE) {
                    if (child2.getNodeName().equals(ISSUE_KEY)) {
                      keys.add(child2.getTextContent());
                    }
 else                     if (child2.getNodeName().equals(ISSUE_MODULE)) {
                      arts.add(child2.getTextContent());
                    }
                  }
                }
                issueList.add(new IssueImpl(desc,keys,arts));
              }
            }
          }
  finally {
            close(fis);
          }
          String id=props.getProperty(PATCH_ID);
          Set<String> bundles=new TreeSet<String>();
          int count=Integer.parseInt(props.getProperty(PATCH_BUNDLES + "." + PATCH_COUNT,"0"));
          for (int i=0; i < count; i++) {
            String url=props.getProperty(PATCH_BUNDLES + "." + Integer.toString(i));
            String mvn=getMavenArtifact(url);
            String[] p=mvn.split(":");
            bundles.add(p[0] + ":" + p[1]);
          }
          String[] mvn=location.split("\\|");
          Set<String> artifacts=missingArtifacts.get(mvn[1] + ":" + mvn[2]);
          if (artifacts != null) {
            bundles.addAll(artifacts);
          }
          Patch patch=new PatchImpl(id,location,bundles,issueList);
synchronized (patches) {
            patches.add(patch);
          }
        }
 catch (        FileNotFoundException e) {
synchronized (locations) {
            locations.remove(location);
          }
        }
catch (        Exception e) {
          LOGGER.info("Error downloading patch " + location,e);
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  latch.await();
  return patches;
}
