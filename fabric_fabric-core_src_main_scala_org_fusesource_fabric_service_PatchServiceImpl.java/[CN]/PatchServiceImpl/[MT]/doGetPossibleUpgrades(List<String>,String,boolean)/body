{
  Set<String> allVersions=new TreeSet<String>(new FuseVersionComparator());
  String[] mvnParts=mvn.split(":");
  org.osgi.framework.Version artifactVersion=VersionTable.getVersion(mvnParts[2]);
  for (  String repo : repositories) {
    try {
      URL base=new URL(repo + "/" + mvnParts[0].replace('.','/')+ "/"+ mvnParts[1]+ "/");
      URL metadata=new URL(base,"maven-metadata.xml");
      URLConnection con=metadata.openConnection();
      if (metadata.getUserInfo() != null) {
        con.setRequestProperty("Authorization","Basic " + Base64Encoder.encode(metadata.getUserInfo()));
      }
      InputStream is=con.getInputStream();
      try {
        Document doc=dbf.newDocumentBuilder().parse(is);
        NodeList versions=doc.getDocumentElement().getElementsByTagName("version");
        for (int i=0; i < versions.getLength(); i++) {
          Node version=versions.item(i);
          String v=version.getTextContent();
          org.osgi.framework.Version ver=VersionTable.getVersion(v);
          if (isInMajorRange(artifactVersion,ver)) {
            if (includeNonFuseVersions || v.contains("fuse")) {
              allVersions.add(v.trim());
            }
          }
        }
      }
  finally {
        is.close();
      }
    }
 catch (    Exception e) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace("Unable to retrieve versions for artifact: " + mvn,e);
      }
 else       if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("Unable to retrieve versions for artifact: " + mvn + ": "+ e.getMessage());
      }
    }
  }
  return allVersions;
}
