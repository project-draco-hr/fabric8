{
  ArrayList<Protocol> protocols=new ArrayList<Protocol>();
  if (isStompEnabled()) {
    protocols.add(new StompProtocol());
  }
  if (isMqttEnabled()) {
    protocols.add(new MqttProtocol());
  }
  if (isAmqpEnabled()) {
    protocols.add(new AmqpProtocol());
  }
  if (isOpenWireEnabled()) {
    protocols.add(new OpenwireProtocol());
  }
  if (isHttpEnabled()) {
    protocols.add(new HttpProtocol());
  }
  if (protocols.isEmpty()) {
    return null;
  }
  VertxService vertxService=getVertxService();
  Vertx vertx=vertxService.getVertx();
  LoadBalancer<ServiceDetails> serviceLoadBalancer=LoadBalancers.createLoadBalancer(loadBalancerType,stickyLoadBalancerCacheSize);
  handler.setVertx(vertx);
  handler.setServiceMap(serviceMap);
  handler.setProtocols(protocols);
  handler.setServiceLoadBalancer(serviceLoadBalancer);
  handler.setDefaultVirtualHost(defaultVirtualHost);
  return new DetectingGateway(vertx,port,handler);
}
