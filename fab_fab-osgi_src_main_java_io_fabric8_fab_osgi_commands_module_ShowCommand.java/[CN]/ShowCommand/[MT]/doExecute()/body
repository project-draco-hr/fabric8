{
  OsgiModuleRegistry registry=getModuleRegistry();
  List<ModuleRegistry.Module> modules=registry.getApplicationModules();
  Map<VersionedDependencyId,Bundle> installed=registry.getInstalled();
  for (  ModuleRegistry.Module module : modules) {
    if (module.getName().equals(name)) {
      ModuleRegistry.VersionedModule selected=null;
      TreeSet<String> versions=mapVersion(module.getVersionIds());
      HashSet<VersionedDependencyId> installedVersionIds=new HashSet<VersionedDependencyId>(module.getVersionIds());
      installedVersionIds.retainAll(installed.keySet());
      TreeSet<String> installedVersions=mapVersion(installedVersionIds);
      versions.removeAll(installedVersions);
      if (version != null) {
        selected=module.getVersions().get(version);
        if (selected == null) {
          println("Unknown version: %s",version);
          return null;
        }
      }
 else {
        selected=module.latest();
      }
      println("%15s: %s","Name",selected.getName());
      if (!installedVersionIds.isEmpty()) {
        for (        VersionedDependencyId id : installedVersionIds) {
          Bundle bundle=installed.get(id);
          String version=id.getVersion();
          String extensionIds=(String)bundle.getHeaders().get(ServiceConstants.INSTR_FAB_MODULE_ENABLED_EXTENSIONS);
          if (notEmpty(extensionIds)) {
            List<VersionedDependencyId> ids=ModuleDescriptor.decodeVersionList(extensionIds);
            ArrayList<String> ext=new ArrayList<String>();
            for (            VersionedDependencyId x : ids) {
              ModuleRegistry.VersionedModule vm=registry.getVersionedModule(x);
              if (vm != null) {
                ext.add(vm.getName());
              }
            }
            if (!ext.isEmpty()) {
              version+=", Extensions: " + join(ext," ") + "";
            }
          }
          println("%15s: %s, Bundle: %d","Installed",version,bundle.getBundleId());
        }
      }
      if (!versions.isEmpty()) {
        println("%15s: %s","Available",join(versions,", "));
      }
      String desc=notEmpty(selected.getLongDescription()) ? selected.getLongDescription() : selected.getDescription();
      String lines[]=wordWrap(desc,60);
      println("%15s: %s","Description",lines[0]);
      for (int i=1; i < lines.length; i++) {
        println("%15s  %s","",lines[i]);
      }
      Map<String,ModuleRegistry.VersionedModule> extensions=selected.getAvailableExtensions();
      if (extensions.size() > 0) {
        HashSet enabled=new HashSet<String>(selected.getEnabledExtensions());
        println("%15s: %s","Extensions",selected.getDefaultExtensions().isEmpty() ? "" : "(Default: " + join(selected.getDefaultExtensions(),", ") + ")");
        Table table=new Table("       {1} | {2} | {3}",-20,-10,-40);
        table.add("Name","Version","Description");
        for (        Map.Entry<String,ModuleRegistry.VersionedModule> entry : extensions.entrySet()) {
          ModuleRegistry.VersionedModule extension=entry.getValue();
          table.add(extension.getName(),extension.getId().getVersion(),extension.getDescription());
        }
        table.print(session.getConsole());
      }
    }
  }
  return null;
}
