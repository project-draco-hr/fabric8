{
  File projectFolder=getUserProjectFolder(user,repositoryName);
  File gitFolder=new File(projectFolder,".git");
  CredentialsProvider credentialsProvider=userDetails.createCredentialsProvider();
  if (!Files.isDirectory(gitFolder) || !Files.isDirectory(projectFolder)) {
    GitRepoClient repoClient=userDetails.createRepoClient();
    RepositoryDTO dto=repositoryCache.getOrFindUserRepository(user,repositoryName,repoClient);
    if (dto == null) {
      throw new NotFoundException("No repository defined for user: " + user + " and name: "+ repositoryName);
    }
    String cloneUrl=dto.getCloneUrl();
    if (Strings.isNullOrBlank(cloneUrl)) {
      throw new NotFoundException("No cloneUrl defined for user repository: " + user + "/"+ repositoryName);
    }
    boolean cloneAll=true;
    LOG.info("Cloning git repo " + cloneUrl + " into directory "+ projectFolder.getAbsolutePath()+ " cloneAllBranches: "+ cloneAll);
    CloneCommand command=Git.cloneRepository().setCredentialsProvider(credentialsProvider).setCloneAllBranches(cloneAll).setURI(cloneUrl).setDirectory(projectFolder).setRemote(remote);
    try {
      Git git=command.call();
    }
 catch (    Throwable e) {
      LOG.error("Failed to command remote repo " + cloneUrl + " due: "+ e.getMessage(),e);
      throw new RuntimeException("Failed to command remote repo " + cloneUrl + " due: "+ e.getMessage());
    }
  }
 else {
    doPull(gitFolder,credentialsProvider,userDetails.getBranch());
  }
  return projectFolder;
}
