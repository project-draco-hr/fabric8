{
  if (isReady()) {
    FabricService fabricService=getOsgiService(FabricService.class);
    assertNotNull(fabricService);
    System.err.println(executeCommand("fabric:create"));
    CreateContainerOptions options=CreateContainerOptionsBuilder.ssh().name("ssh1").host(host).port(Integer.parseInt(port)).username(username).password(password).providerUri("ssh://" + username + ":"+ password+ "@"+ host+ ":"+ port);
    CreateContainerMetadata[] metadata=fabricService.createContainers(options);
    assertNotNull(metadata);
    assertEquals(1,metadata.length);
    if (metadata[0].getFailure() != null) {
      throw metadata[0].getFailure();
    }
    assertTrue("Expected succesful creation of remote ssh container",metadata[0].isSuccess());
    assertNotNull("Expected succesful creation of remote ssh container",metadata[0].getContainer());
    waitForProvisionSuccess(metadata[0].getContainer(),PROVISION_TIMEOUT);
    System.err.println(executeCommand("fabric:container-list"));
    Container container=fabricService.getContainer("ssh1");
    assertTrue(container.isAlive());
    createAndAssetChildContainer("ssh2","ssh1");
  }
}
