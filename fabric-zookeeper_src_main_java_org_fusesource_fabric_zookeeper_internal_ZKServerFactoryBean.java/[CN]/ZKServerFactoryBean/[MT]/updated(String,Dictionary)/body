{
  try {
    deleted(pid);
    Properties props=new Properties();
    for (Enumeration ek=properties.keys(); ek.hasMoreElements(); ) {
      Object key=ek.nextElement();
      Object val=properties.get(key);
      props.put(key.toString(),val != null ? val.toString() : "");
    }
    String serverId=props.getProperty("server.id");
    if (serverId != null) {
      props.remove("server.id");
      File myId=new File(props.getProperty("dataDir"),"myid");
      if (myId.exists()) {
        myId.delete();
      }
      myId.getParentFile().mkdirs();
      FileOutputStream fos=new FileOutputStream(myId);
      try {
        fos.write((serverId + "\n").getBytes());
      }
  finally {
        fos.close();
      }
    }
    QuorumPeerConfig config=new QuorumPeerConfig();
    config.parseProperties(props);
    if (!config.getServers().isEmpty()) {
      NIOServerCnxn.Factory cnxnFactory=new NIOServerCnxn.Factory(config.getClientPortAddress(),config.getMaxClientCnxns());
      QuorumPeer quorumPeer=new QuorumPeer();
      quorumPeer.setClientPortAddress(config.getClientPortAddress());
      quorumPeer.setTxnFactory(new FileTxnSnapLog(new File(config.getDataLogDir()),new File(config.getDataDir())));
      quorumPeer.setQuorumPeers(config.getServers());
      quorumPeer.setElectionType(config.getElectionAlg());
      quorumPeer.setMyid(config.getServerId());
      quorumPeer.setTickTime(config.getTickTime());
      quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());
      quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());
      quorumPeer.setInitLimit(config.getInitLimit());
      quorumPeer.setSyncLimit(config.getSyncLimit());
      quorumPeer.setQuorumVerifier(config.getQuorumVerifier());
      quorumPeer.setCnxnFactory(cnxnFactory);
      quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));
      quorumPeer.setLearnerType(config.getPeerType());
      try {
        debug("Starting quorum peer \"%s\" on address %s",quorumPeer.getMyid(),config.getClientPortAddress());
        quorumPeer.start();
        debug("Started quorum peer \"%s\"",quorumPeer.getMyid());
      }
 catch (      Exception e) {
        LOG.warn(String.format("Failed to start quorum peer \"%s\", reason : ",quorumPeer.getMyid(),e));
        quorumPeer.shutdown();
        throw e;
      }
      servers.put(pid,quorumPeer);
      services.put(pid,bundleContext.registerService(QuorumStats.Provider.class.getName(),quorumPeer,properties));
    }
 else {
      ServerConfig cfg=new ServerConfig();
      cfg.readFrom(config);
      ZooKeeperServer zkServer=new ZooKeeperServer();
      FileTxnSnapLog ftxn=new FileTxnSnapLog(new File(cfg.getDataLogDir()),new File(cfg.getDataDir()));
      zkServer.setTxnLogFactory(ftxn);
      zkServer.setTickTime(cfg.getTickTime());
      zkServer.setMinSessionTimeout(cfg.getMinSessionTimeout());
      zkServer.setMaxSessionTimeout(cfg.getMaxSessionTimeout());
      NIOServerCnxn.Factory cnxnFactory=new NIOServerCnxn.Factory(cfg.getClientPortAddress(),cfg.getMaxClientCnxns());
      try {
        debug("Starting ZooKeeper server on address %s",config.getClientPortAddress());
        cnxnFactory.startup(zkServer);
        LOG.debug("Started ZooKeeper server");
      }
 catch (      Exception e) {
        LOG.warn(String.format("Failed to start ZooKeeper server, reason : %s",e));
        cnxnFactory.shutdown();
        throw e;
      }
      servers.put(pid,cnxnFactory);
      services.put(pid,bundleContext.registerService(ServerStats.Provider.class.getName(),zkServer,properties));
    }
  }
 catch (  Exception e) {
    throw (ConfigurationException)new ConfigurationException(null,"Unable to parse ZooKeeper configuration: " + e.getMessage()).initCause(e);
  }
}
