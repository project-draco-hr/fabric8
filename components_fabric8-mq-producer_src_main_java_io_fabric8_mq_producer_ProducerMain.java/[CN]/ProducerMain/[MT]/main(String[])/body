{
  try {
    try {
      host=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_HOST");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_HOST",DEFAULT_HOST) : result;
          return result;
        }
      }
);
      String portStr=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_PORT");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_PORT","61616") : result;
          return result;
        }
      }
);
      if (portStr != null && portStr.length() > 0) {
        port=Integer.parseInt(portStr);
      }
      queueName=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_QUEUENAME");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_QUEUENAME","TEST.FOO") : result;
          return result;
        }
      }
);
      String intervalStr=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_INTERVAL");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_INTERVAL","0") : result;
          return result;
        }
      }
);
      if (intervalStr != null && intervalStr.length() > 0) {
        interval=Integer.parseInt(intervalStr);
      }
      String messageSizeInBytesStr=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_MESSAGE_SIZE_BYTES");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_MESSAGE_SIZE_BYTES","1024") : result;
          return result;
        }
      }
);
      if (messageSizeInBytesStr != null && messageSizeInBytesStr.length() > 0) {
        messageSize=Integer.parseInt(messageSizeInBytesStr);
      }
      String messageCountStr=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_MESSAGE_COUNT_LONG");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_MESSAGE_COUNT_LONG","10000") : result;
          return result;
        }
      }
);
      if (messageCountStr != null && messageCountStr.length() > 0) {
        messageCount=Long.parseLong(messageCountStr);
      }
    }
 catch (    Throwable e) {
      LOG.warn("Failed to look up System properties for host and port",e);
    }
    if (host == null || host.length() == 0) {
      host=DEFAULT_HOST;
    }
    if (port <= 0) {
      port=61616;
    }
    if (queueName == null) {
      queueName="TEST.FOO";
    }
    if (messageSize <= 1) {
      messageSize=1024;
    }
    if (messageCount <= 0) {
      messageCount=10000;
    }
    org.apache.camel.main.Main main=new org.apache.camel.main.Main();
    String brokerURL="tcp://" + host + ":"+ port;
    System.out.println("Connecting to brokerURL: " + brokerURL);
    main.bind("activemq",ActiveMQComponent.activeMQComponent(brokerURL));
    main.bind("myDataSet",createDataSet());
    main.enableHangupSupport();
    main.addRouteBuilder(new RouteBuilder(){
      public void configure(){
        from("dataset:myDataSet?produceDelay=" + interval).to("activemq:" + queueName);
      }
    }
);
    main.run(args);
  }
 catch (  Throwable e) {
    LOG.error("Failed to connect to Fabric8 MQ",e);
  }
}
