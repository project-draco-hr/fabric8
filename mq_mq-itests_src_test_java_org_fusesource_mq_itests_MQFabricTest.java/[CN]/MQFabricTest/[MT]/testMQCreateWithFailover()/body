{
  final String brokerName="testBroker";
  final String groupName="testGroup";
  final CountDownLatch serviceLatch=new CountDownLatch(1);
  final CountDownLatch failOverLatch=new CountDownLatch(3);
  System.out.println(executeCommand("fabric:create -n"));
  Thread.sleep(5000);
  Set<Container> containers=ContainerBuilder.child(2).withName("child").assertProvisioningResult().build();
  String names=containerNames(containers);
  CuratorFramework curatorFramework=getCurator();
  final FabricDiscoveryAgent discoveryAgent=new FabricDiscoveryAgent();
  discoveryAgent.setCurator(curatorFramework);
  discoveryAgent.setGroupName(groupName);
  discoveryAgent.setDiscoveryListener(new DiscoveryListener(){
    @Override public void onServiceAdd(    DiscoveryEvent discoveryEvent){
      serviceLatch.countDown();
      failOverLatch.countDown();
    }
    @Override public void onServiceRemove(    DiscoveryEvent discoveryEvent){
      failOverLatch.countDown();
    }
  }
);
  discoveryAgent.start();
  System.out.println(executeCommand("fabric:mq-create --group " + groupName + " --assign-container "+ names+ " "+ brokerName));
  Provision.provisioningSuccess(containers,PROVISION_TIMEOUT);
  System.out.println("Waiting for master.");
  serviceLatch.await(30,TimeUnit.SECONDS);
  System.out.println(executeCommand("fabric:cluster-list | grep -A 1 " + groupName));
  FabricDiscoveryAgent.ActiveMQNode master=discoveryAgent.getGroup().master();
  assertNotNull(master);
  String masterName=master.getContainer();
  assertNotNull(master.getContainer());
  FabricService fabricService=getFabricService();
  System.out.println("Stopping the master.");
  Container masterContainer=fabricService.getContainer(masterName);
  masterContainer.stop();
  masterContainer.start();
  System.out.println("Waiting for failover.");
  failOverLatch.await(30,TimeUnit.SECONDS);
  System.out.println(executeCommand("fabric:cluster-list | grep -A 1 " + groupName));
}
