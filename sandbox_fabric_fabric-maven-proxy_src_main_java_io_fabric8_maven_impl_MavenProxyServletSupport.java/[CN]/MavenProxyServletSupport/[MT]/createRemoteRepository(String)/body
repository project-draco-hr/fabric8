{
  String id;
  RemoteRepository remoteRepository=null;
  repositoryUrl=repositoryUrl.trim();
  Authentication authentication=getAuthentication(repositoryUrl);
  if (authentication != null) {
    repositoryUrl=repositoryUrl.replaceFirst(String.format("%s:%s@",authentication.getUsername(),authentication.getPassword()),"");
  }
  Matcher idMatcher=REPOSITORY_ID_REGEX.matcher(repositoryUrl);
  if (idMatcher.matches()) {
    id=idMatcher.group(2);
    repositoryUrl=cleanUpRepositorySpec(repositoryUrl);
    remoteRepository=new RemoteRepository(id + Math.abs(repositoryUrl.hashCode()),DEFAULT_REPO_ID,repositoryUrl);
  }
 else {
    id="rep-" + Math.abs(repositoryUrl.hashCode());
    repositoryUrl=cleanUpRepositorySpec(repositoryUrl);
    remoteRepository=new RemoteRepository("repo-" + Math.abs(repositoryUrl.hashCode()),DEFAULT_REPO_ID,repositoryUrl);
  }
  remoteRepository.setId(id);
  if (authentication != null) {
    remoteRepository.setAuthentication(authentication);
  }
  return remoteRepository;
}
