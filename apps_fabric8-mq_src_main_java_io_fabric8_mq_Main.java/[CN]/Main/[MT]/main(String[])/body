{
  try {
    try {
      brokerName=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_BROKER_NAME");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_BROKER_NAME",DEFAULT_BROKER_NAME) : result;
          return result;
        }
      }
);
      host=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_HOST");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_HOST",DEFAULT_HOST) : result;
          return result;
        }
      }
);
      String portStr=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_PORT");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_PORT",DEFAULT_PORT_TEXT) : result;
          return result;
        }
      }
);
      if (portStr != null && portStr.length() > 0) {
        port=Integer.parseInt(portStr);
      }
      dataDirectory=AccessController.doPrivileged(new PrivilegedAction<String>(){
        @Override public String run(){
          String result=System.getenv("AMQ_DATA_DIRECTORY");
          result=(result == null || result.isEmpty()) ? System.getProperty("org.apache.activemq.AMQ_DATA_DIRECTORY",DEFAULT_DATA_DIRECTORY) : result;
          return result;
        }
      }
);
    }
 catch (    Throwable e) {
      LOG.warn("Failed to look up System properties for host and port",e);
    }
    if (host == null || host.length() == 0) {
      host="0.0.0.0";
    }
    if (port <= 0) {
      port=61616;
    }
    if (brokerName == null) {
      brokerName=DEFAULT_BROKER_NAME;
    }
    if (dataDirectory == null) {
      dataDirectory="data";
    }
    BrokerService brokerService=new BrokerService();
    brokerService.setBrokerName(brokerName);
    brokerService.setDataDirectory(dataDirectory);
    MBeanServer server=ManagementFactory.getPlatformMBeanServer();
    ManagementContext managementContext=new ManagementContext(server);
    managementContext.setCreateConnector(false);
    brokerService.setManagementContext(managementContext);
    List<BrokerPlugin> list=new ArrayList<>();
    list.add(new StatisticsBrokerPlugin());
    BrokerPlugin[] plugins=new BrokerPlugin[list.size()];
    list.toArray(plugins);
    brokerService.setPlugins(plugins);
    LevelDBStoreFactory persistenceFactory=new LevelDBStoreFactory();
    persistenceFactory.setDirectory(new File(getDataDirectory()));
    persistenceFactory.setSync(false);
    brokerService.setPersistenceFactory(persistenceFactory);
    long maxMemory=Runtime.getRuntime().maxMemory();
    long brokerMemory=(long)(maxMemory * 0.7);
    brokerService.getSystemUsage().getMemoryUsage().setLimit(brokerMemory);
    String connector="tcp://" + host + ":"+ port;
    System.out.println("Starting broker on " + connector);
    brokerService.addConnector(connector);
    brokerService.start();
    waitUntilStop();
  }
 catch (  Throwable e) {
    LOG.error("Failed to Start Fabric8MQ",e);
  }
}
