{
  Session session=null;
  Exception connectException=null;
  for (int i=0; i < sshRetries; i++) {
    if (i > 0) {
      long delayMs=(long)(200L * Math.pow(i,2));
      Thread.sleep(delayMs);
    }
    try {
      session=new JSch().getSession(username,host,port);
      session.setTimeout(60000);
      session.setPassword(password);
      java.util.Properties config=new java.util.Properties();
      config.put("StrictHostKeyChecking","no");
      session.setConfig(config);
      session.connect();
      connectException=null;
      break;
    }
 catch (    Exception from) {
      connectException=from;
      if (session != null && session.isConnected()) {
        session.disconnect();
      }
      session=null;
    }
  }
  if (connectException != null) {
    throw connectException;
  }
  ChannelExec executor=null;
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ByteArrayOutputStream error=new ByteArrayOutputStream();
  try {
    executor=(ChannelExec)session.openChannel("exec");
    executor.setPty(true);
    executor.setCommand(script);
    executor.setOutputStream(output);
    executor.setErrStream(error);
    executor.connect();
    int errorStatus=-1;
    for (int i=0; !executor.isClosed(); i++) {
      if (i > 0) {
        long delayMs=(long)(200L * Math.pow(i,2));
        Thread.sleep(delayMs);
      }
      if ((errorStatus=executor.getExitStatus()) != -1) {
        break;
      }
    }
    if (verbose) {
      System.out.println("Output : " + output.toString());
      System.out.println("Error : " + error.toString());
    }
    if (errorStatus != 0) {
      throw new Exception(String.format("%s@%s:%d: received exit status %d executing \n--- command ---\n%s\n--- output ---\n%s\n--- error ---\n%s\n------\n",username,host,port,executor.getExitStatus(),script,output.toString(),error.toString()));
    }
  }
  finally {
    if (executor != null) {
      executor.disconnect();
    }
    session.disconnect();
  }
}
