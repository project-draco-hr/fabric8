{
  String uri=request.uri();
  String uri2=null;
  if (!uri.endsWith("/")) {
    uri2=uri + "/";
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Proxying request: " + uri);
  }
  HttpClient client=null;
  String remaining=null;
  String prefix=null;
  String urlText=null;
  Map<String,MappedServices> mappingRules=httpGateway.getMappingRules();
  try {
    if (isMappingIndexRequest(request)) {
      String json=mappingRulesToJson(mappingRules);
      HttpServerResponse response=request.response();
      response.headers().set("ContentType","application/json");
      response.end(json);
      response.setStatusCode(200);
    }
 else {
      Set<Map.Entry<String,MappedServices>> entries=mappingRules.entrySet();
      for (      Map.Entry<String,MappedServices> entry : entries) {
        String path=entry.getKey();
        MappedServices mappedServices=entry.getValue();
        String pathPrefix=path;
        if (uri.startsWith(pathPrefix) || (uri2 != null && uri2.startsWith(pathPrefix))) {
          int pathPrefixLength=pathPrefix.length();
          if (pathPrefixLength < uri.length()) {
            remaining=uri.substring(pathPrefixLength);
          }
          urlText=mappedServices.chooseService(request);
          if (urlText != null) {
            try {
              URL url=new URL(urlText);
              client=createClient(url);
              prefix=url.getPath();
              break;
            }
 catch (            MalformedURLException e) {
              LOG.warn("Failed to parse URL: " + urlText + ". "+ e,e);
            }
          }
        }
      }
      if (client != null) {
        String actualUrl=prefix != null ? prefix : "";
        if (remaining != null) {
          if (actualUrl.length() > 0 && !actualUrl.endsWith("/")) {
            actualUrl+="/";
          }
          actualUrl+=remaining;
        }
        LOG.info("Proxying request " + uri + " to actual path: "+ actualUrl+ " on service: "+ urlText);
        final HttpClientRequest clientRequest=client.request(request.method(),actualUrl,new Handler<HttpClientResponse>(){
          public void handle(          HttpClientResponse clientResponse){
            if (LOG.isDebugEnabled()) {
              LOG.debug("Proxying response: " + clientResponse.statusCode());
            }
            request.response().setStatusCode(clientResponse.statusCode());
            request.response().headers().set(clientResponse.headers());
            request.response().setChunked(true);
            clientResponse.dataHandler(new Handler<Buffer>(){
              public void handle(              Buffer data){
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Proxying response body:" + data);
                }
                request.response().write(data);
              }
            }
);
            clientResponse.endHandler(new VoidHandler(){
              public void handle(){
                request.response().end();
              }
            }
);
          }
        }
);
        clientRequest.headers().set(request.headers());
        clientRequest.setChunked(true);
        request.dataHandler(new Handler<Buffer>(){
          public void handle(          Buffer data){
            if (LOG.isDebugEnabled()) {
              LOG.debug("Proxying request body:" + data);
            }
            clientRequest.write(data);
          }
        }
);
        request.endHandler(new VoidHandler(){
          public void handle(){
            if (LOG.isDebugEnabled()) {
              LOG.debug("end of the request");
            }
            clientRequest.end();
          }
        }
);
      }
 else {
        LOG.info("Could not find matching proxy path for " + uri + " from paths: "+ mappingRules.keySet());
        request.response().setStatusCode(404);
        request.response().close();
      }
    }
  }
 catch (  Throwable e) {
    LOG.error("Caught: " + e,e);
    request.response().setStatusCode(404);
    StringWriter buffer=new StringWriter();
    e.printStackTrace(new PrintWriter(buffer));
    request.response().setStatusMessage("Error: " + e + "\nStack Trace: "+ buffer);
    request.response().close();
  }
}
