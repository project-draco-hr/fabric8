{
  connected=true;
  final String name=System.getProperty(SystemProperties.KARAF_NAME);
  String version=System.getProperty("fabric.version",ZkDefs.DEFAULT_VERSION);
  String profiles=System.getProperty("fabric.profiles");
  LOGGER.trace("onConnected");
  String nodeAlive=CONTAINER_ALIVE.getPath(name);
  try {
    if (profiles != null) {
      String versionNode=CONFIG_CONTAINER.getPath(name);
      String profileNode=CONFIG_VERSIONS_CONTAINER.getPath(version,name);
      createDefault(curator,versionNode,version);
      createDefault(curator,profileNode,profiles);
    }
    Stat stat=exists(curator,nodeAlive);
    if (stat != null) {
      if (stat.getEphemeralOwner() != curator.getZookeeperClient().getZooKeeper().getSessionId()) {
        delete(curator,nodeAlive);
        create(curator,nodeAlive,CreateMode.EPHEMERAL);
      }
    }
 else {
      create(curator,nodeAlive,CreateMode.EPHEMERAL);
    }
    String domainsNode=CONTAINER_DOMAINS.getPath(name);
    stat=exists(curator,domainsNode);
    if (stat != null) {
      deleteSafe(curator,domainsNode);
    }
    createDefault(curator,CONTAINER_RESOLVER.getPath(name),getContainerResolutionPolicy(curator,name));
    setData(curator,CONTAINER_LOCAL_HOSTNAME.getPath(name),HostUtils.getLocalHostName());
    setData(curator,CONTAINER_LOCAL_IP.getPath(name),HostUtils.getLocalIp());
    setData(curator,CONTAINER_IP.getPath(name),getContainerPointer(curator,name));
    createDefault(curator,CONTAINER_GEOLOCATION.getPath(name),GeoUtils.getGeoLocation());
    for (    String resolver : ZkDefs.VALID_RESOLVERS) {
      String address=System.getProperty(resolver);
      if (address != null && !address.isEmpty() && exists(curator,CONTAINER_ADDRESS.getPath(name,resolver)) == null) {
        setData(curator,CONTAINER_ADDRESS.getPath(name,resolver),address);
      }
    }
    Container current=getContainer();
    registerJmx(current);
    registerSsh(current);
    registerHttp(current);
    String minimumPort=System.getProperty(ZkDefs.MINIMUM_PORT);
    String maximumPort=System.getProperty(ZkDefs.MAXIMUM_PORT);
    createDefault(curator,CONTAINER_PORT_MIN.getPath(name),minimumPort);
    createDefault(curator,CONTAINER_PORT_MAX.getPath(name),maximumPort);
    registerDomains();
  }
 catch (  Exception e) {
    LOGGER.warn("Error updating Fabric Container information. This exception will be ignored.",e);
  }
}
