{
  if (lhs == null) {
    return false;
  }
  if (op == SimpleFilter.PRESENT) {
    return true;
  }
  if (lhs instanceof Comparable) {
    if ((op == SimpleFilter.SUBSTRING) && !(lhs instanceof String)) {
      return false;
    }
    Object rhs;
    if (op == SimpleFilter.SUBSTRING) {
      rhs=rhsUnknown;
    }
 else {
      try {
        rhs=coerceType(lhs,(String)rhsUnknown);
      }
 catch (      Exception ex) {
        return false;
      }
    }
switch (op) {
case SimpleFilter.EQ:
      try {
        return (((Comparable)lhs).compareTo(rhs) == 0);
      }
 catch (      Exception ex) {
        return false;
      }
case SimpleFilter.GTE:
    try {
      return (((Comparable)lhs).compareTo(rhs) >= 0);
    }
 catch (    Exception ex) {
      return false;
    }
case SimpleFilter.LTE:
  try {
    return (((Comparable)lhs).compareTo(rhs) <= 0);
  }
 catch (  Exception ex) {
    return false;
  }
case SimpleFilter.APPROX:
return compareApproximate(((Comparable)lhs),rhs);
case SimpleFilter.SUBSTRING:
return SimpleFilter.compareSubstring((List<String>)rhs,(String)lhs);
default :
throw new RuntimeException("Unknown comparison operator: " + op);
}
}
 else if (lhs instanceof Boolean) {
Object rhs;
try {
rhs=coerceType(lhs,(String)rhsUnknown);
}
 catch (Exception ex) {
return false;
}
switch (op) {
case SimpleFilter.EQ:
case SimpleFilter.GTE:
case SimpleFilter.LTE:
case SimpleFilter.APPROX:
return (lhs.equals(rhs));
default :
throw new RuntimeException("Unknown comparison operator: " + op);
}
}
if (lhs.getClass().isArray()) {
lhs=convertArrayToList(lhs);
}
if (lhs instanceof Collection) {
for (Iterator iter=((Collection)lhs).iterator(); iter.hasNext(); ) {
if (compare(iter.next(),rhsUnknown,op)) {
return true;
}
}
return false;
}
if ((op == SimpleFilter.SUBSTRING) && !(lhs instanceof String)) {
return false;
}
try {
return lhs.equals(coerceType(lhs,(String)rhsUnknown));
}
 catch (Exception ex) {
return false;
}
}
