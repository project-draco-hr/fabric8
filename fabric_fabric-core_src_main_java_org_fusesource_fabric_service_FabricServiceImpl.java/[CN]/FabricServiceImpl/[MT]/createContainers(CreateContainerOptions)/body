{
  assertValid();
  try {
    ContainerProvider provider=getProvider(options.getProviderType());
    if (provider == null) {
      throw new FabricException("Unable to find a container provider supporting '" + options.getProviderType() + "'");
    }
    if (!options.isEnsembleServer()) {
      String originalName=options.getName();
      int number=Math.max(options.getNumber(),1);
      for (int i=1; i <= number; i++) {
        String containerName;
        if (options.getNumber() >= 1) {
          containerName=originalName + i;
        }
 else {
          containerName=originalName;
        }
        getDataStore().createContainerConfig(containerName,options);
      }
    }
    Set<? extends CreateContainerMetadata> metadatas=provider.create(options);
    for (    CreateContainerMetadata metadata : metadatas) {
      if (metadata.isSuccess()) {
        Container parent=options.getParent() != null ? getContainer(options.getParent()) : null;
        if (!options.isEnsembleServer()) {
          getDataStore().createContainerConfig(metadata);
        }
        ContainerImpl container=new ContainerImpl(parent,metadata.getContainerName(),FabricServiceImpl.this);
        metadata.setContainer(container);
        container.setMetadata(metadata);
        LOGGER.info("The container " + metadata.getContainerName() + " has been successfully created");
      }
 else {
        LOGGER.info("The creation of the container " + metadata.getContainerName() + " has failed",metadata.getFailure());
      }
    }
    return metadatas.toArray(new CreateContainerMetadata[metadatas.size()]);
  }
 catch (  Exception e) {
    LOGGER.error("Failed to create container " + e,e);
    throw FabricException.launderThrowable(e);
  }
}
