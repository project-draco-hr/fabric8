{
  ServletContext servletContext=event.getServletContext();
  PropertiesProvider propsProvider=new FabricPropertiesProvider(servletContext);
  Runtime runtime=RuntimeLocator.createRuntime(new TomcatRuntimeFactory(servletContext),propsProvider);
  runtime.init();
  final BoostrapLatch latch=new BoostrapLatch(1);
  final ModuleContext syscontext=runtime.getModuleContext();
  ServiceListener listener=new ServiceListener(){
    @Override public void serviceChanged(    ServiceEvent event){
      if (event.getType() == ServiceEvent.REGISTERED) {
        syscontext.removeServiceListener(this);
        latch.countDown();
      }
    }
  }
;
  syscontext.addServiceListener(listener,"(objectClass=" + ZooKeeperClusterBootstrap.class.getName() + ")");
  servletContext.setAttribute(BoostrapLatch.class.getName(),latch);
  WebAppContextListener webappInstaller=new WebAppContextListener();
  Module module=webappInstaller.installWebappModule(servletContext);
  servletContext.setAttribute(Module.class.getName(),module);
  try {
    module.start();
  }
 catch (  ModuleException ex) {
    throw new IllegalStateException(ex);
  }
  ModuleContext moduleContext=module.getModuleContext();
  BundleContext bundleContext=new BundleContextAdaptor(moduleContext);
  servletContext.setAttribute(BundleContext.class.getName(),bundleContext);
  Repository repository=registerRepositoryService(runtime);
  Resolver resolver=registerResolverService(runtime);
  registerProvisionerService(servletContext,runtime,repository,resolver);
}
