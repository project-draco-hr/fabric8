{
  MavenPluginBuilder plugin=MavenPluginBuilder.create().setCoordinate(createCoordinate("org.jolokia","docker-maven-plugin",VersionHelper.dockerVersion()));
  ConfigurationElement cfgName=ConfigurationElementBuilder.create().setName("name").setText("${docker.image}");
  ConfigurationElement cfgFrom=ConfigurationElementBuilder.create().setName("from").setText("${docker.from}");
  ConfigurationElement cfgDescriptorRef=ConfigurationElementBuilder.create().setName("descriptorRef").setText("${docker.assemblyDescriptorRef}");
  ConfigurationElement cfgAssembly=ConfigurationElementBuilder.create().setName("assembly");
  cfgAssembly.getChildren().add(cfgDescriptorRef);
  ConfigurationElement cfgBuild=ConfigurationElementBuilder.create().setName("build");
  cfgBuild.getChildren().add(cfgFrom);
  cfgBuild.getChildren().add(cfgAssembly);
  ConfigurationElement cfgImage=ConfigurationElementBuilder.create().setName("image");
  cfgImage.getChildren().add(cfgName);
  cfgImage.getChildren().add(cfgBuild);
  ConfigurationElement cfgImages=ConfigurationElementBuilder.create().setName("images");
  cfgImages.getChildren().add(cfgImage);
  String packaging=getProjectPackaging(project);
  boolean war=packaging != null && packaging.equals("war");
  boolean bundle=packaging != null && packaging.equals("bundle");
  boolean jar=packaging != null && packaging.equals("jar");
  MavenFacet maven=project.getFacet(MavenFacet.class);
  Model pom=maven.getModel();
  Properties properties=pom.getProperties();
  properties.put("docker.registryPrefix","${env.DOCKER_REGISTRY}/");
  properties.put("docker.from",fromImage);
  properties.put("docker.image","${docker.registryPrefix}fabric8/${project.artifactId}:${project.version}");
  properties.put("docker.port.container.jolokia","8778");
  if (war) {
    properties.put("docker.assemblyDescriptorRef","rootWar");
    properties.put("docker.port.container.http","8080");
  }
 else   if (bundle) {
    properties.put("docker.assemblyDescriptorRef","artifact-with-dependencies");
    properties.put("docker.port.container.http","8181");
  }
 else {
    properties.put("docker.assemblyDescriptorRef","artifact-with-dependencies");
  }
  maven.setModel(pom);
  MavenPluginFacet pluginFacet=project.getFacet(MavenPluginFacet.class);
  plugin.createConfiguration().addConfigurationElement(cfgImages);
  pluginFacet.addPlugin(plugin);
}
