{
  List<String> endpoints=new ArrayList<>();
  KubernetesClient client=KubernetesHolder.getClient();
  String namespace=client.getNamespace();
  String serviceProto=serviceProtocol != null ? serviceProtocol : DEFAULT_PROTO;
  try {
    for (    String endpoint : KubernetesHelper.lookupServiceInDns(serviceId)) {
      endpoints.add(serviceProto + "://" + endpoint);
    }
  }
 catch (  UnknownHostException e) {
  }
  if (!endpoints.isEmpty()) {
    return endpoints;
  }
  for (  io.fabric8.kubernetes.api.model.Endpoints item : KubernetesHolder.getClient().endpoints().inNamespace(namespace).list().getItems()) {
    if (item.getMetadata().getName().equals(serviceId) && (namespace == null || namespace.equals(item.getMetadata().getNamespace()))) {
      for (      EndpointSubset subset : item.getSubsets()) {
        for (        EndpointAddress address : subset.getAddresses()) {
          for (          EndpointPort endpointPort : subset.getPorts()) {
            if (servicePort == null || servicePort.equals(endpointPort.getName())) {
              endpoints.add(serviceProto + "://" + address.getIp()+ ":"+ endpointPort.getPort());
            }
          }
        }
      }
      break;
    }
  }
  return endpoints;
}
