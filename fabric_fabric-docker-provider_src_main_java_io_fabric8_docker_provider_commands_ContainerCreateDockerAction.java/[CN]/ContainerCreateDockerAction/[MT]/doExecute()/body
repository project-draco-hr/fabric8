{
  preCreateContainer(name);
  FabricValidations.validateProfileNames(profiles);
  if (isEnsembleServer && newUserPassword == null) {
    newUserPassword=zookeeperPassword != null ? zookeeperPassword : fabricService.getZookeeperPassword();
  }
  CreateDockerContainerOptions.Builder builder=CreateDockerContainerOptions.builder().name(name).ensembleServer(isEnsembleServer).resolver(resolver).bindAddress(bindAddress).manualIp(manualIp).number(number).preferredAddress(InetAddress.getByName(host).getHostAddress()).adminAccess(adminAccess).minimumPort(minimumPort).maximumPort(maximumPort).proxyUri(proxyUri != null ? proxyUri : fabricService.getMavenRepoURI()).zookeeperUrl(fabricService.getZookeeperUrl()).zookeeperPassword(isEnsembleServer && zookeeperPassword != null ? zookeeperPassword : fabricService.getZookeeperPassword()).jvmOpts(jvmOpts != null ? jvmOpts : fabricService.getDefaultJvmOptions()).withUser(newUser,newUserPassword,newUserRole).version(version).profiles(getProfileNames()).dataStoreProperties(getDataStoreProperties()).dataStoreType(dataStoreType != null && isEnsembleServer ? dataStoreType : fabricService.getDataStore().getType());
  CreateContainerMetadata<?>[] metadatas=fabricService.createContainers(builder.build());
  if (isEnsembleServer && metadatas != null && metadatas.length > 0 && metadatas[0].isSuccess()) {
    ShellUtils.storeZookeeperPassword(session,metadatas[0].getCreateOptions().getZookeeperPassword());
  }
  displayContainers(metadatas);
  return null;
}
