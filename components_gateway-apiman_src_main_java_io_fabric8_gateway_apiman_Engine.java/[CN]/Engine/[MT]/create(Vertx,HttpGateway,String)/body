{
  IEngineFactory factory=new EngineFactory(vertx,httpGateway);
  if ("in-memory".equals(System.getProperty("fabric8-apiman.engine-factory"))) {
    factory=new InMemoryEngineFactory(vertx,httpGateway);
  }
  final IEngine engine=factory.createEngine();
  ApiManEngine apimanEngine=new ApiManEngine(){
    @Override public IRegistry getRegistry(){
      return engine.getRegistry();
    }
    @Override public String getVersion(){
      return engine.getVersion();
    }
    @Override public IServiceRequestExecutor executor(    ServiceRequest request,    IAsyncResultHandler<IEngineResult> resultHandler){
      return engine.executor(request,resultHandler);
    }
    /** 
 * @see io.fabric8.gateway.apiman.ApiManEngine#serviceMapping(io.apiman.gateway.engine.beans.Service)
 */
    @Override public String serviceMapping(    Service service) throws NotAuthorizedException {
      String serviceUrl=service.getEndpoint();
      Map<String,IMappedServices> mappedServices=httpGateway.getMappedServices();
      Iterator<String> keys=mappedServices.keySet().iterator();
      while (keys.hasNext()) {
        String key=keys.next();
        IMappedServices services=mappedServices.get(key);
        String servicePath=services.getProxyMappingDetails().getProxyServiceUrl();
        if (servicePath.equals(serviceUrl)) {
          String gatewayUrl=httpGateway.getGatewayUrl() + key;
          return gatewayUrl;
        }
      }
      throw new NotAuthorizedException("Service not found");
    }
    @Override public String[] getServiceInfo(    String servicePath){
      return ((DelegatingRegistryWithMapping)engine.getRegistry()).getService(servicePath);
    }
  }
;
  return apimanEngine;
}
