{
  serviceSelectors=httpGatewayConfig.getServiceSelectors();
  LOG.info("activating http mapping rule " + httpGatewayConfig.get(HTTPGatewayConfig.SELECTORS) + " on "+ httpGatewayConfig.get(HTTPGatewayConfig.HTTP_PORT));
  loadBalancerType=httpGatewayConfig.getLoadBalancerType();
  uriTemplate=httpGatewayConfig.getUriTemplate();
  enabledVersion=httpGatewayConfig.getEnabledVersion();
  reverseHeaders=httpGatewayConfig.isReverseHeaders();
  LoadBalancer loadBalancer=LoadBalancers.createLoadBalancer(loadBalancerType,stickyLoadBalancerCacheSize);
  LOG.info("activating http mapping selector: " + serviceSelectors + " with URI template: "+ uriTemplate+ " enabledVersion: "+ enabledVersion+ " with load balancer: "+ loadBalancer);
  if (httpMappingRuleBase != null) {
    gateway.removeMappingRuleConfiguration(httpMappingRuleBase);
  }
  httpMappingRuleBase=new HttpMappingRuleBase(new SimplePathTemplate(uriTemplate),gateway.getGatewayVersion(),enabledVersion,loadBalancer,reverseHeaders);
  gateway.configure(httpGatewayConfig);
  mappingTree=new HttpMappingKubeCache(httpMappingRuleBase,serviceSelectors,gateway.getApiManager());
  mappingTree.init(httpGatewayConfig);
  gateway.addMappingRuleConfiguration(httpMappingRuleBase);
}
