{
  write().body().staticInvoke(cls(),"write").arg(_this().ref("value")).arg(ref("out"));
  writeConstructor().body()._return(cls().staticInvoke("writeConstructor").arg(_this().ref("value")).arg(ref("out")));
  writeBody().body().staticInvoke(cls(),"writeBody").arg(ref("formatCode")).arg(_this().ref("value")).arg(ref("out"));
  staticWrite().body().decl(cm.BYTE,"formatCode",cls().staticInvoke("writeConstructor").arg(ref("value")).arg(ref("out")));
  staticWrite().body().staticInvoke(cls(),"writeBody").arg(ref("formatCode")).arg(ref("value")).arg(ref("out"));
  staticWriteConstructor=cls().method(JMod.PUBLIC | JMod.STATIC,cm.BYTE,"writeConstructor");
  staticWriteConstructor._throws(Exception.class);
  staticWriteConstructor.param(getJavaType(),"value");
  staticWriteConstructor.param(DataOutput.class,"out");
  staticWriteConstructor.body().decl(cm.BYTE,"formatCode",generator.registry().cls().staticInvoke("instance").invoke("picker").invoke("choose" + toJavaClassName(type.getName() + "Encoding")).arg(ref("value")));
  staticWriteConstructor.body().invoke(ref("out"),"writeByte").arg(ref("formatCode"));
  staticWriteConstructor.body()._return(ref("formatCode"));
  staticWriteBody=cls().method(JMod.PUBLIC | JMod.STATIC,cm.VOID,"writeBody");
  staticWriteBody._throws(Exception.class);
  staticWriteBody.param(cm.BYTE,"formatCode");
  staticWriteBody.param(getJavaType(),"value");
  staticWriteBody.param(DataOutput.class,"out");
}
