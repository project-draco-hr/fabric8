{
  Map<String,PropertyDescriptor> propertyDescriptors;
  T answer;
  try {
    answer=clazz.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException("Failed to instantiate " + clazz.getCanonicalName() + ". "+ e,e);
  }
  try {
    propertyDescriptors=getPropertyDescriptors(clazz);
  }
 catch (  IntrospectionException e) {
    throw new RuntimeException("Failed to introspect " + clazz.getCanonicalName() + ". "+ e,e);
  }
  Set<Map.Entry<String,Object>> entries=map.entrySet();
  for (  Map.Entry<String,Object> entry : entries) {
    String name=entry.getKey();
    Object value=entry.getValue();
    PropertyDescriptor descriptor=propertyDescriptors.get(name);
    if (descriptor == null) {
      LOG.warn("Ignoring unkown property " + name + " on class "+ clazz.getCanonicalName()+ " with value: "+ value);
    }
 else {
      Method writeMethod=descriptor.getWriteMethod();
      if (writeMethod == null) {
        LOG.warn("Ignoring read only property " + name + " on class "+ clazz.getCanonicalName()+ " with value: "+ value);
      }
 else {
        Class<?> propertyType=descriptor.getPropertyType();
        value=JolokiaClients.convertJolokiaToJavaType(propertyType,value);
        Object[] args={value};
        Class<?>[] parameterTypes={propertyType};
        try {
          writeMethod.invoke(answer,args);
        }
 catch (        Exception e) {
          LOG.warn("Failed to set property " + name + " on class "+ clazz.getCanonicalName()+ " type: "+ propertyType.getCanonicalName()+ " with value: "+ value+ (value != null ? " type " + value.getClass().getCanonicalName() : null)+ ". "+ e,e);
        }
      }
    }
  }
  return answer;
}
