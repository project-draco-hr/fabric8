{
  try {
    singleton.update(new ESNode(clusterName.value(),localNode,singleton.isMaster()));
  }
 catch (  Exception e) {
  }
  if (singleton.isMaster()) {
    if (logger.isDebugEnabled()) {
      String master=singleton.master() != null ? singleton.master().node.name() : null;
      List<String> slaves=new ArrayList<String>();
      for (      ESNode s : singleton.slaves()) {
        slaves.add(s.node.name());
      }
      logger.debug("Updating cluster: master {}, slaves {}",master,slaves);
    }
    clusterService.submitStateUpdateTask("fabric-discovery-master",Priority.URGENT,new ProcessedClusterStateUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState){
        ClusterState.Builder stateBuilder=ClusterState.builder(currentState);
        DiscoveryNodes.Builder nodesBuilder=DiscoveryNodes.builder().localNodeId(localNode.id()).masterNodeId(singleton.master().getNode().id()).put(singleton.master().getNode());
        for (        ESNode node : singleton.slaves()) {
          nodesBuilder.put(node.getNode());
        }
        latestDiscoNodes=nodesBuilder.build();
        stateBuilder.nodes(latestDiscoNodes);
        for (        DiscoveryNode node : latestDiscoNodes) {
          if (!currentState.nodes().nodeExists(node.id())) {
            transportService.connectToNode(node);
          }
        }
        if (!localNode().id().equals(currentState.nodes().masterNodeId())) {
          ClusterBlocks clusterBlocks=ClusterBlocks.builder().blocks(currentState.blocks()).removeGlobalBlock(NO_MASTER_BLOCK).build();
          stateBuilder.blocks(clusterBlocks);
        }
        return stateBuilder.build();
      }
      @Override public void clusterStateProcessed(      String source,      ClusterState oldState,      ClusterState newState){
        logger.debug("Cluster updated");
        sendInitialStateEventIfNeeded();
      }
      @Override public void onFailure(      String source,      Throwable t){
        logger.error("unexpected failure during [{}]",t,source);
      }
    }
);
  }
 else   if (singleton.master() != null) {
    DiscoveryNode masterNode=singleton.master().getNode();
    try {
      transportService.connectToNode(masterNode);
    }
 catch (    Exception e) {
      logger.warn("failed to connect to master [{}], retrying...",e,masterNode);
    }
  }
}
