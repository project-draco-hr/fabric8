{
  final Document doc;
  SAXParser parser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  parser=factory.newSAXParser();
  final DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
  final DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();
  doc=docBuilder.newDocument();
  final Stack<Element> elementStack=new Stack<Element>();
  final StringBuilder textBuffer=new StringBuilder();
  final DefaultHandler handler=new DefaultHandler(){
    private Locator locator;
    @Override public void setDocumentLocator(    final Locator locator){
      this.locator=locator;
    }
    @Override public void startElement(    final String uri,    final String localName,    final String qName,    final Attributes attributes) throws SAXException {
      addTextIfNeeded();
      final Element el=doc.createElement(qName);
      for (int i=0; i < attributes.getLength(); i++) {
        el.setAttribute(attributes.getQName(i),attributes.getValue(i));
      }
      el.setUserData(LINE_NUMBER,String.valueOf(this.locator.getLineNumber()),null);
      el.setUserData(COLUMN_NUMBER,String.valueOf(this.locator.getColumnNumber()),null);
      elementStack.push(el);
    }
    @Override public void endElement(    final String uri,    final String localName,    final String qName){
      addTextIfNeeded();
      final Element closedEl=elementStack.pop();
      if (elementStack.isEmpty()) {
        doc.appendChild(closedEl);
      }
 else {
        final Element parentEl=elementStack.peek();
        parentEl.appendChild(closedEl);
      }
    }
    @Override public void characters(    final char ch[],    final int start,    final int length) throws SAXException {
      textBuffer.append(ch,start,length);
    }
    private void addTextIfNeeded(){
      if (textBuffer.length() > 0) {
        final Element el=elementStack.peek();
        final Node textNode=doc.createTextNode(textBuffer.toString());
        el.appendChild(textNode);
        textBuffer.delete(0,textBuffer.length());
      }
    }
  }
;
  parser.parse(is,handler);
  return doc;
}
