{
  unregisterDataStore();
  DataStore auxStore=null;
  DataStorePlugin pluginDataStore;
synchronized (this) {
    pluginDataStore=dataStorePlugins.get(type);
  }
  if (pluginDataStore != null) {
    Map<String,String> dataStoreProperties;
synchronized (this) {
      dataStoreProperties=new HashMap<String,String>();
      for (      Map.Entry<String,?> entry : configuration.entrySet()) {
        String key=entry.getKey();
        Object value=entry.getValue();
        if (value instanceof String) {
          dataStoreProperties.put(key,(String)value);
        }
      }
    }
    auxStore=pluginDataStore.getDataStore();
    auxStore.setDataStoreProperties(dataStoreProperties);
    auxStore.start();
  }
  if (auxStore != null) {
    List<DataStoreTemplate> callbacks=null;
synchronized (this) {
      if (dataStore == null) {
        dataStore=auxStore;
        callbacks=new ArrayList<DataStoreTemplate>(registrationCallbacks);
      }
    }
    if (callbacks != null) {
      for (      DataStoreTemplate callback : callbacks) {
        registrationCallbacks.remove(callback);
        try {
          callback.doWith(auxStore);
        }
 catch (        Exception e) {
          throw FabricException.launderThrowable(e);
        }
      }
      Dictionary<String,String> properties=new Hashtable<String,String>();
      properties.put(DATASTORE_TYPE_PROPERTY,auxStore.getType());
      ServiceRegistration<DataStore> reg=bundleContext.registerService(DataStore.class,auxStore,properties);
      LOG.info("Registered DataStore " + auxStore + " with "+ properties);
synchronized (this) {
        registration=reg;
        registrationCallbacks.removeAll(callbacks);
      }
    }
  }
}
