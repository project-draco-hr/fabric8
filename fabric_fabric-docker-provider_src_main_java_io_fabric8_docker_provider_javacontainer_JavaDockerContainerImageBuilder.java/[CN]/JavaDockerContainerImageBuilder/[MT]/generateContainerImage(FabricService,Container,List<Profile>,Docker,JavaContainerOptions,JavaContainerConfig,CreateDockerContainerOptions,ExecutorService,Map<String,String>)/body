{
  String libDir=options.getJavaLibraryPath();
  String libDirPrefix=libDir;
  if (!libDir.endsWith("/") && !libDir.endsWith(File.separator)) {
    libDirPrefix+=File.separator;
  }
  Map<String,Parser> artifacts=JavaContainers.getJavaContainerArtifacts(fabric,profileList,downloadExecutor);
  URI mavenRepoURI=fabric.getMavenRepoURI();
  String repoTextPrefix=mavenRepoURI.toString();
  int idx=repoTextPrefix.indexOf("://");
  if (idx > 0) {
    repoTextPrefix=repoTextPrefix.substring(idx + 3);
  }
  repoTextPrefix="http://" + fabric.getZooKeeperUser() + ":"+ fabric.getZookeeperPassword()+ "@"+ repoTextPrefix;
  String baseImage=options.getBaseImage();
  String tag=options.getNewImageTag();
  StringBuilder buffer=new StringBuilder();
  buffer.append("FROM " + baseImage + "\n\n");
  Set<Map.Entry<String,Parser>> entries=artifacts.entrySet();
  for (  Map.Entry<String,Parser> entry : entries) {
    Parser parser=entry.getValue();
    String path=parser.getArtifactPath();
    String url=repoTextPrefix + path;
    String version=parser.getVersion();
    String snapshotModifier="";
    if (version != null && version.contains("SNAPSHOT")) {
      long time=new Date().getTime();
      url+="?t=" + time;
      snapshotModifier="-" + time;
    }
    String fileName=parser.getArtifact() + "-" + version+ snapshotModifier+ "."+ parser.getType();
    String filePath=libDirPrefix + fileName;
    buffer.append("ADD " + url + " "+ filePath+ "\n");
  }
  if (container != null) {
    List<String> bundles=new ArrayList<String>();
    for (    String name : artifacts.keySet()) {
      if (name.startsWith("fab:")) {
        name=name.substring(4);
      }
      bundles.add(name);
    }
    Collections.sort(bundles);
    container.setProvisionList(bundles);
  }
  String restAPI=fabric.getRestAPI();
  if (Strings.isNotBlank(restAPI)) {
    addContainerOverlays(buffer,restAPI,fabric,container,profileList,docker,options,javaConfig,containerOptions,envVars);
  }
 else {
    LOGGER.error("Cannot perform container overlays as there is no REST API for fabric8!");
  }
  String[] copiedEnvVars=JavaContainerEnvironmentVariables.ALL_ENV_VARS;
  for (  String envVarName : copiedEnvVars) {
    String value=envVars.get(envVarName);
    if (value != null) {
      buffer.append("ENV " + envVarName + " "+ value+ " \n");
    }
  }
  String entryPoint=options.getEntryPoint();
  if (Strings.isNotBlank(entryPoint)) {
    buffer.append("CMD " + entryPoint + "\n");
  }
  String source=buffer.toString();
  File tmpFile=File.createTempFile("fabric-",".dockerfiledir");
  tmpFile.delete();
  tmpFile.mkdirs();
  File dockerFile=new File(tmpFile,"Dockerfile");
  Files.writeToFile(dockerFile,source.getBytes());
  String commands="docker build -t " + tag + " "+ tmpFile.getCanonicalPath();
  Process process=null;
  Runtime runtime=Runtime.getRuntime();
  String message=commands;
  LOGGER.info("Executing commands: " + message);
  String answer=null;
  String errors=null;
  try {
    process=runtime.exec(commands);
    answer=parseCreatedImage(process.getInputStream(),message);
    errors=processErrors(process.getErrorStream(),message);
  }
 catch (  Exception e) {
    LOGGER.error("Failed to execute process " + "stdin" + " for " + message + ": "+ e,e);
    throw e;
  }
  if (answer == null) {
    LOGGER.error("Failed to create image " + errors);
    throw new CreateDockerImageFailedException("Failed to create docker image: " + errors);
  }
 else {
    LOGGER.info("Created Image: " + answer);
    return answer;
  }
}
