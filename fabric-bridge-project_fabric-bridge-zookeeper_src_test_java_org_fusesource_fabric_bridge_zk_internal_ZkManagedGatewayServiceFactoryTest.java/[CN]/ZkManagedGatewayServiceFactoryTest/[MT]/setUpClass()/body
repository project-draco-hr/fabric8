{
  applicationContextZkServer=new ClassPathXmlApplicationContext("test-zkserver.xml");
  fabricService=applicationContextZkServer.getBean(FabricService.class);
  bundleContext=new MockBundleContext(){
    AmqJNDIPooledConnectionFactory localConnectionFactory=new AmqJNDIPooledConnectionFactory(TEST_LOCAL_BROKER_URL);
    AmqJNDIPooledConnectionFactory remoteConnectionFactory=new AmqJNDIPooledConnectionFactory(TEST_REMOTE_BROKER_URL);
    @Override public ServiceReference[] getServiceReferences(    String clazz,    String filter) throws InvalidSyntaxException {
      Hashtable<String,Object> properties=new Hashtable<String,Object>();
      if (CONNECTION_FACTORY_CLASS_NAME.equals(clazz)) {
        if (REMOTE_FACTORY_FILTER.equals(filter)) {
          properties.put(SERVICE_PROPERTY,remoteConnectionFactory);
        }
 else {
          return null;
        }
      }
 else       if (DESTINATION_RESOLVER_CLASS_NAME.equals(clazz)) {
        properties.put(SERVICE_PROPERTY,new DynamicDestinationResolver());
      }
 else {
        return null;
      }
      return new ServiceReference[]{new MockServiceReference(null,properties,null)};
    }
    @Override public Object getService(    ServiceReference reference){
      return reference.getProperty(SERVICE_PROPERTY);
    }
  }
;
}
