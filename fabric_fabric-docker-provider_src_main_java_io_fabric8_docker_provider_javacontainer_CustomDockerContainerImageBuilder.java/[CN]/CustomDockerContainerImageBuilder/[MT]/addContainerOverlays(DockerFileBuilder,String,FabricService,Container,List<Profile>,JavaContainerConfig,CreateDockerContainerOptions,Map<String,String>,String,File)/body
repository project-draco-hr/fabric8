{
  Set<String> profileIds=containerOptions.getProfiles();
  String versionId=containerOptions.getVersion();
  String layout=javaConfig.getOverlayFolder();
  if (layout != null) {
    for (    Profile profile : profiles) {
      Map<String,String> configuration=ProcessUtils.getProcessLayout(fabricService,profile,layout);
      if (configuration != null && !configuration.isEmpty()) {
        String profileRestApi=restAPI + "/version/" + profile.getVersion()+ "/profile/"+ profile.getId()+ "/overlay/file/"+ layout+ (layout.endsWith("/") ? "" : "/");
        Map variables=Profiles.getOverlayConfiguration(fabricService,profileIds,versionId,Constants.TEMPLATE_VARIABLES_PID);
        if (variables == null) {
          variables=new HashMap();
        }
 else {
          CuratorFramework curator=fabricService.adapt(CuratorFramework.class);
          JolokiaAgentHelper.substituteEnvironmentVariableExpressions(variables,environmentVariables,fabricService,curator);
        }
        variables.putAll(environmentVariables);
        LOGGER.info("Using template variables for MVEL: " + variables);
        overlaysDir.mkdirs();
        new ApplyConfigurationStep(dockerFile,profileRestApi,configuration,variables,overlaysDir,homeDirAndSeparator).install();
      }
    }
  }
  Map<String,String> overlayResources=Profiles.getOverlayConfiguration(fabricService,profileIds,versionId,Constants.PROCESS_CONTAINER_OVERLAY_RESOURCES_PID);
  if (overlayResources != null && !overlayResources.isEmpty()) {
    Set<Map.Entry<String,String>> entries=overlayResources.entrySet();
    for (    Map.Entry<String,String> entry : entries) {
      String localPath=entry.getKey();
      String urlText=entry.getValue();
      if (Strings.isNotBlank(urlText)) {
        URL url=null;
        try {
          url=new URL(urlText);
        }
 catch (        MalformedURLException e) {
          LOGGER.warn("Ignoring invalid URL '" + urlText + "' for overlay resource "+ localPath+ ". "+ e,e);
        }
        if (url != null) {
          LOGGER.warn("TODO - add overlay resources into a docker file for URL: " + url);
        }
      }
    }
  }
}
