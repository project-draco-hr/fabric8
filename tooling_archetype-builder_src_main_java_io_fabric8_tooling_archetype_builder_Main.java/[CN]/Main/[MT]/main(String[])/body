{
  try {
    String basedir=System.getProperty("basedir");
    if (Strings.isNullOrBlank(basedir)) {
      basedir=".";
    }
    String sourcedir=System.getProperty("sourcedir");
    if (Strings.isNullOrBlank(sourcedir)) {
      throw new IllegalArgumentException("No sourcedir system property");
    }
    File bomFile=new File(basedir,System.getProperty("rootPomFile","../pom.xml"));
    File catalogFile=new File(basedir,"target/classes/archetype-catalog.xml").getCanonicalFile();
    catalogFile.getParentFile().mkdirs();
    String outputPath=System.getProperty("outputdir");
    File outputDir=Strings.isNotBlank(outputPath) ? new File(outputPath) : new File(basedir);
    ArchetypeBuilder builder=new ArchetypeBuilder(catalogFile);
    builder.setBomFile(bomFile);
    builder.configure();
    List<String> dirs=new ArrayList<>();
    try {
      File sourceDirectory=new File(sourcedir);
      if (!sourceDirectory.exists() || !sourceDirectory.isDirectory()) {
        throw new IllegalArgumentException("Source directory: " + sourcedir + " is not a valid directory");
      }
      File[] childDirs=sourceDirectory.listFiles();
      if (childDirs == null || childDirs.length == 0) {
        throw new IllegalArgumentException("Source directory: " + sourcedir + " has no child folders");
      }
      for (      File childDir : childDirs) {
        if (childDir.isDirectory()) {
          File[] grandChildren=childDir.listFiles();
          if (grandChildren != null && grandChildren.length > 0) {
            builder.generateArchetypes(childDir.getName(),childDir,outputDir,false,dirs);
          }
        }
      }
    }
  finally {
      LOG.debug("Completed the generation. Closing!");
      builder.close();
    }
    StringBuffer sb=new StringBuffer();
    for (    String dir : dirs) {
      sb.append("\n\t<module>" + dir + "</module>");
    }
    System.out.println("Done creating archetypes:\n" + sb + "\n");
  }
 catch (  Exception e) {
    System.out.println("Caught: " + e.getMessage());
    e.printStackTrace();
  }
}
