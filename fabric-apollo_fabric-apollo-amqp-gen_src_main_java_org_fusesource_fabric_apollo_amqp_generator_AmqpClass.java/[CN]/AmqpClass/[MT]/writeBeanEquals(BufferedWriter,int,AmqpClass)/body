{
  writer.newLine();
  writer.write(Utils.tab(indent) + "public boolean equals(Object o){");
  writer.newLine();
  writer.write(Utils.tab(++indent) + "if(this == o) {");
  writer.newLine();
  writer.write(Utils.tab(++indent) + "return true;");
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent) + "if(o == null || !(o instanceof " + typeMapping+ ")) {");
  writer.newLine();
  writer.write(Utils.tab(++indent) + "return false;");
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent) + "return equals((" + typeMapping+ ") o);");
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent++) + "public boolean equals(" + typeMapping+ " b) {");
  writer.newLine();
  if (isDescribed()) {
    for (    AmqpField field : fields.values()) {
      writer.newLine();
      writer.write(Utils.tab(indent) + "if(b.get" + Utils.capFirst(field.getJavaName())+ "() == null ^ get"+ Utils.capFirst(field.getJavaName())+ "() == null) {");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "return false;");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
      writer.write(Utils.tab(indent) + "if(b.get" + Utils.capFirst(field.getJavaName())+ "() != null && !b.get"+ Utils.capFirst(field.getJavaName())+ "().equals(get"+ Utils.capFirst(field.getJavaName())+ "())){ ");
      writer.newLine();
      writer.write(Utils.tab(++indent) + "return false;");
      writer.newLine();
      writer.write(Utils.tab(--indent) + "}");
      writer.newLine();
    }
    writer.write(Utils.tab(indent) + "return true;");
  }
 else   if (baseType.isMap()) {
    writer.write(Utils.tab(indent) + "return AbstractAmqpMap.checkEqual(this, b);");
  }
 else   if (baseType.isList()) {
    writer.write(Utils.tab(indent) + "return AbstractAmqpList.checkEqual(this, b);");
  }
 else {
    writer.write(Utils.tab(indent) + "if(b == null) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "return false;");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
    writer.newLine();
    writer.write(Utils.tab(indent) + "if(b.getValue() == null ^ getValue() == null) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "return false;");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
    writer.newLine();
    writer.write(Utils.tab(indent) + "return b.getValue() == null || b.getValue().equals(getValue());");
  }
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  if (isPrimitive() && !isList() && !isMap()&& !getJavaType().startsWith("AmqpNull")) {
    writer.write(Utils.tab(indent) + "public int compareTo(" + getJavaType()+ " o) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + " return getValue().compareTo(o.getValue());");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
  }
  return indent;
}
