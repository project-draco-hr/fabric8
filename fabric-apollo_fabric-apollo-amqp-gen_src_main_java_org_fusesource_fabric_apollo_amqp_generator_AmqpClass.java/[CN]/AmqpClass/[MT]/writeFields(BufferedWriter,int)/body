{
  boolean ret=false;
  for (  AmqpField field : fields.values()) {
    ret=true;
    AmqpClass fieldClass=field.resolveAmqpFieldType();
    TypeRegistry.JavaTypeMapping valueType=fieldClass.getTypeMapping();
    writer.write(Utils.tab(indent) + "private " + valueType+ " "+ field.getJavaName());
    if (field.getDefaultValue() != null) {
      String value=field.getDefaultValue();
      if (fieldClass.isPrimitive()) {
        if (fieldClass.getValueMapping().getJavaType().startsWith("Long")) {
          writer.write(" = TypeFactory.create" + valueType + "("+ fieldClass.getValueMapping().getJavaType()+ ".valueOf("+ field.getDefaultValue()+ "L))");
        }
 else {
          writer.write(" = TypeFactory.create" + valueType + "("+ fieldClass.getValueMapping().getJavaType()+ ".valueOf("+ field.getDefaultValue()+ "))");
        }
      }
 else       if (fieldClass.isEnumType()) {
        writer.write(" = " + valueType + "."+ Utils.toJavaConstant(field.getDefaultValue()));
      }
    }
    writer.write(";");
    writer.newLine();
  }
  if (isRestricted()) {
    resolveRestrictedType().writeFields(writer,indent);
  }
  if (isPrimitive()) {
    writer.write(Utils.tab(indent) + "private " + getValueMapping().getJavaType()+ " value;");
    writer.newLine();
  }
  return ret;
}
