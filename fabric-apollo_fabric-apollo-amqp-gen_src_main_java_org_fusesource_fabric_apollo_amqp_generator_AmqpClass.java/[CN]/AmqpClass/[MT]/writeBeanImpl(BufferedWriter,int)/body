{
  AmqpClass baseType=resolveBaseType();
  writer.newLine();
  if (isPrimitive() && !isList() && !isMap()&& !getJavaType().startsWith("AmqpNull")) {
    writer.write(Utils.tab(indent++) + "public static class " + beanMapping.getShortName()+ " implements "+ typeMapping+ ", Comparable<"+ typeMapping+ ">, AmqpPrimitive<"+ getValueMapping()+ "> {");
  }
 else {
    writer.write(Utils.tab(indent++) + "public static class " + beanMapping.getShortName()+ " implements "+ typeMapping+ " {");
  }
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent) + "private " + bufferMapping.getShortName()+ " buffer;");
  writer.newLine();
  writer.write(Utils.tab(indent) + "private " + beanMapping.getShortName()+ " bean = this;");
  writer.newLine();
  writeFields(writer,indent);
  if (isMutable()) {
    writer.newLine();
    writer.write(Utils.tab(indent) + "" + beanMapping.getShortName()+ "() {");
    writer.newLine();
    if (!isDescribed() && baseType.isMap()) {
      writer.write(Utils.tab(indent + 1) + "this.value = new IAmqpMap.AmqpWrapperMap<" + getMapKeyType()+ ","+ getMapValueType()+ ">(new HashMap<"+ getMapKeyType()+ ","+ getMapValueType()+ ">());");
      writer.newLine();
    }
 else     if (!isDescribed() && baseType.isList()) {
      writer.write(Utils.tab(indent + 1) + "this.value = new IAmqpList.AmqpWrapperList(new ArrayList<AmqpType<?,?>>());");
      writer.newLine();
    }
    writer.write(Utils.tab(indent) + "}");
    writer.newLine();
  }
  writer.newLine();
  writer.write(Utils.tab(indent) + beanMapping.getShortName() + "("+ baseType.getValueMapping().getJavaType()+ " value) {");
  writer.newLine();
  if (isDescribed() && baseType.isList()) {
    writer.write(Utils.tab(++indent) + "for(int i = 0; i < value.getListCount(); i++) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "set(i, value.get(i));");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
  }
 else   if (isDescribed() && baseType.isMap()) {
    writer.write(Utils.tab(++indent) + "if (value == null) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "return;");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    for (    AmqpField field : fields.values()) {
      AmqpClass fieldClass=field.resolveAmqpFieldType();
      TypeRegistry.JavaTypeMapping valueType=fieldClass.getTypeMapping();
      writer.newLine();
      if (fieldClass.isEnumType()) {
        writer.write(Utils.tab(indent) + field.getJavaName() + " = "+ fieldClass.getJavaType()+ ".get(("+ fieldClass.resolveRestrictedType().getJavaType()+ ")value.get("+ Utils.toJavaConstant(field.getName())+ "_KEY));");
      }
 else {
        writer.write(Utils.tab(indent) + field.getJavaName() + " = ("+ valueType+ ") value.get("+ Utils.toJavaConstant(field.getName())+ "_KEY);");
      }
    }
  }
 else {
    writer.write(Utils.tab(++indent) + "this.value = value;");
  }
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent) + beanMapping.getShortName() + "("+ beanMapping+ " other) {");
  writer.newLine();
  writer.write(Utils.tab(indent + 1) + "this.bean = other;");
  writer.newLine();
  writer.write(Utils.tab(indent) + "}");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent) + "public final " + beanMapping.getShortName()+ " copy() {");
  writer.newLine();
  if (isMutable()) {
    writer.write(Utils.tab(++indent) + "return new " + beanMapping+ "(bean);");
  }
 else {
    writer.write(Utils.tab(++indent) + "return bean;");
  }
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  if (isCommand()) {
    writer.newLine();
    writer.write(Utils.tab(indent) + "public final void handle(AmqpCommandHandler handler) throws Exception {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "handler.handle" + Utils.capFirst(Utils.toJavaName(name))+ "(this);");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
  }
  writer.newLine();
  writer.write(Utils.tab(indent) + "public final " + bufferMapping+ " getBuffer(AmqpMarshaller marshaller) throws AmqpEncodingError{");
  writer.newLine();
  writer.write(Utils.tab(++indent) + "if(buffer == null) {");
  writer.newLine();
  writer.write(Utils.tab(++indent) + "buffer = new " + bufferMapping.getShortName()+ "(marshaller.encode(this));");
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.write(Utils.tab(indent) + "return buffer;");
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.newLine();
  writer.write(Utils.tab(indent) + "public final void marshal(DataOutput out, AmqpMarshaller marshaller) throws IOException, AmqpEncodingError{");
  writer.newLine();
  writer.write(Utils.tab(++indent) + "getBuffer(marshaller).marshal(out, marshaller);");
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writer.newLine();
  writeFieldAccessors(writer,indent,false);
  writer.newLine();
  if (isMutable()) {
    writer.newLine();
    writer.write(Utils.tab(indent) + "private void copyCheck() {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "if(buffer != null) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "buffer = null;");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
    writer.write(Utils.tab(indent) + "if(bean != this) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "copy(bean);");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
    writer.newLine();
    writer.write(Utils.tab(indent) + "private void copy(" + beanMapping+ " other) {");
    writer.newLine();
    indent++;
    if (isDescribed()) {
      for (      AmqpField field : baseType.fields.values()) {
        writer.write(Utils.tab(indent) + "this." + field.getJavaName()+ "= other."+ field.getJavaName()+ ";");
        writer.newLine();
      }
    }
 else {
      writer.write(Utils.tab(indent) + "this.value = other.value;");
      writer.newLine();
    }
    writer.write(Utils.tab(indent) + "bean = this;");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
  }
  indent=writeBeanEquals(writer,indent,baseType);
  writer.newLine();
  writer.write(Utils.tab(indent) + "public int hashCode() {");
  writer.newLine();
  if (baseType.isMap()) {
    writer.write(Utils.tab(++indent) + "return AbstractAmqpMap.hashCodeFor(this);");
  }
 else   if (baseType.isList()) {
    writer.write(Utils.tab(++indent) + "return AbstractAmqpList.hashCodeFor(this);");
  }
 else {
    writer.write(Utils.tab(++indent) + "if(getValue() == null) {");
    writer.newLine();
    writer.write(Utils.tab(++indent) + "return " + beanMapping+ ".class.hashCode();");
    writer.newLine();
    writer.write(Utils.tab(--indent) + "}");
    writer.newLine();
    writer.write(Utils.tab(indent) + "return getValue().hashCode();");
  }
  writer.newLine();
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
  writeToString(writer,indent,false);
  writer.write(Utils.tab(--indent) + "}");
  writer.newLine();
}
