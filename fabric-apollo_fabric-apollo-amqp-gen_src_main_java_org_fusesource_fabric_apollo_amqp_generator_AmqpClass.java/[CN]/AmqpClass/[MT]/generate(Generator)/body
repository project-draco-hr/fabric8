{
  if (handcoded) {
    return;
  }
  File file=new File(generator.getOutputDirectory() + File.separator + new String(typeMapping.getFullName()).replace(".",File.separator)+ ".java");
  file.getParentFile().mkdirs();
  if (file.exists()) {
    file.delete();
  }
  BufferedWriter writer=new BufferedWriter(new FileWriter(file));
  Utils.writeJavaCopyWrite(writer);
  writer.write("package " + typeMapping.getPackageName() + ";\n");
  writer.newLine();
  if (writeImports(writer,generator,false)) {
    writer.newLine();
  }
  if (doc != null) {
    doc.writeJavaDoc(writer,0);
  }
 else   if (label != null) {
    Utils.writeJavaComment(writer,0,"Represents a " + label);
  }
  Utils.writeAutoGeneratedWarning(writer,0);
  if (isEnumType()) {
    writer.write("public enum " + typeMapping);
  }
 else   if (isMarshallable()) {
    if (isRestricted()) {
      writer.write("public interface " + typeMapping + " extends "+ resolveRestrictedType().getTypeMapping());
    }
 else     if (isDescribed()) {
      writer.write("public interface " + typeMapping + " extends "+ descriptor.resolveDescribedType().getTypeMapping());
    }
 else {
      writer.write("public interface " + typeMapping + " extends AmqpType<"+ beanMapping+ ", "+ bufferMapping+ ">");
    }
    if (isList() || isMap()) {
      writer.write(", " + valueMapping.getJavaType());
    }
    if (isCommand()) {
      writer.write(", AmqpCommand");
    }
  }
  writer.write(" {");
  writer.newLine();
  if (isMarshallable()) {
    writer.newLine();
    writeBeanInterface(writer,1);
    writeBeanImpl(writer,1);
    writeBufferImpl(writer,1);
  }
 else {
    writeEnumType(writer);
  }
  writer.write("}");
  writer.flush();
  writer.close();
  if (!isRestricted()) {
    generateMarshaller(generator);
  }
}
